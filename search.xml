<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>testTwoServer</title>
      <link href="/2022/04/26/testTwoServer/"/>
      <url>/2022/04/26/testTwoServer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-1</title>
      <link href="/2022/04/02/vue-1/"/>
      <url>/2022/04/02/vue-1/</url>
      
        <content type="html"><![CDATA[<p>说明：本文是基于全网最细尚硅谷天禹老师的vue2.0和vue3.0教程，具体资料可以点击下面的链接。</p><p>链接：<a href="https://pan.baidu.com/s/1x0IjNeJ-V4gcPeEJIQ7unA">https://pan.baidu.com/s/1x0IjNeJ-V4gcPeEJIQ7unA</a><br>提取码：f5hy</p><hr><h1 id="1-初识vue"><a href="#1-初识vue" class="headerlink" title="1. 初识vue"></a>1. 初识vue</h1><ol><li><p>想让Vue工作，就必须创建一个<strong>Vue实例</strong>，且要传入一个配置对象；</p></li><li><p>root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</p></li><li><p>root容器里的代码被称为【Vue模板】；</p></li><li><p>Vue实例和容器是一一对应的；</p></li><li><p>真实开发中只有一个Vue实例，并且会配合着组件一起使用；</p></li><li><p><code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</p></li><li><p>一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；<br> 注意区分：js表达式 和 js代码(语句)<br> 1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：<br>             (1). <code>a</code><br>             (2). <code>a+b</code><br>             (3). <code>demo(1)</code><br>             (4). <code>x === y ? &#39;a&#39; : &#39;b&#39;</code><br> 2.js代码(语句)<br>             (1). <code>if()&#123;&#125;</code><br>             (2). <code>for()&#123;&#125;</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;初识Vue&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>&lt;!-- 准备好一个vue容器 --&gt;<br>&lt;div id=&quot;demo&quot;&gt;<br>&lt;h1&gt;Hello，&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123;address&#125;&#125;&lt;/h1&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>//创建Vue实例<br>new Vue(&#123;<br>el: &#x27;#demo&#x27;, //el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。<br>data: &#123; //data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。<br>name: &#x27;atguigu&#x27;,<br>address: &#x27;北京&#x27;<br>&#125;<br>&#125;)<br><br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ol><h1 id="2-vue模板语法"><a href="#2-vue模板语法" class="headerlink" title="2. vue模板语法"></a>2. vue模板语法</h1><p>Vue模板语法有2大类 ：</p><ol><li><p>插值语法：<br> 功能：用于解析标签体内容。<br> 写法：<code>&#123;&#123;xxx&#125;&#125;</code>，xxx是js表达式，且可以直接读取到data中的所有属性。</p></li><li><p>指令语法：<br> 功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。<br> 举例：<code>v-bind:href=&quot;xxx&quot;</code> 或  简写为 <code>:href=&quot;xxx&quot;</code>，xxx同样要写js表达式，<br>          且可以直接读取到data中的所有属性。<br> 备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;模板语法&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h1&gt;插值语法&lt;/h1&gt;<br>&lt;h3&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h3&gt;<br><br>&lt;hr/&gt;<br><br>&lt;h1&gt;指令语法&lt;/h1&gt;<br>&lt;!-- 完整写法 --&gt;<br>&lt;a v-bind:href=&quot;school.url.toUpperCase()&quot; x=&quot;hello&quot;&gt;点我去&#123;&#123;school.name&#125;&#125;学习1&lt;/a&gt; <br>&lt;!-- 简略写法 --&gt;<br>&lt;a :href=&quot;school.url&quot; x=&quot;hello&quot;&gt;点我去&#123;&#123;school.name&#125;&#125;学习2&lt;/a&gt; <br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;!-- 阻止 vue 在启动时生成生产提示。 --&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false <br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;jack&#x27;,<br>school:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>url:&#x27;http://www.atguigu.com&#x27;,<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ol><h1 id="3-数据绑定"><a href="#3-数据绑定" class="headerlink" title="3. 数据绑定"></a>3. 数据绑定</h1><p>Vue中有2种数据绑定的方式：</p><ol><li>单向绑定(v-bind)：数据只能从data流向页面。</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。<br>备注：<br>    1.双向绑定一般都应用在表单类元素上（如：input、select等）<br>    2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</li></ol><p><strong>注意</strong>：在下面的代码笔记中显示出了两种写法，但是在浏览器上测试的时候需要注释掉其中一种。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;数据绑定&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- 普通写法 --&gt;<br>单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;<br>双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; <br><br>&lt;!-- 简写 --&gt;<br>单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br/&gt;<br>双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br/&gt;<br><br>&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;<br>&lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="4-el的两种写法"><a href="#4-el的两种写法" class="headerlink" title="4. el的两种写法"></a>4. el的两种写法</h1><p>data和el的两种写法：</p><ol><li>el有2种写法<br> (1). new Vue时候配置el属性。<br> (2). 先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值。</li><li>data有2种写法<br> (1).对象式<br> (2).函数式<br>  如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</li><li><strong>一个重要的原则</strong>：<br>         由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</li></ol><blockquote><ol><li><p>el的两种写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">const v = new Vue(&#123;<br>el:&#x27;#root&#x27;, // 第一种写法<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 第二种写法<br>v.$mount(&#x27;#root&#x27;)<br></code></pre></td></tr></table></figure></li><li><p>data的两种写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>//data的第一种写法：对象式<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>//data的第二种写法：函数式<br>data()&#123;<br>console.log(this) //此处的this是Vue实例对象<br>return&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></blockquote><p><strong>注意</strong>：在下面的代码笔记中显示出了两种写法，但是在浏览器上测试的时候需要注释掉其中一种。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 完整代码 --&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;el与data的两种写法&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h1&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h1&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>//el的两种写法<br>const v = new Vue(&#123;<br>el:&#x27;#root&#x27;, //第一种写法<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;)<br>console.log(v)<br>v.$mount(&#x27;#root&#x27;) //第二种写法<br><br>//data的两种写法<br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>//data的第一种写法：对象式<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br><br>//data的第二种写法：函数式<br>data()&#123;<br>console.log(&#x27;@@@&#x27;,this) //此处的this是Vue实例对象<br>return&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="5-MVVM模型"><a href="#5-MVVM模型" class="headerlink" title="5. MVVM模型"></a>5. MVVM模型</h1><p>MVVM模型</p><ol><li><p>M：模型(Model) ：data中的数据</p></li><li><p>V：视图(View) ：模板代码</p></li><li><p>VM：视图模型(ViewModel)：Vue实例</p></li></ol><p>观察发现：</p><ol><li>data中所有的属性，最后都出现在了<strong>vm</strong>身上。</li><li>vm 身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;理解MVVM&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;<br>&lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;<br>&lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;<br>&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;<br>&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;<br>&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;<br>&#125;)<br>console.log(vm)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="6-数据代理"><a href="#6-数据代理" class="headerlink" title="6. 数据代理"></a>6. 数据代理</h1><h2 id="6-1-回顾Object-defineproperty方法"><a href="#6-1-回顾Object-defineproperty方法" class="headerlink" title="6.1 回顾Object.defineproperty方法"></a>6.1 回顾Object.defineproperty方法</h2><p>案例：向person中添加age属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;回顾Object.defineproperty方法&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script type=&quot;text/javascript&quot; &gt;<br>let number = 18<br>let person = &#123;<br>name:&#x27;张三&#x27;,<br>sex:&#x27;男&#x27;,<br>&#125;<br><br>Object.defineProperty(person,&#x27;age&#x27;,&#123;<br>// value:18,<br>// enumerable:true, //控制属性是否可以枚举，默认值是false<br>// writable:true, //控制属性是否可以被修改，默认值是false<br>// configurable:true //控制属性是否可以被删除，默认值是false<br><br>//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值<br>get()&#123;<br>console.log(&#x27;有人读取age属性了&#x27;)<br>return number<br>&#125;,<br><br>//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值<br>set(value)&#123;<br>console.log(&#x27;有人修改了age属性，且值是&#x27;,value)<br>number = value<br>&#125;<br><br>&#125;)<br>console.log(person)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="6-2-何为数据代理"><a href="#6-2-何为数据代理" class="headerlink" title="6.2 何为数据代理"></a>6.2 何为数据代理</h2><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p><h2 id="6-3-vue中的数据代理"><a href="#6-3-vue中的数据代理" class="headerlink" title="6.3 vue中的数据代理"></a>6.3 vue中的数据代理</h2><ol><li>Vue中的数据代理：<br>      通过vm对象来代理data对象中属性的操作（读&#x2F;写）</li><li>Vue中数据代理的好处：<br>      更加方便的操作data中的数据</li><li>基本原理：<br>     通过<code>Object.defineProperty()</code>把data对象中所有属性添加到vm上。<br>     为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。<br>     在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</li></ol><p>通过下面的代码理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;Vue中的数据代理&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;宏福科技园&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220319113623.png" alt="数据代理图示"></p><h1 id="7-事件处理"><a href="#7-事件处理" class="headerlink" title="7. 事件处理"></a>7. 事件处理</h1><h2 id="7-1-事件的基本使用"><a href="#7-1-事件的基本使用" class="headerlink" title="7.1 事件的基本使用"></a>7.1 事件的基本使用</h2><p>事件的基本使用：</p><ol><li>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</li><li>事件的回调需要配置在methods对象中，最终会在vm上；</li><li>methods中配置的函数，<strong>不要用箭头函数</strong>！否则this就不是vm了，而是向外找；</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是 vm 或 组件实例对象 ；</li><li><code>@click=&quot;demo&quot;</code> 和 <code>@click=&quot;demo($event)&quot;</code> 效果一致，但后者可以传参；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;事件的基本使用&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;<br>&lt;button @click=&quot;showInfo1&quot;&gt;点我提示信息1（不传参）&lt;/button&gt;<br>&lt;button @click=&quot;showInfo2($event,66)&quot;&gt;点我提示信息2（传参）&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>methods:&#123;<br>showInfo1(event)&#123;<br>// console.log(event) // 这里输出的是Point、erEvent事件对象<br>// console.log(event.target.innerText)  // 这里输出的是“点我提示信息1（不传参）”<br>// console.log(this) //此处的this是vm<br>alert(&#x27;同学你好！&#x27;)<br>&#125;,<br>showInfo2(event,number)&#123;<br>console.log(event,number)<br>// console.log(event.target.innerText)<br>// console.log(this) //此处的this是vm<br>alert(&#x27;同学你好！！&#x27;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="7-2-事件修饰符"><a href="#7-2-事件修饰符" class="headerlink" title="7.2 事件修饰符"></a>7.2 事件修饰符</h2><p><strong>注意</strong>：首先需要有html事件冒泡的基础知识。</p><p>vue中的事件修饰符：</p><ol><li>prevent：阻止默认事件（常用）；</li><li>stop：阻止事件冒泡（常用）；</li><li>once：事件只触发一次（常用）；</li><li>capture：使用事件的捕获模式；</li><li>self：只有event.target是当前操作的元素时才触发事件；</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;事件修饰符&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;style&gt;<br>*&#123;<br>margin-top: 20px;<br>&#125;<br>.demo1&#123;<br>height: 50px;<br>background-color: skyblue;<br>&#125;<br>.box1&#123;<br>padding: 5px;<br>background-color: skyblue;<br>&#125;<br>.box2&#123;<br>padding: 5px;<br>background-color: orange;<br>&#125;<br>.list&#123;<br>width: 200px;<br>height: 200px;<br>background-color: peru;<br>overflow: auto;<br>&#125;<br>li&#123;<br>height: 100px;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;<br>&lt;!-- 阻止默认事件（常用） --&gt;<br>&lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;<br><br>&lt;!-- 阻止事件冒泡（常用） --&gt;<br>&lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;<br>&lt;button @click.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;<br>&lt;!-- 修饰符可以连续写，例如此处要阻止事件冒泡，还要阻止页面跳转的默认事件 --&gt;<br>&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;<br>&lt;/div&gt;<br><br>&lt;!-- 事件只触发一次（常用） --&gt;<br>&lt;button @click.once=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;<br><br>&lt;!-- 使用事件的捕获模式 --&gt;<br>&lt;div class=&quot;box1&quot; @click.capture=&quot;showMsg(1)&quot;&gt;<br>div1<br>&lt;div class=&quot;box2&quot; @click=&quot;showMsg(2)&quot;&gt;<br>div2<br>&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;<br>&lt;div class=&quot;demo1&quot; @click.self=&quot;showInfo&quot;&gt;<br>&lt;button @click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;<br>&lt;/div&gt;<br><br>&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;<br>&lt;ul @wheel.passive=&quot;demo&quot; class=&quot;list&quot;&gt;<br>&lt;li&gt;1&lt;/li&gt;<br>&lt;li&gt;2&lt;/li&gt;<br>&lt;li&gt;3&lt;/li&gt;<br>&lt;li&gt;4&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;,<br>methods:&#123;<br>showInfo(e)&#123;<br>alert(&#x27;同学你好！&#x27;)<br>// console.log(e.target)<br>&#125;,<br>showMsg(msg)&#123;<br>console.log(msg)<br>&#125;,<br>demo()&#123;<br>for (let i = 0; i &lt; 100000; i++) &#123;<br>console.log(&#x27;#&#x27;)<br>&#125;<br>console.log(&#x27;累坏了&#x27;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="7-3-键盘事件"><a href="#7-3-键盘事件" class="headerlink" title="7.3 键盘事件"></a>7.3 键盘事件</h2><ol><li>Vue中常用的按键别名：<br>           回车 &#x3D;&gt; enter<br>      删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)<br>      退出 &#x3D;&gt; esc<br>      空格 &#x3D;&gt; space<br>      换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)<br>      上 &#x3D;&gt; up<br>      下 &#x3D;&gt; down<br>      左 &#x3D;&gt; left<br>      右 &#x3D;&gt; right</li><li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</li><li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<br>  (1). 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br> (2). 配合keydown使用：正常触发事件。</li><li>也可以使用keyCode去指定具体的按键（不推荐），因为在不同的系统下有些按键的keyCode可能不同。</li><li>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</li></ol><blockquote><p>将下面的第12行代码改写成：</p><p><code>&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keyup.enter=&quot;showInfo&quot;&gt;</code></p><p>则会发现在输入框中输入字符后，点击回车键，就会log出所输入的内容。</p><hr><p>将下面的第12行代码改写成：</p><p><code>&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keydown.ctrl=&quot;showInfo&quot;&gt;</code></p><p>则会发现在输入框中输入字符后，点击ctrl，就会log出所输入的内容。</p><hr><p>将下面的第12行代码改写成：</p><p><code>&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keyup.ctrl.y=&quot;showInfo&quot;&gt;</code></p><p>则会发现在输入框中输入字符后，同时点击ctrl和y，就会log出所输入的内容。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 代码的最终写法： --&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;键盘事件&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;<br>&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keydown.huiche=&quot;showInfo&quot;&gt;<br>&lt;!-- 注意此处的showInfo并不是方法的写法 --&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br>Vue.config.keyCodes.huiche = 13 //定义了一个别名按键<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;,<br>methods: &#123;<br>showInfo(e)&#123;<br>// console.log(e.key,e.keyCode)<br>console.log(e.target.value)<br>&#125;<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="8-计算属性"><a href="#8-计算属性" class="headerlink" title="8. 计算属性"></a>8. 计算属性</h1><h2 id="8-1-姓名案例-插值语法实现"><a href="#8-1-姓名案例-插值语法实现" class="headerlink" title="8.1 姓名案例_插值语法实现"></a>8.1 姓名案例_插值语法实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;姓名案例_插值语法实现&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>全名：&lt;span&gt;&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>firstName:&#x27;张&#x27;,<br>lastName:&#x27;三&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="8-2-姓名案例-methods实现"><a href="#8-2-姓名案例-methods实现" class="headerlink" title="8.2 姓名案例_methods实现"></a>8.2 姓名案例_methods实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;姓名案例_methods实现&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>全名：&lt;span&gt;&#123;&#123;fullName()&#125;&#125;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>firstName:&#x27;张&#x27;,<br>lastName:&#x27;三&#x27;<br>&#125;,<br>methods: &#123;<br>fullName()&#123;<br>console.log(&#x27;@---fullName&#x27;)<br>return this.firstName + &#x27;-&#x27; + this.lastName<br>&#125;<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>data中的数据，只要有任一变化，就会<strong>重新解析模板</strong>。属性会重新检查，插值语法里面的方法也会重新调用。</p><h2 id="8-3-姓名案例-计算属性实现"><a href="#8-3-姓名案例-计算属性实现" class="headerlink" title="8.3 姓名案例_计算属性实现"></a>8.3 姓名案例_计算属性实现</h2><p>计算属性：</p><ol><li>定义：要用的属性不存在，要通过已有属性计算得来。</li><li>原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</li><li>get函数什么时候执行？<br>  (1). 初次读取时会执行一次。<br> (2). 当依赖的数据发生改变时会被再次调用。</li><li>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</li><li>备注：<br> (1). 计算属性最终会出现在vm上，直接读取使用即可。<br> (2). 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的<br> 数据发生改变。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;姓名案例_计算属性实现&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>测试：&lt;input type=&quot;text&quot; v-model=&quot;x&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>firstName:&#x27;张&#x27;,<br>lastName:&#x27;三&#x27;,<br>x:&#x27;你好&#x27;<br>&#125;,<br>computed:&#123;<br>fullName:&#123;<br>// get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值<br>get()&#123;<br>// console.log(&#x27;get被调用了&#x27;) // 可以log查看get什么时候被调用<br>// console.log(this) //此处的this是vm<br>return this.firstName + &#x27;-&#x27; + this.lastName<br>&#125;,<br>// set什么时候调用? 当fullName被修改时。<br>set(value)&#123;<br>console.log(&#x27;set&#x27;,value)<br>const arr = value.split(&#x27;-&#x27;)<br>this.firstName = arr[0]<br>this.lastName = arr[1]<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="8-4-姓名案例-计算属性简写"><a href="#8-4-姓名案例-计算属性简写" class="headerlink" title="8.4 姓名案例_计算属性简写"></a>8.4 姓名案例_计算属性简写</h2><p>有时候如果只展示属性但是不需要修改属性（只读不写），不需要set，就可以使用简写方式。</p><blockquote><p>完整方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">computed:&#123;<br>fullName:&#123;<br>get()&#123;<br>console.log(&#x27;get被调用了&#x27;)<br>return this.firstName + &#x27;-&#x27; + this.lastName<br>&#125;,<br>set(value)&#123;<br>console.log(&#x27;set&#x27;,value)<br>const arr = value.split(&#x27;-&#x27;)<br>this.firstName = arr[0]<br>this.lastName = arr[1]<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简写方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">computed:&#123;<br>fullName()&#123;<br>console.log(&#x27;get被调用了&#x27;)<br>return this.firstName + &#x27;-&#x27; + this.lastName<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h1 id="9-监视属性"><a href="#9-监视属性" class="headerlink" title="9. 监视属性"></a>9. 监视属性</h1><p>vscode插件推荐</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220319142933.png" alt="image-20220319142933358"></p><h2 id="9-1-天气案例"><a href="#9-1-天气案例" class="headerlink" title="9.1 天气案例"></a>9.1 天气案例</h2><p>需求：点击下面的按钮实现今天天气是炎热还是凉爽的切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;天气案例&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>isHot:true,<br>&#125;,<br>computed:&#123;<br>info()&#123;<br>return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>changeWeather()&#123;<br>this.isHot = !this.isHot<br>&#125;<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>可以使用一些简单的写法，直接写在@click事件里面，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">绑定事件的时候：可以写一些简单的语句，例如下面的写法：<br>&lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>注意此处可以直接从isHot里面拿值，所以不用this。</p><p>而完整写法由于需要从vue的实例对象里面拿到isHot，所以需要用到this。</p></blockquote><h2 id="9-2-天气案例-监视属性"><a href="#9-2-天气案例-监视属性" class="headerlink" title="9.2 天气案例_监视属性"></a>9.2 天气案例_监视属性</h2><p>监视属性watch：</p><ol><li>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</li><li>监视的属性必须存在，才能进行监视！！</li><li>监视的两种写法：<br> (1).new Vue时传入watch配置<br> (2).通过vm.$watch监视</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;天气案例_监视属性&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>isHot:true,<br>&#125;,<br>computed:&#123;<br>info()&#123;<br>return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;<br>&#125;<br>&#125;,<br>watch:&#123;<br>// 监视属性的第一种方式<br>isHot:&#123;<br>immediate:true, //初始化时让handler调用一下<br>//handler什么时候调用？当isHot发生改变时。<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br>// 监视属性的第二种方式<br>vm.$watch(&#x27;isHot&#x27;,&#123;<br>immediate:true,<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h2 id="9-3-深度监视"><a href="#9-3-深度监视" class="headerlink" title="9.3 深度监视"></a>9.3 深度监视</h2><p>深度监视：<br>        (1).Vue中的watch默认不监测对象内部值的改变（一层）。<br>        (2).配置deep:true可以监测对象内部值改变（多层）。<br>备注：<br>        (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以。<br>        (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p><blockquote><p>watch可以检测多级结构中某属性的变化，也可以监视所有属性的变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">//监视多级结构中某个属性的变化<br>&#x27;numbers.a&#x27;:&#123;<br>handler()&#123;<br>console.log(&#x27;a被改变了&#x27;)<br>&#125;<br>&#125;<br>//监视多级结构中所有属性的变化<br>numbers:&#123;<br>deep:true,<br>handler()&#123;<br>console.log(&#x27;numbers改变了&#x27;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处需要注意一个问题：watch中监视的某个属性应该是字符串形式的。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;天气案例_深度监视&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;<br>&lt;hr/&gt;<br>&lt;h3&gt;a的值是:&#123;&#123;numbers.a&#125;&#125;&lt;/h3&gt;<br>&lt;button @click=&quot;numbers.a++&quot;&gt;点我让a+1&lt;/button&gt;<br><br>&lt;button @click=&quot;numbers = &#123;a:666,b:888&#125;&quot;&gt;彻底替换掉numbers&lt;/button&gt;<br>&#123;&#123;numbers.c.d.e&#125;&#125;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>isHot:true,<br>numbers:&#123;<br>a:1,<br>b:1,<br>c:&#123;<br>d:&#123;<br>e:100<br>&#125;<br>&#125;<br>&#125;<br>&#125;,<br>computed:&#123;<br>info()&#123;<br>return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>changeWeather()&#123;<br>this.isHot = !this.isHot<br>&#125;<br>&#125;,<br>watch:&#123;<br>isHot:&#123;<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;,<br>// 下面两种，共存会报错，需要注释其中一种<br>//监视多级结构中某个属性的变化<br>&#x27;numbers.a&#x27;:&#123;<br>handler()&#123;<br>console.log(&#x27;a被改变了&#x27;)<br>&#125;<br>&#125;<br>//监视多级结构中所有属性的变化<br>numbers:&#123;<br>deep:true,<br>handler()&#123;<br>console.log(&#x27;numbers改变了&#x27;)<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="9-4-天气案例-监视属性-简写"><a href="#9-4-天气案例-监视属性-简写" class="headerlink" title="9.4 天气案例 _ 监视属性 _ 简写"></a>9.4 天气案例 _ 监视属性 _ 简写</h2><blockquote><ol><li><p>vm监视的简写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">watch:&#123;<br>// 正常写法<br>isHot:&#123;<br>// immediate:true, //初始化时让handler调用一下<br>// deep:true,//深度监视<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;,<br>// 简写 当配置对象里面只有handler时可以简写，但是不能开启深度监视<br>isHot(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第二周</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 正常写法<br>vm.$watch(&#x27;isHot&#x27;,&#123;<br>immediate:true, //初始化时让handler调用一下<br>deep:true,//深度监视<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;)<br>// 简写<br>vm.$watch(&#x27;isHot&#x27;,function(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><p>注意：</p><p>2.2的方式只能写成标准函数，不能写成箭头函数，否则会造成this指向问题。</p><p>如果是标准函数，this指的是vue；如果是箭头函数，this指的是window。</p><p>所有被vue管理的函数都不能写成箭头函数。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 完整代码 --&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;天气案例_监视属性_简写&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>isHot:true,<br>&#125;,<br>computed:&#123;<br>info()&#123;<br>return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>changeWeather()&#123;<br>this.isHot = !this.isHot<br>&#125;<br>&#125;,<br>watch:&#123;<br>//正常写法<br>/* isHot:&#123;<br>// immediate:true, //初始化时让handler调用一下<br>// deep:true,//深度监视<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;, */<br>// 简写 当配置对象里面只有handler时可以简写，但是不能开启深度监视<br>/* isHot(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)<br>&#125; */<br>&#125;<br>&#125;)<br><br>//正常写法<br>/* vm.$watch(&#x27;isHot&#x27;,&#123;<br>immediate:true, //初始化时让handler调用一下<br>deep:true,//深度监视<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;) */<br><br>//简写<br>/* vm.$watch(&#x27;isHot&#x27;,function(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)<br>&#125;) */<br><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="9-5-computed和watch之间的区别"><a href="#9-5-computed和watch之间的区别" class="headerlink" title="9.5 computed和watch之间的区别"></a>9.5 computed和watch之间的区别</h2><p>computed和watch之间的区别：</p><ol><li>computed能完成的功能，watch都可以完成。</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</li></ol><p>两个重要的小原则：</p><ol><li>所被Vue管理的函数，写成普通函数，这样this的指向才是vm 或 组件实例对象</li><li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调<br>函数），写成箭头函数，这样this的指向才是vm 或 组件实例对象。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;姓名案例_watch实现&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>firstName:&#x27;张&#x27;,<br>lastName:&#x27;三&#x27;,<br>fullName:&#x27;张-三&#x27;<br>&#125;,<br>watch:&#123;<br>firstName(val)&#123;<br>setTimeout(()=&gt;&#123;<br>console.log(this)<br>this.fullName = val + &#x27;-&#x27; + this.lastName<br>&#125;,1000);<br>&#125;,<br>lastName(val)&#123;<br>this.fullName = this.firstName + &#x27;-&#x27; + val<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="10-绑定样式"><a href="#10-绑定样式" class="headerlink" title="10. 绑定样式"></a>10. 绑定样式</h1><ol><li>class样式<br>     写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。<br>             字符串写法适用于：类名不确定，要动态获取。<br>             对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。<br>             数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li><li>style样式<br>     :style&#x3D;”{fontSize: xxx}”其中xxx是动态值。<br>     :style&#x3D;”[a,b]”其中a、b是样式对象。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;绑定样式&lt;/title&gt;<br>&lt;style&gt;<br>.basic&#123;<br>width: 400px;<br>height: 100px;<br>border: 1px solid black;<br>&#125;<br><br>.happy&#123;<br>border: 4px solid red;;<br>background-color: rgba(255, 255, 0, 0.644);<br>background: linear-gradient(30deg,yellow,pink,orange,yellow);<br>&#125;<br>.sad&#123;<br>border: 4px dashed rgb(2, 197, 2);<br>background-color: gray;<br>&#125;<br>.normal&#123;<br>background-color: skyblue;<br>&#125;<br><br>.atguigu1&#123;<br>background-color: yellowgreen;<br>&#125;<br>.atguigu2&#123;<br>font-size: 30px;<br>text-shadow:2px 2px 10px red;<br>&#125;<br>.atguigu3&#123;<br>border-radius: 20px;<br>&#125;<br>&lt;/style&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;<br>&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;<br><br>&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;<br>&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;<br><br>&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;<br>&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;<br><br>&lt;!-- 绑定style样式--对象写法 --&gt;<br>&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;<br>&lt;!-- 绑定style样式--对象写法 --&gt;<br>&lt;div class=&quot;basic&quot; :style=&quot;[styleObj,styleObj2]&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;<br>&lt;!-- 绑定style样式--数组写法 --&gt;<br>&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>mood:&#x27;normal&#x27;,<br>classArr:[&#x27;atguigu1&#x27;,&#x27;atguigu2&#x27;,&#x27;atguigu3&#x27;],<br>classObj:&#123;<br>atguigu1:false,<br>atguigu2:false,<br>&#125;,<br>styleObj:&#123;<br>fontSize: &#x27;40px&#x27;,<br>color:&#x27;red&#x27;,<br>&#125;,<br>styleObj2:&#123;<br>backgroundColor:&#x27;orange&#x27;<br>&#125;,<br>styleArr:[<br>&#123;<br>fontSize: &#x27;40px&#x27;,<br>color:&#x27;blue&#x27;,<br>&#125;,<br>&#123;<br>backgroundColor:&#x27;gray&#x27;<br>&#125;<br>]<br>&#125;,<br>methods: &#123;<br>changeMood()&#123;<br>const arr = [&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]<br>const index = Math.floor(Math.random()*3)<br>this.mood = arr[index]<br>&#125;<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="11-条件渲染"><a href="#11-条件渲染" class="headerlink" title="11. 条件渲染"></a>11. 条件渲染</h1><p>条件渲染：</p><ol><li><p>v-if<br>  写法：<br>      (1).v-if&#x3D;”表达式”<br>      (2).v-else-if&#x3D;”表达式”<br>      (3).v-else&#x3D;”表达式”<br> 适用于：切换频率较低的场景。<br> 特点：不展示的DOM元素直接被移除。<br> 注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p></li><li><p>v-show<br>  写法：v-show&#x3D;”表达式”<br> 适用于：切换频率较高的场景。<br> 特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p></li><li><p>备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p></li><li><p>template的使用：</p><p>如果需要满足条件的同时展现多个标签，又不希望有div来破坏现在的结构层次，可以使用template，渲染的时候不会出现template。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;条件渲染&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;<br><br>&lt;!-- 使用v-show做条件渲染 --&gt;<br>&lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br><br>&lt;!-- 使用v-if做条件渲染 --&gt;<br>&lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br><br>&lt;!-- v-else和v-else-if --&gt;<br>&lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;<br>&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;<br>&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;<br>&lt;div v-else&gt;哈哈&lt;/div&gt;<br><br>&lt;!-- v-if与template的配合使用 --&gt;<br>&lt;template v-if=&quot;n === 1&quot;&gt;<br>&lt;h2&gt;你好&lt;/h2&gt;<br>&lt;h2&gt;尚硅谷&lt;/h2&gt;<br>&lt;h2&gt;北京&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>n:0<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="12-列表渲染"><a href="#12-列表渲染" class="headerlink" title="12. 列表渲染"></a>12. 列表渲染</h1><h2 id="12-1-基本列表"><a href="#12-1-基本列表" class="headerlink" title="12.1 基本列表"></a>12.1 基本列表</h2><p>主要是v-for指令的使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;基本列表&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- 遍历数组 --&gt;<br>&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;!-- key不能重复，是每个对象的唯一标识 --&gt;<br>&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;p.id&quot;&gt;<br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;index&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 遍历对象 --&gt;<br>&lt;h2&gt;汽车信息（遍历对象）&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(value,key) of car&quot; :key=&quot;key&quot;&gt;<br>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 遍历字符串 --&gt;<br>&lt;h2&gt;测试遍历字符串（用得少）&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(char,index) of str&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br><br>&lt;!-- 遍历指定次数 --&gt;<br>&lt;h2&gt;测试遍历指定次数（用得少）&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(number,index) of 5&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;<br>],<br>car:&#123;<br>name:&#x27;奥迪A8&#x27;,<br>price:&#x27;70万&#x27;,<br>color:&#x27;黑色&#x27;<br>&#125;,<br>str:&#x27;hello&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-2-key的原理"><a href="#12-2-key的原理" class="headerlink" title="12.2 key的原理"></a>12.2 key的原理</h2><ol><li><p>虚拟DOM中key的作用：<br>         key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新<br> 的虚拟DOM】,<br>         随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p></li><li><p>对比规则：</p><ol><li><p>旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>                    ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM。<br>                             ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后【替换】掉页面中之前的真实DOM。</p></li><li><p>旧虚拟DOM中未找到与新虚拟DOM相同的key，创建新的真实DOM，随后渲染到到页面。</p></li></ol></li><li><p>用index作为key可能会引发的问题：</p><ol><li><p>若对数据进行：逆序添加、逆序删除 等破坏顺序操作:</p><p>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</p></li><li><p>如果结构中还包含输入类的DOM：</p><p>会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p></li></ol></li><li><p>开发中如何选择key?:</p><div class="code-wrapper"><pre><code class="hljs">         1. 最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。         2. 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表            用于展示，使用index作为key是没有问题的。</code></pre></div></li></ol><p>图解如下：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220319161356.png" alt="遍历列表时key的作用"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220319161428.png" alt="遍历列表时key的作用"></p><blockquote><p>如果不写key的话会自动把index作为key。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;key的原理&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- 遍历数组 --&gt;<br>&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;<br>&lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;<br>&lt;!-- &lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;p.id&quot;&gt; --&gt;<br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<br>&lt;input type=&quot;text&quot;&gt;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;<br>]<br>&#125;,<br>methods: &#123;<br>add()&#123;<br>const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;<br>this.persons.unshift(p)<br>// this.persons.shift(p) 如果此处是shift的话，往后添加不会造成混乱<br>&#125;<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-3-列表过滤"><a href="#12-3-列表过滤" class="headerlink" title="12.3 列表过滤"></a>12.3 列表过滤</h2><p>有两种实现方式，实现姓名过滤：</p><p>使用watch：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>keyWord:&#x27;&#x27;,<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,<br>&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;<br>],<br>filPerons:[]<br>&#125;,<br>watch:&#123;<br>keyWord:&#123;<br>immediate:true,<br>handler(val)&#123;<br>this.filPerons = this.persons.filter((p)=&gt;&#123;<br>return p.name.indexOf(val) !== -1<br>&#125;)<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用computed：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>keyWord:&#x27;&#x27;,<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,<br>&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;<br>]<br>&#125;,<br>computed:&#123;<br>filPerons()&#123;<br>return this.persons.filter((p)=&gt;&#123;<br>return p.name.indexOf(this.keyWord) !== -1<br>&#125;)<br>&#125;<br>&#125;<br>&#125;) <br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;列表过滤&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;人员列表&lt;/h2&gt;<br>&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>//用watch实现<br>//#region <br>/* new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>keyWord:&#x27;&#x27;,<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,<br>&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;<br>],<br>filPerons:[]<br>&#125;,<br>watch:&#123;<br>keyWord:&#123;<br>immediate:true,<br>handler(val)&#123;<br>this.filPerons = this.persons.filter((p)=&gt;&#123;<br>return p.name.indexOf(val) !== -1<br>&#125;)<br>&#125;<br>&#125;<br>&#125;<br>&#125;) */<br>//#endregion<br><br>//用computed实现<br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>keyWord:&#x27;&#x27;,<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,<br>&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;<br>]<br>&#125;,<br>computed:&#123;<br>filPerons()&#123;<br>return this.persons.filter((p)=&gt;&#123;<br>return p.name.indexOf(this.keyWord) !== -1<br>&#125;)<br>&#125;<br>&#125;<br>&#125;) <br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-4-列表过滤"><a href="#12-4-列表过滤" class="headerlink" title="12.4 列表过滤"></a>12.4 列表过滤</h2><p>需求增加：对所有的名字进行排序，如果已经在进行筛选，需要将筛选过后的人进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;列表排序&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;人员列表&lt;/h2&gt;<br>&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;<br>&lt;button @click=&quot;sortType = 2&quot;&gt;年龄升序&lt;/button&gt;<br>&lt;button @click=&quot;sortType = 1&quot;&gt;年龄降序&lt;/button&gt;<br>&lt;button @click=&quot;sortType = 0&quot;&gt;原顺序&lt;/button&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;p.id&quot;&gt;<br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>&lt;input type=&quot;text&quot;&gt;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>keyWord:&#x27;&#x27;,<br>sortType:0, //0原顺序 1降序 2升序<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:30,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:31,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:18,sex:&#x27;男&#x27;&#125;,<br>&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:19,sex:&#x27;男&#x27;&#125;<br>]<br>&#125;,<br>computed:&#123;<br>filPerons()&#123;<br>const arr = this.persons.filter((p)=&gt;&#123;<br>return p.name.indexOf(this.keyWord) !== -1<br>&#125;)<br>//判断一下是否需要排序<br>if(this.sortType)&#123;<br>arr.sort((p1,p2)=&gt;&#123;<br>return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age<br>&#125;)<br>&#125;<br>return arr<br>&#125;<br>&#125;<br>&#125;) <br><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>每次选择升序或者降序的时候就会修改sortType，就会修改data的值，然后就会重新渲染界面、</p></blockquote><h2 id="12-5-更新时的一个问题"><a href="#12-5-更新时的一个问题" class="headerlink" title="12.5 更新时的一个问题"></a>12.5 更新时的一个问题</h2><p>在试图把马冬梅的信息修改成马老师的时候遇到问题：</p><p>可以观察到第一种方式是奏效的，但是第二种通过对象修改的方式是不奏效的，vue并没有检测到数据变化。</p><p>而且在第二种方式下，先点击按钮再打开vue开发者工具，会修改信息；但是调整顺序之后就不会了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;更新时的一个问题&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;人员列表&lt;/h2&gt;<br>&lt;button @click=&quot;updateMei&quot;&gt;更新马冬梅的信息&lt;/button&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;p.id&quot;&gt;<br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>persons:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:30,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:31,sex:&#x27;女&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:18,sex:&#x27;男&#x27;&#125;,<br>&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:19,sex:&#x27;男&#x27;&#125;<br>]<br>&#125;,<br>methods: &#123;<br>updateMei()&#123;<br>// this.persons[0].name = &#x27;马老师&#x27; //奏效<br>// this.persons[0].age = 50 //奏效<br>// this.persons[0].sex = &#x27;男&#x27; //奏效<br><br>// this.persons[0] = &#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125; //不奏效 vue没有检测到数据变化<br>this.persons.splice(0,1,&#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125;)<br>&#125;<br>&#125;<br>&#125;) <br><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-6-Vue监测数据改变的原理"><a href="#12-6-Vue监测数据改变的原理" class="headerlink" title="12.6 Vue监测数据改变的原理"></a>12.6 Vue监测数据改变的原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;Vue监测数据改变的原理&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>student:&#123;<br>name:&#x27;tom&#x27;,<br>age:&#123;<br>rAge:40,<br>sAge:29,<br>&#125;,<br>friends:[<br>&#123;name:&#x27;jerry&#x27;,age:35&#125;<br>]<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-7-模拟一个数据监测"><a href="#12-7-模拟一个数据监测" class="headerlink" title="12.7 模拟一个数据监测"></a>12.7 模拟一个数据监测</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script type=&quot;text/javascript&quot; &gt;<br><br>let data = &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;<br><br>//创建一个监视的实例对象，用于监视data中属性的变化<br>const obs = new Observer(data)<br>console.log(obs)<br><br>//准备一个vm实例对象<br>let vm = &#123;&#125;<br>vm._data = data = obs<br><br>function Observer(obj)&#123;<br>//汇总对象中所有的属性形成一个数组<br>const keys = Object.keys(obj)<br>//遍历<br>keys.forEach((k)=&gt;&#123;<br>Object.defineProperty(this,k,&#123;<br>get()&#123;<br>return obj[k]<br>&#125;,<br>set(val)&#123;<br>console.log(`$&#123;k&#125;被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`)<br>obj[k] = val<br>&#125;<br>&#125;)<br>&#125;)<br>&#125;<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-8-Vue-set的使用"><a href="#12-8-Vue-set的使用" class="headerlink" title="12.8 Vue.set的使用"></a>12.8 Vue.set的使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;Vue监测数据改变的原理&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h1&gt;学校信息&lt;/h1&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;school.name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;school.address&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;校长是：&#123;&#123;school.leader&#125;&#125;&lt;/h2&gt;<br>&lt;hr/&gt;<br>&lt;h1&gt;学生信息&lt;/h1&gt;<br>&lt;button @click=&quot;addSex&quot;&gt;添加一个性别属性，默认值是男&lt;/button&gt;<br>&lt;h2&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h2&gt;<br>&lt;h2 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;朋友们&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>school:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;,<br>student:&#123;<br>name:&#x27;tom&#x27;,<br>age:&#123;<br>rAge:40,<br>sAge:29,<br>&#125;,<br>friends:[<br>&#123;name:&#x27;jerry&#x27;,age:35&#125;,<br>&#123;name:&#x27;tony&#x27;,age:36&#125;<br>]<br>&#125;<br>&#125;,<br>methods: &#123;<br>addSex()&#123;<br>// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)<br>this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-9-vue检测数据改变的原理-数组"><a href="#12-9-vue检测数据改变的原理-数组" class="headerlink" title="12.9 vue检测数据改变的原理-数组"></a>12.9 vue检测数据改变的原理-数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;Vue监测数据改变的原理_数组&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h1&gt;学校信息&lt;/h1&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;school.name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;school.address&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;校长是：&#123;&#123;school.leader&#125;&#125;&lt;/h2&gt;<br>&lt;hr/&gt;<br>&lt;h1&gt;学生信息&lt;/h1&gt;<br>&lt;button @click=&quot;addSex&quot;&gt;添加一个性别属性，默认值是男&lt;/button&gt;<br>&lt;h2&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h2&gt;<br>&lt;h2 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;爱好&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;h&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;h2&gt;朋友们&lt;/h2&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>school:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;,<br>student:&#123;<br>name:&#x27;tom&#x27;,<br>age:&#123;<br>rAge:40,<br>sAge:29,<br>&#125;,<br>hobby:[&#x27;抽烟&#x27;,&#x27;喝酒&#x27;,&#x27;烫头&#x27;],<br>friends:[<br>&#123;name:&#x27;jerry&#x27;,age:35&#125;,<br>&#123;name:&#x27;tony&#x27;,age:36&#125;<br>]<br>&#125;<br>&#125;,<br>methods: &#123;<br>addSex()&#123;<br>// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)<br>this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="12-10-总结vue数据监测"><a href="#12-10-总结vue数据监测" class="headerlink" title="12.10 总结vue数据监测"></a>12.10 总结vue数据监测</h2><p>Vue监视数据的原理：</p><ol><li>vue会监视data中所有层次的数据。</li><li>如何监测对象中的数据？<br>         通过setter实现监视，且要在new Vue时就传入要监测的数据。<br>             (1).对象中后追加的属性，Vue默认不做响应式处理<br>             (2).如需给后添加的属性做响应式，请使用如下API：<br>                             Vue.set(target，propertyName&#x2F;index，value) 或<br>                             vm.$set(target，propertyName&#x2F;index，value)</li><li>如何监测数组中的数据？<br>             通过包裹数组更新元素的方法实现，本质就是做了两件事：<br>                 (1).调用原生对应的方法对数组进行更新。<br>                 (2).重新解析模板，进而更新页面。</li><li>在Vue修改数组中的某个元素一定要用如下方法：<br>         1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()<br> 2.Vue.set() 或 vm.$set()</li></ol><p>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;总结数据监视&lt;/title&gt;<br>&lt;style&gt;<br>button&#123;<br>margin-top: 10px;<br>&#125;<br>&lt;/style&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h1&gt;学生信息&lt;/h1&gt;<br>&lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;student.sex = &#x27;未知&#x27; &quot;&gt;修改性别&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br/&gt;<br>&lt;button @click=&quot;removeSmoke&quot;&gt;过滤掉爱好中的抽烟&lt;/button&gt; &lt;br/&gt;<br>&lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;<br>&lt;h3 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;爱好：&lt;/h3&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;h&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;h3&gt;朋友们：&lt;/h3&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;<br>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>student:&#123;<br>name:&#x27;tom&#x27;,<br>age:18,<br>hobby:[&#x27;抽烟&#x27;,&#x27;喝酒&#x27;,&#x27;烫头&#x27;],<br>friends:[<br>&#123;name:&#x27;jerry&#x27;,age:35&#125;,<br>&#123;name:&#x27;tony&#x27;,age:36&#125;<br>]<br>&#125;<br>&#125;,<br>methods: &#123;<br>addSex()&#123;<br>// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)<br>this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)<br>&#125;,<br>addFriend()&#123;<br>this.student.friends.unshift(&#123;name:&#x27;jack&#x27;,age:70&#125;)<br>&#125;,<br>updateFirstFriendName()&#123;<br>this.student.friends[0].name = &#x27;张三&#x27;<br>&#125;,<br>addHobby()&#123;<br>this.student.hobby.push(&#x27;学习&#x27;)<br>&#125;,<br>updateHobby()&#123;<br>// this.student.hobby.splice(0,1,&#x27;开车&#x27;)<br>// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)<br>this.$set(this.student.hobby,0,&#x27;开车&#x27;)<br>&#125;,<br>removeSmoke()&#123;<br>this.student.hobby = this.student.hobby.filter((h)=&gt;&#123;<br>return h !== &#x27;抽烟&#x27;<br>&#125;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="13-收集表单数据"><a href="#13-收集表单数据" class="headerlink" title="13. 收集表单数据"></a>13. 收集表单数据</h1><p>收集表单数据：</p><p>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值。<br>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值。<br>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><ol><li>没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>配置input的value属性:<br>(1) v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>(2) v-model的初始值是数组，那么收集的的就是value组成的数组</li></ol><p>备注：v-model的三个修饰符：<br>                lazy：失去焦点再收集数据<br>                number：输入字符串转为有效的数字<br>                trim：输入首尾空格过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;收集表单数据&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- 阻止默认事件的提交 --&gt;<br>&lt;form @submit.prevent=&quot;demo&quot;&gt;<br>&lt;!-- 表单收集 --&gt;<br>账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>性别：<br>男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;<br>女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>爱好：<br>学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;<br>打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;<br>吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>所属校区<br>&lt;select v-model=&quot;userInfo.city&quot;&gt;<br>&lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;<br>&lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;<br>&lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;<br>&lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;<br>&lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>其他信息：<br>&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt; &lt;br/&gt;&lt;br/&gt;<br>&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.atguigu.com&quot;&gt;《用户协议》&lt;/a&gt;<br>&lt;button&gt;提交&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>userInfo:&#123;<br>account:&#x27;&#x27;,<br>password:&#x27;&#x27;,<br>age:18,<br>sex:&#x27;female&#x27;,<br>hobby:[],<br>city:&#x27;beijing&#x27;,<br>other:&#x27;&#x27;,<br>agree:&#x27;&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>demo()&#123;<br>console.log(JSON.stringify(this.userInfo))<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="14-过滤器"><a href="#14-过滤器" class="headerlink" title="14. 过滤器"></a>14. 过滤器</h1><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。<br>语法：</p><ol><li>注册过滤器：<code>Vue.filter(name,callback)</code> 或 <code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code>  或  <code>v-bind:属性 = &quot;xxx | 过滤器名&quot;</code></li></ol><p>备注：</p><ol><li>过滤器也可以接收额外参数，多个过滤器也可以串联</li><li>并没有改变原本的数据，是产生新的对应的数据</li></ol><p>基础过滤器实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;过滤器&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/dayjs.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;显示格式化后的时间&lt;/h2&gt;<br>&lt;!-- 计算属性实现 --&gt;<br>&lt;h3&gt;现在是：&#123;&#123;fmtTime&#125;&#125;&lt;/h3&gt;<br>&lt;!-- methods实现 --&gt;<br>&lt;h3&gt;现在是：&#123;&#123;getFmtTime()&#125;&#125;&lt;/h3&gt;<br>&lt;!-- 过滤器实现 --&gt;<br>&lt;h3&gt;现在是：&#123;&#123;time | timeFormater&#125;&#125;&lt;/h3&gt;<br>&lt;!-- 过滤器实现（传参） --&gt;<br>&lt;h3&gt;现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;)&#125;&#125;&lt;/h3&gt;<br>&lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>time:1621561377603, //时间戳<br>msg:&#x27;你好，尚硅谷&#x27;<br>&#125;,<br>computed: &#123;<br>fmtTime()&#123;<br>return dayjs(this.time).format(&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)<br>&#125;<br>&#125;,<br>methods: &#123;<br>getFmtTime()&#123;<br>return dayjs(this.time).format(&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)<br>&#125;<br>&#125;,<br>//局部过滤器<br>filters:&#123;<br>timeFormater(value,str=&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)&#123;<br>// console.log(&#x27;@&#x27;,value)<br>return dayjs(value).format(str)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>全局过滤器实现  及  默认传参的演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;过滤器&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/dayjs.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;!-- 过滤器实现（传参） --&gt;<br>&lt;h3&gt;现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;&lt;/h3&gt;<br>&lt;h3 :x=&quot;msg | mySlice&quot;&gt;尚硅谷&lt;/h3&gt;<br>&lt;/div&gt;<br><br>&lt;div id=&quot;root2&quot;&gt;<br>&lt;h2&gt;&#123;&#123;msg | mySlice&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>// 全局过滤器<br>Vue.filter(&#x27;mySlice&#x27;,function(value)&#123;<br>return value.slice(0,4)<br>&#125;)<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>time:1621561377603, //时间戳<br>msg:&#x27;你好，尚硅谷&#x27;<br>&#125;,<br>//局部过滤器<br>filters:&#123;<br>timeFormater(value,str=&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)&#123;<br>// console.log(&#x27;@&#x27;,value)<br>return dayjs(value).format(str)<br>&#125;<br>&#125;<br>&#125;)<br><br>new Vue(&#123;<br>el:&#x27;#root2&#x27;,<br>data:&#123;<br>msg:&#x27;hello,atguigu!&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="15-内置指令"><a href="#15-内置指令" class="headerlink" title="15. 内置指令"></a>15. 内置指令</h1><h2 id="15-1-v-text指令"><a href="#15-1-v-text指令" class="headerlink" title="15.1 v-text指令"></a>15.1 v-text指令</h2><p>v-bind       : 单向绑定解析表达式, 可简写为 :xxx<br>v-model     : 双向数据绑定<br>v-for         : 遍历数组&#x2F;对象&#x2F;字符串<br>v-on          : 绑定事件监听, 可简写为@<br>v-if            : 条件渲染（动态控制节点是否存存在）<br>v-else        : 条件渲染（动态控制节点是否存存在）<br>v-show      :  条件渲染 (动态控制节点是否展示)</p><p>v-text指令：</p><ol><li>作用：向其所在的节点中渲染文本内容。</li><li>与插值语法的区别：v-text会替换掉节点中的内容，则不会</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;v-text指令&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=&quot;root&quot;&gt;<br>&lt;div&gt;你好，&#123;&#123;name&#125;&#125;&lt;/div&gt;<br>&lt;div&gt;你好，&#123;&#123;str&#125;&#125;&lt;/div&gt;<br>&lt;div v-text=&quot;name&quot;&gt;&lt;/div&gt;<br>&lt;div v-text=&quot;str&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>str:&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>效果图：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220321114402.png" alt="image-20220321114355360"></p></blockquote><h2 id="15-2-v-html指令"><a href="#15-2-v-html指令" class="headerlink" title="15.2 v-html指令"></a>15.2 v-html指令</h2><ol><li>作用：向指定节点中渲染包含html结构的内容。</li><li>与插值语法的区别：<br>  (1). v-html会替换掉节点中所有的内容，则不会。<br>  (2). v-html可以识别html结构。</li><li>严重注意：v-html有安全性问题！！！！<br> (1). 在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。<br> (2). 一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;v-html指令&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;div&gt;你好，&#123;&#123;name&#125;&#125;&lt;/div&gt;<br>&lt;div&gt;你好，&#123;&#123;str&#125;&#125;&lt;/div&gt;<br>&lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;<br>&lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>str:&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;,<br>str2:&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;,<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>效果图：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220321114604.png" alt="image-20220321114604934"></p></blockquote><h2 id="15-3-v-cloak指令"><a href="#15-3-v-cloak指令" class="headerlink" title="15.3 v-cloak指令"></a>15.3 v-cloak指令</h2><p>v-cloak 指令（没有值）：</p><ol><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</li><li>使用css配合v-cloak可以解决网速慢时页面展示出的问题。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;v-cloak指令&lt;/title&gt;<br>&lt;style&gt;<br>/* 通过style样式来控制是否显示文字 */<br>[v-cloak]&#123;<br>display:none;<br>&#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2 v-cloak&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost:8080/resource/5s/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>打开浏览器之后不会显示任何效果，是因为第九行这里设置了display为none，不显示。</p><p>如果设置在五秒之后载入vue资源，则一开始页面上会显示，但是我们不希望用户看到这样的代码，所以通过此指令搭配display来控制用户的视野。</p></blockquote><h2 id="15-4-v-once指令"><a href="#15-4-v-once指令" class="headerlink" title="15.4 v-once指令"></a>15.4 v-once指令</h2><p>v-once 指令：</p><ol><li>v-once所在节点在初次动态渲染后，就视为静态内容了。</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;v-once指令&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2 v-once&gt;初始化的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>n:1<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="15-5-v-pre指令"><a href="#15-5-v-pre指令" class="headerlink" title="15.5 v-pre指令"></a>15.5 v-pre指令</h2><p>v-pre 指令：</p><ol><li>跳过其所在节点的编译过程。</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;v-pre指令&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2 v-pre&gt;Vue其实很简单&lt;/h2&gt;<br>&lt;h2 &gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>n:1<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="16-自定义指令"><a href="#16-自定义指令" class="headerlink" title="16. 自定义指令"></a>16. 自定义指令</h1><p>自定义指令总结：<br>一、定义语法：<br>    (1).局部指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>directives:&#123;指令名:配置对象&#125;<br>&#125;) <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>directives&#123;指令名:回调函数&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>​    (2).全局指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">Vue.directive(指令名,配置对象) 或   Vue.directive(指令名,回调函数)<br></code></pre></td></tr></table></figure><p>二、配置对象中常用的3个回调：<br>    (1).bind：指令与元素成功绑定时调用。<br>    (2).inserted：指令所在元素被插入页面时调用。<br>    (3).update：指令所在模板结构被重新解析时调用。<br>三、备注：<br>    (1).指令定义时不加v-，但使用时要加v-；<br>    (2).指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</p><hr><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><blockquote><p>需求一：函数式</p><p>函数式指令不靠返回值，靠的是接收到的参数</p><p>接收到的参数：第一个是使用此指令的dom元素，第二个是此指令绑定的绑定对象</p><p>big函数何时会被调用？</p><ol><li><p>指令与元素成功绑定时（一上来）。</p></li><li><p>指令所在的模板被重新解析时。</p></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;自定义指令&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;<br>&lt;h2&gt;放大10倍后的n值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;<br>&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;<br>&lt;hr/&gt;<br>&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>n:1<br>&#125;,<br>directives:&#123;<br>big(element,binding)&#123;<br>console.log(&#x27;big&#x27;,this) //注意此处的this是window<br>// console.log(&#x27;big&#x27;)<br>element.innerText = binding.value * 10<br>&#125;,<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><hr><p>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><blockquote><p>由于大部分情况下，bind和update里面的函数内容都是一样的，所以设置了第一种方式，其实可以看做是对象式的简写。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;自定义指令&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>n:1<br>&#125;,<br>directives:&#123;<br>fbind:&#123;<br>//指令与元素成功绑定时（一上来）<br>bind(element,binding)&#123;<br>element.value = binding.value<br>&#125;,<br>//指令所在元素被插入页面时<br>inserted(element,binding)&#123;<br>element.focus()<br>&#125;,<br>//指令所在的模板被重新解析时<br>update(element,binding)&#123;<br>element.value = binding.value<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><hr><p>定义全局指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;自定义指令&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br><br>//定义全局指令<br>Vue.directive(&#x27;fbind&#x27;,&#123;<br>//指令与元素成功绑定时（一上来）<br>bind(element,binding)&#123;<br>element.value = binding.value<br>&#125;,<br>//指令所在元素被插入页面时<br>inserted(element,binding)&#123;<br>element.focus()<br>&#125;,<br>//指令所在的模板被重新解析时<br>update(element,binding)&#123;<br>element.value = binding.value<br>&#125;<br>&#125;)<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>name:&#x27;尚硅谷&#x27;,<br>n:1<br>&#125;<br>&#125;)<br><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="17-生命周期"><a href="#17-生命周期" class="headerlink" title="17. 生命周期"></a>17. 生命周期</h1><h2 id="17-1-引出生命周期"><a href="#17-1-引出生命周期" class="headerlink" title="17.1 引出生命周期"></a>17.1 引出生命周期</h2><p>生命周期：</p><ol><li>又名：生命周期回调函数、生命周期函数、生命周期钩子。</li><li>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</li><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</li><li>生命周期函数中的this指向是vm 或 组件实例对象。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;引出生命周期&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2 v-if=&quot;a&quot;&gt;你好啊&lt;/h2&gt;<br>&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br> new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>a:false,<br>opacity:1<br>&#125;,<br>methods: &#123;<br><br>&#125;,<br>//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted<br>mounted()&#123;<br>console.log(&#x27;mounted&#x27;,this)<br>// 使用箭头函数，没有自己的this，向外找，找到了vm。<br>setInterval(() =&gt; &#123;<br>this.opacity -= 0.01<br>if(this.opacity &lt;= 0) this.opacity = 1<br>&#125;,16)<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>不推荐的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;引出生命周期&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2 v-if=&quot;a&quot;&gt;你好啊&lt;/h2&gt;<br>&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br> const vm = new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>a:false,<br>opacity:1<br>&#125;<br>&#125;)<br><br>//通过外部的定时器实现（不推荐）<br>setInterval(() =&gt; &#123;<br>vm.opacity -= 0.01<br>if(vm.opacity &lt;= 0) vm.opacity = 1<br>&#125;,16)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="17-2-分析生命周期"><a href="#17-2-分析生命周期" class="headerlink" title="17.2 分析生命周期"></a>17.2 分析生命周期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;分析生命周期&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=&quot;root&quot; :x=&quot;n&quot;&gt;<br>&lt;h2 v-text=&quot;n&quot;&gt;&lt;/h2&gt;<br>&lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;<br>&lt;button @click=&quot;bye&quot;&gt;点我销毁vm&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>// template:`<br>// &lt;div&gt;<br>// &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;<br>// &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;<br>// &lt;/div&gt;<br>// `,<br>data:&#123;<br>n:1<br>&#125;,<br>methods: &#123;<br>add()&#123;<br>console.log(&#x27;add&#x27;)<br>this.n++<br>&#125;,<br>bye()&#123;<br>console.log(&#x27;bye&#x27;)<br>this.$destroy()<br>&#125;<br>&#125;,<br>watch:&#123;<br>n()&#123;<br>console.log(&#x27;n变了&#x27;)<br>&#125;<br>&#125;,<br>beforeCreate() &#123;<br>console.log(&#x27;beforeCreate&#x27;)<br>&#125;,<br>created() &#123;<br>console.log(&#x27;created&#x27;)<br>&#125;,<br>beforeMount() &#123;<br>console.log(&#x27;beforeMount&#x27;)<br>&#125;,<br>mounted() &#123;<br>console.log(&#x27;mounted&#x27;)<br>&#125;,<br>beforeUpdate() &#123;<br>console.log(&#x27;beforeUpdate&#x27;)<br>&#125;,<br>updated() &#123;<br>console.log(&#x27;updated&#x27;)<br>&#125;,<br>beforeDestroy() &#123;<br>console.log(&#x27;beforeDestroy&#x27;)<br>&#125;,<br>destroyed() &#123;<br>console.log(&#x27;destroyed&#x27;)<br>&#125;,<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="17-3-总结生命周期"><a href="#17-3-总结生命周期" class="headerlink" title="17.3 总结生命周期"></a>17.3 总结生命周期</h2><p>常用的生命周期钩子：</p><ol><li>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</li><li>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</li></ol><p>关于销毁vue实例：</p><ol><li>销毁后借助Vue开发者工具看不到任何信息。</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效。</li><li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;引出生命周期&lt;/title&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;root&quot;&gt;<br>&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;<br>&lt;button @click=&quot;opacity = 1&quot;&gt;透明度设置为1&lt;/button&gt;<br>&lt;button @click=&quot;stop&quot;&gt;点我停止变换&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。<br><br> new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>opacity:1<br>&#125;,<br>methods: &#123;<br>stop()&#123;<br>this.$destroy()<br>&#125;<br>&#125;,<br>//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted<br>mounted()&#123;<br>console.log(&#x27;mounted&#x27;,this)<br>this.timer = setInterval(() =&gt; &#123;<br>console.log(&#x27;setInterval&#x27;)<br>this.opacity -= 0.01<br>if(this.opacity &lt;= 0) this.opacity = 1<br>&#125;,16)<br>&#125;,<br>beforeDestroy() &#123;<br>clearInterval(this.timer)<br>console.log(&#x27;vm即将驾鹤西游了&#x27;)<br>&#125;,<br>&#125;)<br><br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220321174942.png" alt="生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-5</title>
      <link href="/2022/04/02/vue-5/"/>
      <url>/2022/04/02/vue-5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue --version<br><span class="hljs-comment">## 安装或者升级你的@vue/cli</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 创建</span><br>vue create vue_test<br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="E:\嗷嗷嗷\bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建工程</span><br>npm init vite-app &lt;project-name&gt;<br><span class="hljs-comment">## 进入工程目录</span><br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br><span class="hljs-comment">## 安装依赖</span><br>npm install<br><span class="hljs-comment">## 运行</span><br>npm run dev<br></code></pre></td></tr></table></figure><h2 id="1-3-vue3工程分析"><a href="#1-3-vue3工程分析" class="headerlink" title="1.3 vue3工程分析"></a>1.3 vue3工程分析</h2><ol><li><p>Vue3组件中的模板结构可以没有根标签</p></li><li><p>引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">app</span> = createApp(<span class="hljs-keyword">App</span>)<br></code></pre></td></tr></table></figure></li><li><p>挂载</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">app</span>.mount(&#x27;#<span class="hljs-keyword">app</span>&#x27;)<br></code></pre></td></tr></table></figure></li></ol><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>( Composition API：组合式API )</p><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法，在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名，setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><hr><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一个人的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>性别：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">sex</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>a的值是：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sayHello&quot;</span>&gt;</span>说话(Vue3所配置的——sayHello)<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sayWelcome&quot;</span>&gt;</span>说话(Vue2所配置的——sayWelcome)<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span>测试一下在Vue2的配置中去读取Vue3中的数据、方法<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>测试一下在Vue3的setup配置中去读取Vue2中的数据、方法<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// import &#123;h&#125; from &#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">a</span>:<span class="hljs-number">100</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">sayWelcome</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;欢迎来到尚硅谷学习&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 此处只是测试一下setup，暂时不考虑响应式的问题。</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// async setup()&#123;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">async</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> a = <span class="hljs-number">200</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;name&#125;</span>，我<span class="hljs-subst">$&#123;age&#125;</span>岁了，你好啊！`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sayHello)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sayWelcome</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">name,</span></span><br><span class="language-javascript"><span class="language-xml">age,</span></span><br><span class="language-javascript"><span class="language-xml">sayHello,</span></span><br><span class="language-javascript"><span class="language-xml">test2,</span></span><br><span class="language-javascript"><span class="language-xml">a</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// vue3中不再需要返回一个函数（渲染函数）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// return ()=&gt; h(&#x27;h1&#x27;,&#x27;尚硅谷&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象，控制台输出为RefImpl）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。（参考vm的data和__data）</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><hr><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一个人的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>工作种类：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">job.type</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>工作薪水：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">job.salary</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> age = <span class="hljs-title function_">ref</span>(<span class="hljs-number">18</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> job = <span class="hljs-title function_">ref</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;前端工程师&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">salary</span>:<span class="hljs-string">&#x27;30K&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeInfo</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// name.value = &#x27;李四&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// age.value = 48</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(name,age)</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(job.<span class="hljs-property">value</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/* 输出的结果是：</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">Proxy:&#123;type:&quot;前端工程师&quot;,salary:&quot;30K&quot;&#125;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">*/</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// job.value.type = &#x27;UI设计师&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// job.value.salary = &#x27;60K&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">name,</span></span><br><span class="language-javascript"><span class="language-xml">age,</span></span><br><span class="language-javascript"><span class="language-xml">job,</span></span><br><span class="language-javascript"><span class="language-xml">changeInfo</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（<u>基本类型不要用它，要用<code>ref</code>函数</u>）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><hr><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一个人的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>工作种类：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.job.type</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>工作薪水：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.job.salary</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>爱好：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.hobby</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试的数据c：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.job.a.b.c</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">job</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;前端工程师&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">salary</span>:<span class="hljs-string">&#x27;30K&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">a</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">b</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">c</span>:<span class="hljs-number">666</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">hobby</span>:[<span class="hljs-string">&#x27;抽烟&#x27;</span>,<span class="hljs-string">&#x27;喝酒&#x27;</span>,<span class="hljs-string">&#x27;烫头&#x27;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeInfo</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">person.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;李四&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">person.<span class="hljs-property">age</span> = <span class="hljs-number">48</span></span></span><br><span class="language-javascript"><span class="language-xml">person.<span class="hljs-property">job</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;UI设计师&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">person.<span class="hljs-property">job</span>.<span class="hljs-property">salary</span> = <span class="hljs-string">&#x27;60K&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">person.<span class="hljs-property">job</span>.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>.<span class="hljs-property">c</span> = <span class="hljs-number">999</span></span></span><br><span class="language-javascript"><span class="language-xml">person.<span class="hljs-property">hobby</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;学习&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">person,</span></span><br><span class="language-javascript"><span class="language-xml">changeInfo</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data，<span class="hljs-string">&#x27;count&#x27;</span>，&#123;<br>    get () &#123;&#125;，<br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性，界面不会更新。</li><li>直接通过下标修改数组，界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data，&#123;<br><span class="hljs-comment">// 拦截读取属性值</span><br>    get (target，prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target，prop)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br>    set (target，prop，value) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target，prop，value)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截删除属性</span><br>    deleteProperty (target，prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target，prop)<br>    &#125;<br>&#125;)<br><br>proxy.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;tom&#x27;</span>   <br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//源数据</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> person = &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//模拟Vue2中实现响应式</span></span><br><span class="language-javascript"><span class="hljs-comment">//#region </span></span><br><span class="language-javascript"><span class="hljs-comment">/* let p = &#123;&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">Object.defineProperty(p,&#x27;name&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">configurable:true,</span></span><br><span class="hljs-comment"><span class="language-javascript">get()&#123; //有人读取name时调用</span></span><br><span class="hljs-comment"><span class="language-javascript">return person.name</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">set(value)&#123; //有人修改name时调用</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&#x27;有人修改了name属性，我发现了，我要去更新界面！&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">person.name = value</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript">Object.defineProperty(p,&#x27;age&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">get()&#123; //有人读取age时调用</span></span><br><span class="hljs-comment"><span class="language-javascript">return person.age</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="language-javascript">set(value)&#123; //有人修改age时调用</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&#x27;有人修改了age属性，我发现了，我要去更新界面！&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">person.age = value</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript"><span class="hljs-comment">//#endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//模拟Vue3中实现响应式</span></span><br><span class="language-javascript"><span class="hljs-comment">//#region </span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(person,&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//有人读取p的某个属性时调用</span></span><br><span class="language-javascript"><span class="hljs-title function_">get</span>(<span class="hljs-params">target,propName</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人读取了p身上的<span class="hljs-subst">$&#123;propName&#125;</span>属性`</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target,propName)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//有人修改p的某个属性、或给p追加某个属性时调用</span></span><br><span class="language-javascript"><span class="hljs-title function_">set</span>(<span class="hljs-params">target,propName,value</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人修改了p身上的<span class="hljs-subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span><br><span class="language-javascript"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target,propName,value)</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//有人删除p的某个属性时调用</span></span><br><span class="language-javascript"><span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target,propName</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人删除了p身上的<span class="hljs-subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target,propName)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-comment">//#endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;</span><br><span class="language-javascript"><span class="hljs-comment">//通过Object.defineProperty去操作</span></span><br><span class="language-javascript"><span class="hljs-comment">//#region </span></span><br><span class="language-javascript"><span class="hljs-comment">/* try &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">get()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return 3</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript">Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">get()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return 4</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125; catch (error) &#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(error)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125; */</span></span><br><span class="language-javascript"><span class="hljs-comment">//#endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//通过Reflect.defineProperty去操作</span></span><br><span class="language-javascript"><span class="hljs-comment">//#region </span></span><br><span class="language-javascript"><span class="hljs-comment">/* const x1 = Reflect.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">get()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return 3</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(x1)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">const x2 = Reflect.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">get()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return 4</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) </span></span><br><span class="hljs-comment"><span class="language-javascript">if(x2)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&#x27;某某某操作成功了！&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;else&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&#x27;某某某操作失败了！&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125; */</span></span><br><span class="language-javascript"><span class="hljs-comment">//#endregion</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(&#x27;@@@&#x27;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>，它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持），并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性，相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容，相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数，相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><hr><p>src&#x2F;components&#x2F;Demo.vue</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一个人的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>测试触发一下Demo组件的Hello事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">emits</span>:[<span class="hljs-string">&#x27;hello&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;---setup---&#x27;,props)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;---setup---&#x27;,context)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;---setup---&#x27;,context.attrs) //相当与Vue2中的$attrs</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;---setup---&#x27;,context.emit) //触发自定义事件的。</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---setup---&#x27;</span>,context.<span class="hljs-property">slots</span>) <span class="hljs-comment">//插槽</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">context.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">666</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">person,</span></span><br><span class="language-javascript"><span class="language-xml">test</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>src&#x2F;App.vue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> @<span class="hljs-attr">hello</span>=<span class="hljs-string">&quot;showHelloMsg&quot;</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&quot;你好啊&quot;</span> <span class="hljs-attr">school</span>=<span class="hljs-string">&quot;尚硅谷&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:qwe</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:asd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Demo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Demo&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">Demo</span>&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showHelloMsg</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">`你好啊，你触发了hello事件，我收到的参数是:<span class="hljs-subst">$&#123;value&#125;</span>！`</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">showHelloMsg</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br><span class="hljs-comment">//计算属性——简写</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>    &#125;)<br>    <span class="hljs-comment">//计算属性——完整</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.<span class="hljs-property">firstName</span> = nameArr[<span class="hljs-number">0</span>]<br>            person.<span class="hljs-property">lastName</span> = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>(sum,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>([sum,msg],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">watch</span>(person,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">false</span>&#125;) <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br><span class="hljs-title function_">watch</span>([<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">name</span>],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//特殊情况</span><br><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-watch监视ref数据的说明"><a href="#3-watch监视ref数据的说明" class="headerlink" title="3. watch监视ref数据的说明"></a>3. watch监视ref数据的说明</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前求和为：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">sum</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的信息为：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;msg+=&#x27;！&#x27;&quot;</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>薪资：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person.job.j1.salary</span>&#125;&#125;</span><span class="language-xml">K<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;person.name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;person.age++&quot;</span>&gt;</span>增长年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;person.job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref,reactive,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;你好啊&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">ref</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">job</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">j1</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">salary</span>:<span class="hljs-number">20</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// ref监视的基本属性不能value</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">watch</span>(sum,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum的值变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// ref监视的对象类型，需要开启深度监视，否则检测不到</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">watch</span>(person,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的值变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,&#123;<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">sum,</span></span><br><span class="language-javascript"><span class="language-xml">msg,</span></span><br><span class="language-javascript"><span class="language-xml">person</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="4-watchEffect函数"><a href="#4-watchEffect函数" class="headerlink" title="4.watchEffect函数"></a>4.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> x1 = sum.<span class="hljs-property">value</span><br>    <span class="hljs-keyword">const</span> x2 = person.<span class="hljs-property">age</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><p>Vue2的生命周期函数示意图如下：</p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2"><p>Vue3的生命周期函数示意图如下：</p><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" ><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>created</code>===&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li><li><code>mounted\</code>&#x3D;=&#x3D;&#x3D;&#x3D;=&#x3D;&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> ===&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =&#x3D;=&#x3D;&#x3D;&gt;<code>onUnmounted</code></li></ul></li></ul><hr><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前求和为：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">sum</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref,onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---setup---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//通过组合式API的形式去使用生命周期钩子</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onBeforeMount</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---onBeforeMount---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---onMounted---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onBeforeUpdate</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---onBeforeUpdate---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onUpdated</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---onUpdated---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---onBeforeUnmount---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---onUnmounted---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;sum&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//通过配置项的形式使用生命周期钩子</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//#region </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---beforeCreate---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---created---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">beforeMount</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---beforeMount---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---mounted---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">beforeUpdate</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---beforeUpdate---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">updated</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---updated---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">beforeUnmount</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---beforeUnmount---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">unmounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---unmounted---&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//#endregion</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</li><li>类似于vue2.x中的mixin。</li><li>自定义hook的优势: 复用代码，让setup中的逻辑更清楚易懂。</li></ul><hr><p>案例实现：鼠标点击效果，显示鼠标点击的坐标</p><p>src&#x2F;hooks&#x2F;userPoint.js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">import &#123;reactive,onMounted,onBeforeUnmount&#125; from <span class="hljs-string">&#x27;vue&#x27;</span><br>export default <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//实现鼠标“打点”相关的数据</span><br>let <span class="hljs-built_in">point</span> = reactive(&#123;<br><span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">y</span>:<span class="hljs-number">0</span><br>&#125;)<br><br><span class="hljs-comment">//实现鼠标“打点”相关的方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">savePoint</span>(<span class="hljs-params">event</span>)&#123;<br><span class="hljs-built_in">point</span>.x = event.pageX<br><span class="hljs-built_in">point</span>.y = event.pageY<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(event.pageX,event.pageY)<br>&#125;<br><br><span class="hljs-comment">//实现鼠标“打点”相关的生命周期钩子</span><br>onMounted(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>window.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,savePoint)<br>&#125;)<br><br>onBeforeUnmount(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>window.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,savePoint)<br>&#125;)<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">point</span><br>&#125;<br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;Demo.vue</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前求和为：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">sum</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sum++&quot;</span>&gt;</span>点我+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前点击时鼠标的坐标为：x：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">point.x</span>&#125;&#125;</span><span class="language-xml">，y：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">point.y</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> usePoint <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../hooks/usePoint&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> point = <span class="hljs-title function_">usePoint</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;sum,point&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>src&#x2F;App.vue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShowDemo = !isShowDemo&quot;</span>&gt;</span>切换隐藏/显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShowDemo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Demo&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Test&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">Demo</span>,<span class="hljs-title class_">Test</span>&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> isShowDemo = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;isShowDemo&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><hr><p>src&#x2F;components&#x2F;Demo.vue</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">person</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>薪资：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">job.j1.salary</span>&#125;&#125;</span><span class="language-xml">K<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;age++&quot;</span>&gt;</span>增长年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">job</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">j1</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">salary</span>:<span class="hljs-number">20</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// const name2 = toRef(person,&#x27;name&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;####&#x27;,name2)</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// toRefs 批量修改属性，将reactive对象转化为ref对象</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">toRefs</span>(person)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;******&#x27;</span>,x)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">person,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// name:toRef(person,&#x27;name&#x27;),</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// age:toRef(person,&#x27;age&#x27;),</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// salary:toRef(person.job.j1,&#x27;salary&#x27;),</span></span></span><br><span class="language-javascript"><span class="language-xml">...<span class="hljs-title function_">toRefs</span>(person)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>src&#x2F;App.vue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShowDemo = !isShowDemo&quot;</span>&gt;</span>切换隐藏/显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShowDemo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Demo&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">Demo</span>&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> isShowDemo = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;isShowDemo&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li>shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理。</li><li>什么时候使用?<ul><li>如果有一个对象数据，结构比较深，但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;ref,reactive,toRef,toRefs,shallowReactive,shallowRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 只考虑第一层数据的响应式</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">shallowReactive</span>(&#123; </span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript"><span class="hljs-attr">job</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">j1</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">salary</span>:<span class="hljs-number">20</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">shallowRef</span>(<span class="hljs-number">0</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// console.log(&#x27;******&#x27;,x)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">...<span class="hljs-title function_">toRefs</span>(person)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><hr><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="language-xquery">&#123;ref,reactive,toRefs,readonly,shallowReadonly&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"><span class="hljs-built_in">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span><br><span class="language-xquery">setup()&#123;</span><br><span class="language-xquery">//数据</span><br><span class="language-xquery"><span class="hljs-keyword">let</span><span class="hljs-built_in"> sum</span> = ref(<span class="hljs-number">0</span>)</span><br><span class="language-xquery"><span class="hljs-keyword">let</span> person = reactive(&#123;</span><br><span class="language-xquery"><span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-xquery">age:<span class="hljs-number">18</span>,</span><br><span class="language-xquery">job:&#123;</span><br><span class="language-xquery">j1:&#123;</span><br><span class="language-xquery">salary:<span class="hljs-number">20</span></span><br><span class="language-xquery">&#125;</span><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">person = <span class="hljs-title function_">readonly</span>(person)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// person = shallowReadonly(person)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// sum = readonly(sum)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// sum = shallowReadonly(sum)</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//返回一个对象（常用）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"><span class="hljs-built_in">sum</span>,</span><br><span class="language-xquery">...toRefs(person)</span><br><span class="language-xquery">&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;ref,reactive,toRefs,toRaw,markRaw&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//数据</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span><br><span class="language-javascript"><span class="hljs-attr">job</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">j1</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">salary</span>:<span class="hljs-number">20</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showRawPerson</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-title function_">toRaw</span>(person)</span><br><span class="language-javascript">p.<span class="hljs-property">age</span>++</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addCar</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> car = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">40</span>&#125;</span><br><span class="language-javascript">person.<span class="hljs-property">car</span> = <span class="hljs-title function_">markRaw</span>(car)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">changePrice</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">person.<span class="hljs-property">car</span>.<span class="hljs-property">price</span>++</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">car</span>.<span class="hljs-property">price</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//返回一个对象（常用）</span></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">sum,</span><br><span class="language-javascript">person,</span><br><span class="language-javascript">...<span class="hljs-title function_">toRefs</span>(person),</span><br><span class="language-javascript">showRawPerson,</span><br><span class="language-javascript">addCar,</span><br><span class="language-javascript">changePrice</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;<br>&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;ref,customRef&#125; from &#x27;vue&#x27;<br>export default &#123;<br>name:&#x27;Demo&#x27;,<br>setup()&#123;<br>// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref<br>//自定义一个myRef<br>function myRef(value,delay)&#123;<br>let timer<br>//通过customRef去实现自定义<br>return customRef((track,trigger)=&gt;&#123;<br>return&#123;<br>get()&#123;<br>track() //告诉Vue这个value值是需要被“追踪”的<br>return value<br>&#125;,<br>set(newValue)&#123;<br>clearTimeout(timer)<br>timer = setTimeout(()=&gt;&#123;<br>value = newValue<br>trigger() //告诉Vue去更新界面<br>&#125;,delay)<br>&#125;<br>&#125;<br>&#125;)<br>&#125;<br>let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref<br>return &#123;<br>keyword<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">keyWord</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref,customRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//自定义一个ref——名为：myRef</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myRef</span>(<span class="hljs-params">value,delay</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> timer</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> <span class="hljs-title function_">customRef</span>(<span class="hljs-function">(<span class="hljs-params">track,trigger</span>)=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人从myRef这个容器中读取数据了，我把<span class="hljs-subst">$&#123;value&#125;</span>给他了`</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">track</span>() <span class="hljs-comment">//通知Vue追踪value的变化（提前和get商量一下，让他认为这个value是有用的）</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> value</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人把myRef这个容器中数据改为了：<span class="hljs-subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-built_in">clearTimeout</span>(timer)</span></span><br><span class="language-javascript"><span class="language-xml">timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">value = newValue</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">trigger</span>() <span class="hljs-comment">//通知Vue去重新解析模板</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;,delay)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// let keyWord = ref(&#x27;hello&#x27;) //使用Vue提供的ref</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> keyWord = <span class="hljs-title function_">myRef</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">500</span>) <span class="hljs-comment">//使用程序员自定义的ref</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;keyWord&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="E:\嗷嗷嗷\components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car)<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><hr><p>src&#x2F;App.vue（爷爷）</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是App组件（祖），</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml">--</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">price</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; reactive,toRefs,provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Child.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">Child</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40W&#x27;</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car) <span class="hljs-comment">//给自己的后代组件传递数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;...<span class="hljs-title function_">toRefs</span>(car)&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;Child.vue（爹）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是Child组件（子）<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Son</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123;inject&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Son.vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Child&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">Son</span>&#125;,</span><br><span class="language-javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,<span class="hljs-string">&#x27;Child-----&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src&#x2F;components&#x2F;Son.vue（孙）</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是Son组件（孙），</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">car.name</span>&#125;&#125;</span><span class="language-xml">--</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">car.price</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;inject&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Son&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;car&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /><img src="E:\嗷嗷嗷\e5ac7e20d1784887a826f6360768a368tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> <h2 id="2-Compsition-API-的优势"><a href="#2-Compsition-API-的优势" class="headerlink" title="2.Compsition API 的优势"></a>2.Compsition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"/><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"/><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签，内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级，减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;teleport to=&quot;移动位置&quot;&gt;<br>&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;<br>&lt;div class=&quot;dialog&quot;&gt;<br>&lt;h3&gt;我是一个弹窗&lt;/h3&gt;<br>&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;defineAsyncComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h3&gt;我是App组件&lt;/h3&gt;<br>&lt;Suspense&gt;<br>&lt;template v-slot:default&gt;<br>&lt;Child/&gt;<br>&lt;/template&gt;<br>&lt;template v-slot:fallback&gt;<br>&lt;h3&gt;加载中.....&lt;/h3&gt;<br>&lt;/template&gt;<br>&lt;/Suspense&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>，&#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>，&#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;my-component<br>  v-on:close=&quot;handleComponentEvent&quot;<br>  v-on:click=&quot;handleNativeClickEvent&quot;<br>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  export default &#123;<br>    emits: [&#x27;close&#x27;]<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li></ul><hr><p>​                                                  完结撒花*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-4</title>
      <link href="/2022/04/02/vue-4/"/>
      <url>/2022/04/02/vue-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue脚手架配置代理服务器"><a href="#1-vue脚手架配置代理服务器" class="headerlink" title="1. vue脚手架配置代理服务器"></a>1. vue脚手架配置代理服务器</h1><p><strong>应用场景</strong>：</p><p>适用于解决ajax跨域问题</p><p><strong>情景引入</strong>：</p><p>现有一个5000端口的students，和一个5001端口的cars</p><p><strong>代码背景</strong>：</p><p>首先<code>npm i axios</code> 安装axios，当代码如下时，会出现错误：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/vue%E8%B7%A8%E5%9F%9F.png" alt="vue跨域"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/%E8%B7%A8%E5%9F%9F%E9%94%99%E8%AF%AF.png" alt="跨域错误"></p><hr><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>​    在vue.config.js中（src同级）添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>:&#123;<br>  <span class="hljs-attr">proxy</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>必须停止现在的服务器，重新启动 <code>npm run serve</code></p><p>然后更改axios请求  <code>axios.get(&#39;http://localhost:8080/students&#39;)</code></p><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li><li>如果请求的资源在8080本身就有，就不会把资源转给5000，而是会走缓存</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>      &#125;,<br>      <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><hr><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;button @click=&quot;getStudents&quot;&gt;获取学生信息&lt;/button&gt;<br>&lt;button @click=&quot;getCars&quot;&gt;获取汽车信息&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;<br>export default &#123;<br>name:&#x27;App&#x27;,<br>methods: &#123;<br>getStudents()&#123;<br>axios.get(&#x27;http://localhost:8080/students&#x27;).then(<br>response =&gt; &#123;<br>console.log(&#x27;请求成功了&#x27;,response.data)<br>&#125;,<br>error =&gt; &#123;<br>console.log(&#x27;请求失败了&#x27;,error.message)<br>&#125;<br>)<br>&#125;,<br>getCars()&#123;<br>axios.get(&#x27;http://localhost:8080/demo/cars&#x27;).then(<br>response =&gt; &#123;<br>console.log(&#x27;请求成功了&#x27;,response.data)<br>&#125;,<br>error =&gt; &#123;<br>console.log(&#x27;请求失败了&#x27;,error.message)<br>&#125;<br>)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="2-插槽"><a href="#2-插槽" class="headerlink" title="2. 插槽"></a>2. 插槽</h1><ol><li>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</li><li>分类：默认插槽、具名插槽、作用域插槽</li></ol><h2 id="2-1-默认插槽"><a href="#2-1-默认插槽" class="headerlink" title="2.1 默认插槽"></a>2.1 默认插槽</h2><p><code>components/Cateory.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;category&quot;&gt;<br>&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;<br>&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;<br>&lt;slot&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Category&#x27;,<br>props:[&#x27;title&#x27;]<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.category&#123;<br>background-color: skyblue;<br>width: 200px;<br>height: 300px;<br>&#125;<br>h3&#123;<br>text-align: center;<br>background-color: orange;<br>&#125;<br>video&#123;<br>width: 100%;<br>&#125;<br>img&#123;<br>width: 100%;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;container&quot;&gt;<br>&lt;Category title=&quot;美食&quot; &gt;<br>&lt;span&gt;我是一个美食图片&lt;/span&gt;<br>&lt;/Category&gt;<br><br>&lt;Category title=&quot;游戏&quot; &gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/Category&gt;<br><br>&lt;Category title=&quot;电影&quot;&gt;<br>&lt;span&gt;我是一个电影资源&lt;/span&gt;<br>&lt;/Category&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Category from &#x27;./components/Category&#x27;<br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;Category&#125;,<br>data() &#123;<br>return &#123;<br>foods:[&#x27;火锅&#x27;,&#x27;烧烤&#x27;,&#x27;小龙虾&#x27;,&#x27;牛排&#x27;],<br>games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;],<br>films:[&#x27;《教父》&#x27;,&#x27;《拆弹专家》&#x27;,&#x27;《你好，李焕英》&#x27;,&#x27;《尚硅谷》&#x27;]<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.container&#123;<br>display: flex;<br>justify-content: space-around;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="2-2-具名插槽"><a href="#2-2-具名插槽" class="headerlink" title="2.2 具名插槽"></a>2.2 具名插槽</h2><p><code>components/Category.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;category&quot;&gt;<br>&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;<br>&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;<br>&lt;slot name=&quot;center&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现1&lt;/slot&gt;<br>&lt;slot name=&quot;footer&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现2&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;container&quot;&gt;<br>&lt;Category title=&quot;美食&quot; &gt;<br>&lt;img slot=&quot;center&quot; src=&quot;&quot; alt=&quot;&quot;&gt;<br>&lt;a slot=&quot;footer&quot; href=&quot;&quot;&gt;更多美食&lt;/a&gt;<br>&lt;/Category&gt;<br><br>&lt;Category title=&quot;游戏&quot; &gt;<br>&lt;ul slot=&quot;center&quot;&gt;<br>&lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;div class=&quot;foot&quot; slot=&quot;footer&quot;&gt;<br>&lt;a href=&quot;&quot;&gt;单机游戏&lt;/a&gt;<br>&lt;a href=&quot;&quot;&gt;网络游戏&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;/Category&gt;<br><br>&lt;Category title=&quot;电影&quot;&gt;<br>&lt;video slot=&quot;center&quot; controls src=&quot;&quot;&gt;&lt;/video&gt;<br>&lt;template v-slot:footer&gt;<br>&lt;div class=&quot;foot&quot;&gt;<br>&lt;a href=&quot;&quot;&gt;经典&lt;/a&gt;<br>&lt;a href=&quot;&quot;&gt;热门&lt;/a&gt;<br>&lt;a href=&quot;&quot;&gt;推荐&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;h4&gt;欢迎前来观影&lt;/h4&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="2-3-作用域插槽"><a href="#2-3-作用域插槽" class="headerlink" title="2.3 作用域插槽"></a>2.3 作用域插槽</h2><p><strong>应用背景</strong>：</p><p>当数据不在App里面，而是在Category里面。</p><p>数据是不变的，但是根据数据生成的结构是变化的。</p><ol><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category&gt;<br>           &lt;div&gt;html结构1&lt;/div&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>               &lt;!-- 定义插槽 --&gt;<br>               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category&gt;<br>            &lt;template slot=&quot;center&quot;&gt;<br>              &lt;div&gt;html结构1&lt;/div&gt;<br>            &lt;/template&gt;<br><br>            &lt;template v-slot:footer&gt;<br>               &lt;div&gt;html结构2&lt;/div&gt;<br>            &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>               &lt;!-- 定义插槽 --&gt;<br>               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>&lt;template scope=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是ul列表 --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br><br>&lt;Category&gt;<br>&lt;template slot-scope=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是h4标题 --&gt;<br>&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br><br>        &lt;script&gt;<br>            export default &#123;<br>                name:&#x27;Category&#x27;,<br>                props:[&#x27;title&#x27;],<br>                //数据在子组件自身<br>                data() &#123;<br>                    return &#123;<br>                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]<br>                    &#125;<br>                &#125;,<br>            &#125;<br>        &lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><hr><p><code>components/Category.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;category&quot;&gt;<br>&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;<br>&lt;slot :games=&quot;games&quot; msg=&quot;hello&quot;&gt;我是默认的一些内容&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Category&#x27;,<br>props:[&#x27;title&#x27;],<br>data() &#123;<br>return &#123;<br>games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;],<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;container&quot;&gt;<br>&lt;Category title=&quot;美食&quot; &gt;<br>&lt;img slot=&quot;center&quot; src=&quot;&quot; alt=&quot;&quot;&gt;<br>&lt;a slot=&quot;footer&quot; href=&quot;&quot;&gt;更多美食&lt;/a&gt;<br>&lt;/Category&gt;<br><br>&lt;Category title=&quot;游戏&quot; &gt;<br>&lt;ul slot=&quot;center&quot;&gt;<br>&lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;div class=&quot;foot&quot; slot=&quot;footer&quot;&gt;<br>&lt;a href=&quot;&quot;&gt;单机游戏&lt;/a&gt;<br>&lt;a href=&quot;&quot;&gt;网络游戏&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;/Category&gt;<br><br>&lt;Category title=&quot;电影&quot;&gt;<br>&lt;video slot=&quot;center&quot; controls src=&quot;&quot;&gt;&lt;/video&gt;<br>&lt;template v-slot:footer&gt;<br>&lt;div class=&quot;foot&quot;&gt;<br>&lt;a href=&quot;&quot;&gt;经典&lt;/a&gt;<br>&lt;a href=&quot;&quot;&gt;热门&lt;/a&gt;<br>&lt;a href=&quot;&quot;&gt;推荐&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;h4&gt;欢迎前来观影&lt;/h4&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h1 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3. Vuex"></a>3. Vuex</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/vuex%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="vuex原理图"></p><h2 id="3-2-何时使用？"><a href="#3-2-何时使用？" class="headerlink" title="3.2 何时使用？"></a>3.2 何时使用？</h2><p>​        多个组件需要共享数据时（依赖同一状态）</p><p>​        来自不同组件的行为需要变更同一状态</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/vuex.png" alt="vuex"></p><h2 id="3-3-搭建vuex环境"><a href="#3-3-搭建vuex环境" class="headerlink" title="3.3 搭建vuex环境"></a>3.3 搭建vuex环境</h2><ol><li><p><code>npm i vuex</code> 安装vuex</p></li><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">//准备actions对象——响应组件中用户的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><span class="hljs-comment">//准备mutations对象——修改state中的数据</span><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><span class="hljs-comment">//准备state对象——保存具体的数据</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-comment">//引入store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br>......<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>store<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-4-基本使用"><a href="#3-4-基本使用" class="headerlink" title="3.4 基本使用"></a>3.4 基本使用</h2><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p></li><li><p><code>components/count.vue</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//该文件用于创建Vuex中最为核心的store</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">//准备actions——用于响应组件中的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;<br><span class="hljs-comment">/* jia(context,value)&#123;</span><br><span class="hljs-comment">console.log(&#x27;actions中的jia被调用了&#x27;)</span><br><span class="hljs-comment">context.commit(&#x27;JIA&#x27;,value)</span><br><span class="hljs-comment">&#125;,</span><br><span class="hljs-comment">jian(context,value)&#123;</span><br><span class="hljs-comment">console.log(&#x27;actions中的jian被调用了&#x27;)</span><br><span class="hljs-comment">context.commit(&#x27;JIAN&#x27;,value)</span><br><span class="hljs-comment">&#125;, */</span><br><span class="hljs-title function_">jiaOdd</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;actions中的jiaOdd被调用了&#x27;</span>)<br><span class="hljs-keyword">if</span>(context.<span class="hljs-property">state</span>.<span class="hljs-property">sum</span> % <span class="hljs-number">2</span>)&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;<br>&#125;,<br><span class="hljs-title function_">jiaWait</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;actions中的jiaWait被调用了&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;,<span class="hljs-number">500</span>)<br>&#125;<br>&#125;<br><span class="hljs-comment">//准备mutations——用于操作数据（state）</span><br><span class="hljs-keyword">const</span> mutations = &#123;<br><span class="hljs-title function_">JIA</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的JIA被调用了&#x27;</span>)<br>state.<span class="hljs-property">sum</span> += value<br>&#125;,<br><span class="hljs-title function_">JIAN</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的JIAN被调用了&#x27;</span>)<br>state.<span class="hljs-property">sum</span> -= value<br>&#125;<br>&#125;<br><span class="hljs-comment">//准备state——用于存储数据</span><br><span class="hljs-keyword">const</span> state = &#123;<br><span class="hljs-attr">sum</span>:<span class="hljs-number">0</span> <span class="hljs-comment">//当前的和</span><br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>actions,<br>mutations,<br>state,<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><code>components/count.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123;$store.state.sum&#125;&#125;&lt;/h1&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>methods: &#123;<br>// 如果action里面的代码其实是很简单的代码，可以直接使用commit沟通mutations，跳过actions<br>increment()&#123;<br>this.$store.commit(&#x27;JIA&#x27;,this.n)<br>&#125;,<br>decrement()&#123;<br>this.$store.commit(&#x27;JIAN&#x27;,this.n)<br>&#125;,<br>incrementOdd()&#123;<br>this.$store.dispatch(&#x27;jiaOdd&#x27;,this.n)<br>&#125;,<br>incrementWait()&#123;<br>this.$store.dispatch(&#x27;jiaWait&#x27;,this.n)<br>&#125;,<br>&#125;,<br>mounted() &#123;<br>console.log(&#x27;Count&#x27;,this)<br>console.log(&#x27;Count&#x27;,this.$store)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>button&#123;<br>margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ol><hr><ol><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h2 id="3-5-getters的使用"><a href="#3-5-getters的使用" class="headerlink" title="3.5 getters的使用"></a>3.5 getters的使用</h2><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">......<br><span class="hljs-keyword">const</span> getters = &#123;<br><span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br><span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>......<br>getters<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>Count 组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h2 id="3-6-四个map方法的使用"><a href="#3-6-四个map方法的使用" class="headerlink" title="3.6 四个map方法的使用"></a>3.6 四个map方法的使用</h2><h3 id="3-6-1-基本使用"><a href="#3-6-1-基本使用" class="headerlink" title="3.6.1 基本使用"></a>3.6.1 基本使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span><br>     ...<span class="hljs-title function_">mapState</span>(&#123;<span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-attr">subject</span>:<span class="hljs-string">&#x27;subject&#x27;</span>&#125;),<br>         <br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span><br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<span class="hljs-attr">bigSum</span>:<span class="hljs-string">&#x27;bigSum&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>(&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br><br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span><br>    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：increment、decrement（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>(&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br>    <br>    <span class="hljs-comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span><br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><hr><h3 id="3-6-2-完整代码"><a href="#3-6-2-完整代码" class="headerlink" title="3.6.2 完整代码"></a>3.6.2 完整代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;!-- 通过computed将此处的模板语法做简化 --&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;<br>&lt;h3&gt;当前求和放大10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;我在&#123;&#123;school&#125;&#125;，学习&#123;&#123;subject&#125;&#125;&lt;/h3&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;mapState,mapGetters&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>computed:&#123;<br>//靠程序员自己亲自去写计算属性<br>/* sum()&#123;<br>return this.$store.state.sum<br>&#125;,<br>school()&#123;<br>return this.$store.state.school<br>&#125;,<br>subject()&#123;<br>return this.$store.state.subject<br>&#125;, */<br><br>//借助mapState生成计算属性，从state中读取数据。（对象写法）<br>...mapState(&#123;he:&#x27;sum&#x27;,xuexiao:&#x27;school&#x27;,xueke:&#x27;subject&#x27;&#125;),<br><br>//借助mapState生成计算属性，从state中读取数据。（数组写法）<br>...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),<br><br>/* ******************************************************************** */<br><br>/* bigSum()&#123;<br>return this.$store.getters.bigSum<br>&#125;, */<br><br>//借助mapGetters生成计算属性，从getters中读取数据。（对象写法）<br>...mapGetters(&#123;bigSum:&#x27;bigSum&#x27;&#125;)<br><br>//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）<br>...mapGetters([&#x27;bigSum&#x27;])<br><br>&#125;,<br>methods: &#123;<br>increment()&#123;<br>this.$store.commit(&#x27;JIA&#x27;,this.n)<br>&#125;,<br>decrement()&#123;<br>this.$store.commit(&#x27;JIAN&#x27;,this.n)<br>&#125;,<br>incrementOdd()&#123;<br>this.$store.dispatch(&#x27;jiaOdd&#x27;,this.n)<br>&#125;,<br>incrementWait()&#123;<br>this.$store.dispatch(&#x27;jiaWait&#x27;,this.n)<br>&#125;,<br>&#125;,<br>mounted() &#123;<br>const x = mapState(&#123;he:&#x27;sum&#x27;,xuexiao:&#x27;school&#x27;,xueke:&#x27;subject&#x27;&#125;)<br>console.log(x)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br>// 保留方式均为数组写法<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;<br>&lt;h3&gt;当前求和放大10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;我在&#123;&#123;school&#125;&#125;，学习&#123;&#123;subject&#125;&#125;&lt;/h3&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>computed:&#123;<br>...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),<br><br>...mapGetters([&#x27;bigSum&#x27;])<br>&#125;,<br>methods: &#123;<br>//程序员亲自写方法<br>/* increment()&#123;<br>this.$store.commit(&#x27;JIA&#x27;,this.n)<br>&#125;,<br>decrement()&#123;<br>this.$store.commit(&#x27;JIAN&#x27;,this.n)<br>&#125;, */<br><br>//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)<br>...mapMutations(&#123;increment:&#x27;JIA&#x27;,decrement:&#x27;JIAN&#x27;&#125;),<br><br>//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(数组写法)<br>...mapMutations([&#x27;JIA&#x27;,&#x27;JIAN&#x27;]),<br><br>/* ************************************************* */<br><br>//程序员亲自写方法<br>/* incrementOdd()&#123;<br>this.$store.dispatch(&#x27;jiaOdd&#x27;,this.n)<br>&#125;,<br>incrementWait()&#123;<br>this.$store.dispatch(&#x27;jiaWait&#x27;,this.n)<br>&#125;, */<br><br>//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)<br>...mapActions(&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;)<br><br>//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(数组写法)<br>...mapActions([&#x27;jiaOdd&#x27;,&#x27;jiaWait&#x27;])<br>&#125;,<br>mounted() &#123;<br>const x = mapState(&#123;he:&#x27;sum&#x27;,xuexiao:&#x27;school&#x27;,xueke:&#x27;subject&#x27;&#125;)<br>console.log(x)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>button&#123;<br>margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br>// 保留方式均为对象写法<br></code></pre></td></tr></table></figure><h2 id="3-7-多组件共享数据"><a href="#3-7-多组件共享数据" class="headerlink" title="3.7 多组件共享数据"></a>3.7 多组件共享数据</h2><p>有两个组件 Count和Person，需要在Person组件里面显示count求和的值，在Count组件里面显示Person的人数。</p><hr><p><code>components/Count.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;<br>&lt;h3&gt;当前求和放大10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;<br>&lt;h3 style=&quot;color:red&quot;&gt;Person组件的总人数是：&#123;&#123;personList.length&#125;&#125;&lt;/h3&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>computed:&#123;<br>//借助mapState生成计算属性，从state中读取数据。（数组写法）<br>...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;,&#x27;personList&#x27;]),<br>//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）<br>...mapGetters([&#x27;bigSum&#x27;])<br>&#125;,<br>methods: &#123;<br>//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)<br>...mapMutations(&#123;increment:&#x27;JIA&#x27;,decrement:&#x27;JIAN&#x27;&#125;),<br>//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)<br>...mapActions(&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>components/Person.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;人员列表&lt;/h1&gt;<br>&lt;h3 style=&quot;color:red&quot;&gt;Count组件求和为：&#123;&#123;sum&#125;&#125;&lt;/h3&gt;<br>&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot;&gt;<br>&lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;p in personList&quot; :key=&quot;p.id&quot;&gt;&#123;&#123;p.name&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;nanoid&#125; from &#x27;nanoid&#x27;<br>export default &#123;<br>name:&#x27;Person&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;&#x27;<br>&#125;<br>&#125;,<br>computed:&#123;<br>personList()&#123;<br>return this.$store.state.personList<br>&#125;,<br>sum()&#123;<br>return this.$store.state.sum<br>&#125;<br>&#125;,<br>methods: &#123;<br>add()&#123;<br>const personObj = &#123;id:nanoid(),name:this.name&#125;<br>this.$store.commit(&#x27;ADD_PERSON&#x27;,personObj)<br>this.name = &#x27;&#x27;<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>store/index.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs vue">//该文件用于创建Vuex中最为核心的store<br>import Vue from &#x27;vue&#x27;<br>//引入Vuex<br>import Vuex from &#x27;vuex&#x27;<br>//应用Vuex插件<br>Vue.use(Vuex)<br><br>//准备actions——用于响应组件中的动作<br>const actions = &#123;<br>jiaOdd(context,value)&#123;<br>console.log(&#x27;actions中的jiaOdd被调用了&#x27;)<br>if(context.state.sum % 2)&#123;<br>context.commit(&#x27;JIA&#x27;,value)<br>&#125;<br>&#125;,<br>jiaWait(context,value)&#123;<br>console.log(&#x27;actions中的jiaWait被调用了&#x27;)<br>setTimeout(()=&gt;&#123;<br>context.commit(&#x27;JIA&#x27;,value)<br>&#125;,500)<br>&#125;<br>&#125;<br>//准备mutations——用于操作数据（state）<br>const mutations = &#123;<br>JIA(state,value)&#123;<br>console.log(&#x27;mutations中的JIA被调用了&#x27;)<br>state.sum += value<br>&#125;,<br>JIAN(state,value)&#123;<br>console.log(&#x27;mutations中的JIAN被调用了&#x27;)<br>state.sum -= value<br>&#125;,<br>ADD_PERSON(state,value)&#123;<br>console.log(&#x27;mutations中的ADD_PERSON被调用了&#x27;)<br>state.personList.unshift(value)<br>&#125;<br>&#125;<br>//准备state——用于存储数据<br>const state = &#123;<br>sum:0, //当前的和<br>personList:[<br>&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;&#125;<br>]<br>&#125;<br>//准备getters——用于将state中的数据进行加工<br>const getters = &#123;<br>bigSum(state)&#123;<br>return state.sum*10<br>&#125;<br>&#125;<br><br>//创建并暴露store<br>export default new Vuex.Store(&#123;<br>actions,<br>mutations,<br>state,<br>getters<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-8-模块化-命名空间"><a href="#3-8-模块化-命名空间" class="headerlink" title="3.8 模块化+命名空间"></a>3.8 模块化+命名空间</h2><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> countAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br>       <span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span> * <span class="hljs-number">10</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> personAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    countAbout,<br>    personAbout<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">personAbout</span>.<span class="hljs-property">list</span><br><span class="hljs-comment">//方式二：借助mapState读取：</span><br>...<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;personAbout/firstPersonName&#x27;</span>]<br><span class="hljs-comment">//方式二：借助mapGetters读取：</span><br>...<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接dispatch</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;personAbout/addPersonWang&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapActions：</span><br>...<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方式一：自己直接commit</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapMutations：</span><br>...<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-8-案例"><a href="#3-8-案例" class="headerlink" title="3.8 案例"></a>3.8 案例</h2><h3 id="3-8-1-纯vue版"><a href="#3-8-1-纯vue版" class="headerlink" title="3.8.1 纯vue版"></a>3.8.1 纯vue版</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>sum:0 //当前的和<br>&#125;<br>&#125;,<br>methods: &#123;<br>increment()&#123;<br>this.sum += this.n<br>&#125;,<br>decrement()&#123;<br>this.sum -= this.n<br>&#125;,<br>incrementOdd()&#123;<br>if(this.sum % 2)&#123;<br>this.sum += this.n<br>&#125;<br>&#125;,<br>incrementWait()&#123;<br>setTimeout(()=&gt;&#123;<br>this.sum += this.n<br>&#125;,500)<br>&#125;,<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>button&#123;<br>margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="3-8-2-最终效果"><a href="#3-8-2-最终效果" class="headerlink" title="3.8.2 最终效果"></a>3.8.2 最终效果</h3><p>首先来看项目的目录结构：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="命名空间项目目录结构"></p><p><code>src/components/Count.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;<br>&lt;h3&gt;当前求和放大10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;<br>&lt;h3 style=&quot;color:red&quot;&gt;Person组件的总人数是：&#123;&#123;personList.length&#125;&#125;&lt;/h3&gt;<br>&lt;select v-model.number=&quot;n&quot;&gt;<br>&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;<br>&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;<br>&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;<br>&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;<br>&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;<br>&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;<br>export default &#123;<br>name:&#x27;Count&#x27;,<br>data() &#123;<br>return &#123;<br>n:1, //用户选择的数字<br>&#125;<br>&#125;,<br>computed:&#123;<br>//借助mapState生成计算属性，从state中读取数据。（数组写法）<br>...mapState(&#x27;countAbout&#x27;,[&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),<br>...mapState(&#x27;personAbout&#x27;,[&#x27;personList&#x27;]),<br>//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）<br>...mapGetters(&#x27;countAbout&#x27;,[&#x27;bigSum&#x27;])<br>&#125;,<br>methods: &#123;<br>//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)<br>...mapMutations(&#x27;countAbout&#x27;,&#123;increment:&#x27;JIA&#x27;,decrement:&#x27;JIAN&#x27;&#125;),<br>//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)<br>...mapActions(&#x27;countAbout&#x27;,&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;)<br>&#125;,<br>mounted() &#123;<br>console.log(this.$store)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;css&quot;&gt;<br>button&#123;<br>margin-left: 5px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><code>src/components/Person.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;人员列表&lt;/h1&gt;<br>&lt;h3 style=&quot;color:red&quot;&gt;Count组件求和为：&#123;&#123;sum&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;列表中第一个人的名字是：&#123;&#123;firstPersonName&#125;&#125;&lt;/h3&gt;<br>&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot;&gt;<br>&lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;<br>&lt;button @click=&quot;addWang&quot;&gt;添加一个姓王的人&lt;/button&gt;<br>&lt;button @click=&quot;addPersonServer&quot;&gt;添加一个人，名字随机&lt;/button&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;p in personList&quot; :key=&quot;p.id&quot;&gt;&#123;&#123;p.name&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;nanoid&#125; from &#x27;nanoid&#x27;<br>export default &#123;<br>name:&#x27;Person&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;&#x27;<br>&#125;<br>&#125;,<br>computed:&#123;<br>personList()&#123;<br>return this.$store.state.personAbout.personList<br>&#125;,<br>sum()&#123;<br>return this.$store.state.countAbout.sum<br>&#125;,<br>firstPersonName()&#123;<br>return this.$store.getters[&#x27;personAbout/firstPersonName&#x27;]<br>&#125;<br>&#125;,<br>methods: &#123;<br>add()&#123;<br>const personObj = &#123;id:nanoid(),name:this.name&#125;<br>this.$store.commit(&#x27;personAbout/ADD_PERSON&#x27;,personObj)<br>this.name = &#x27;&#x27;<br>&#125;,<br>addWang()&#123;<br>const personObj = &#123;id:nanoid(),name:this.name&#125;<br>this.$store.dispatch(&#x27;personAbout/addPersonWang&#x27;,personObj)<br>this.name = &#x27;&#x27;<br>&#125;,<br>addPersonServer()&#123;<br>this.$store.dispatch(&#x27;personAbout/addPersonServer&#x27;)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/store/count.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//求和相关的配置</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">actions</span>:&#123;<br><span class="hljs-title function_">jiaOdd</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;actions中的jiaOdd被调用了&#x27;</span>)<br><span class="hljs-keyword">if</span>(context.<span class="hljs-property">state</span>.<span class="hljs-property">sum</span> % <span class="hljs-number">2</span>)&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;<br>&#125;,<br><span class="hljs-title function_">jiaWait</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;actions中的jiaWait被调用了&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;,<span class="hljs-number">500</span>)<br>&#125;<br>&#125;,<br><span class="hljs-attr">mutations</span>:&#123;<br><span class="hljs-title function_">JIA</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的JIA被调用了&#x27;</span>)<br>state.<span class="hljs-property">sum</span> += value<br>&#125;,<br><span class="hljs-title function_">JIAN</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的JIAN被调用了&#x27;</span>)<br>state.<span class="hljs-property">sum</span> -= value<br>&#125;,<br>&#125;,<br><span class="hljs-attr">state</span>:&#123;<br><span class="hljs-attr">sum</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//当前的和</span><br>&#125;,<br><span class="hljs-attr">getters</span>:&#123;<br><span class="hljs-title function_">bigSum</span>(<span class="hljs-params">state</span>)&#123;<br><span class="hljs-keyword">return</span> state.<span class="hljs-property">sum</span>*<span class="hljs-number">10</span><br>&#125;<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>src/store/person.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//人员管理相关的配置</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; nanoid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">actions</span>:&#123;<br><span class="hljs-title function_">addPersonWang</span>(<span class="hljs-params">context,value</span>)&#123;<br><span class="hljs-keyword">if</span>(value.<span class="hljs-property">name</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;王&#x27;</span>) === <span class="hljs-number">0</span>)&#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;ADD_PERSON&#x27;</span>,value)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;添加的人必须姓王！&#x27;</span>)<br>&#125;<br>&#125;,<br><span class="hljs-title function_">addPersonServer</span>(<span class="hljs-params">context</span>)&#123;<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://api.uixsj.cn/hitokoto/get?type=social&#x27;</span>).<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;ADD_PERSON&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),<span class="hljs-attr">name</span>:response.<span class="hljs-property">data</span>&#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)<br>&#125;<br>)<br>&#125;<br>&#125;,<br><span class="hljs-attr">mutations</span>:&#123;<br><span class="hljs-title function_">ADD_PERSON</span>(<span class="hljs-params">state,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mutations中的ADD_PERSON被调用了&#x27;</span>)<br>state.<span class="hljs-property">personList</span>.<span class="hljs-title function_">unshift</span>(value)<br>&#125;<br>&#125;,<br><span class="hljs-attr">state</span>:&#123;<br><span class="hljs-attr">personList</span>:[<br>&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>&#125;<br>]<br>&#125;,<br><span class="hljs-attr">getters</span>:&#123;<br><span class="hljs-title function_">firstPersonName</span>(<span class="hljs-params">state</span>)&#123;<br><span class="hljs-keyword">return</span> state.<span class="hljs-property">personList</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span><br>&#125;<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//该文件用于创建Vuex中最为核心的store</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> countOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./count&#x27;</span><br><span class="hljs-keyword">import</span> personOptions <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./person&#x27;</span><br><br><span class="hljs-comment">//应用Vuex插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br><span class="hljs-attr">modules</span>:&#123;<br><span class="hljs-attr">countAbout</span>:countOptions,<br><span class="hljs-attr">personAbout</span>:personOptions<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;Count/&gt;<br>&lt;hr&gt;<br>&lt;Person/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Count from &#x27;./components/Count&#x27;<br>import Person from &#x27;./components/Person&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;Count,Person&#125;,<br>mounted() &#123;<br>// console.log(&#x27;App&#x27;,this)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入App</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//引入插件</span><br><span class="hljs-keyword">import</span> vueResource <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-resource&#x27;</span><br><span class="hljs-comment">//引入store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-comment">//关闭Vue的生产提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">//使用插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(vueResource)<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>store,<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h2 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h2><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项，在src&#x2F;router&#x2F;index.js下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入Luyou 组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><br><span class="hljs-comment">//创建router实例对象，去管理一组一组的路由规则</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>&#125;<br>]<br>&#125;)<br><br><span class="hljs-comment">//暴露router</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-view&gt;&lt;/router-view&gt;<br></code></pre></td></tr></table></figure></li></ol><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>src&#x2F;components&#x2F;About.vue&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;h2&gt;我是About的内容&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;About&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/components/Home.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;h2&gt;我是Home的内容&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Home&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 该文件专门用于创建整个应用的路由器</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><br><span class="hljs-comment">//创建并暴露一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>&#125;<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;<br>        &lt;div class=&quot;page-header&quot;&gt;&lt;h2&gt;Vue Router Demo&lt;/h2&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;div class=&quot;col-xs-2 col-xs-offset-2&quot;&gt;<br>        &lt;div class=&quot;list-group&quot;&gt;<br><br>&lt;!-- 原始html中我们使用a标签实现页面的跳转 --&gt;<br>          &lt;!-- &lt;a class=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt; --&gt;<br>          &lt;!-- &lt;a class=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;<br><br>&lt;!-- Vue中借助router-link标签实现路由的切换 --&gt;<br>          <br>&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br>          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;col-xs-6&quot;&gt;<br>        &lt;div class=&quot;panel&quot;&gt;<br>          &lt;div class=&quot;panel-body&quot;&gt;<br>&lt;!-- 指定组件的呈现位置 --&gt;<br>            &lt;router-view&gt;&lt;/router-view&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;App&#x27;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入App</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入路由器</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-comment">//关闭Vue的生产提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">//应用插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br><span class="hljs-attr">router</span>:router<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="4-2-几个注意点"><a href="#4-2-几个注意点" class="headerlink" title="4.2 几个注意点"></a>4.2 几个注意点</h2><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h2 id="4-3-多级路由（多级路由）"><a href="#4-3-多级路由（多级路由）" class="headerlink" title="4.3 多级路由（多级路由）"></a>4.3 多级路由（多级路由）</h2><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span>,<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>:[ <span class="hljs-comment">//通过children配置子级路由</span><br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/news</span><br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<span class="hljs-comment">//此处一定不要写：/message</span><br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span><br>&#125;<br>]<br>&#125;<br>]<br></code></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><p><code>src/components.Banner.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;<br>&lt;div class=&quot;page-header&quot;&gt;&lt;h2&gt;Vue Router Demo&lt;/h2&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Banner&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/pages/About.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;h2&gt;我是About的内容&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;About&#x27;,<br>// 代码示例：组件被隐藏的时候是被销毁了，需要的时候再去挂载<br>/* beforeDestroy() &#123;<br>console.log(&#x27;About组件即将被销毁了&#x27;)<br>&#125;,*/<br>/* mounted() &#123;<br>console.log(&#x27;About组件挂载完毕了&#x27;,this)<br>window.aboutRoute = this.$route<br>window.aboutRouter = this.$router<br>&#125;,  */<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/pages/Home.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h2&gt;Home组件内容&lt;/h2&gt;<br>&lt;div&gt;<br>&lt;ul class=&quot;nav nav-tabs&quot;&gt;<br>&lt;li&gt;<br>&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;<br>&lt;/li&gt;<br>&lt;li&gt;<br>&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/message&quot;&gt;Message&lt;/router-link&gt;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Home&#x27;,<br>/* beforeDestroy() &#123;<br>console.log(&#x27;Home组件即将被销毁了&#x27;)<br>&#125;, */<br>/* mounted() &#123;<br>console.log(&#x27;Home组件挂载完毕了&#x27;,this)<br>window.homeRoute = this.$route<br>window.homeRouter = this.$router<br>&#125;,  */<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/pages/message.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li&gt;<br>&lt;a href=&quot;/message1&quot;&gt;message001&lt;/a&gt;&amp;nbsp;&amp;nbsp;<br>&lt;/li&gt;<br>&lt;li&gt;<br>&lt;a href=&quot;/message2&quot;&gt;message002&lt;/a&gt;&amp;nbsp;&amp;nbsp;<br>&lt;/li&gt;<br>&lt;li&gt;<br>&lt;a href=&quot;/message/3&quot;&gt;message003&lt;/a&gt;&amp;nbsp;&amp;nbsp;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Message&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/pages/News.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;ul&gt;<br>&lt;li&gt;news001&lt;/li&gt;<br>&lt;li&gt;news002&lt;/li&gt;<br>&lt;li&gt;news003&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;News&#x27;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 该文件专门用于创建整个应用的路由器</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/News&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Message&#x27;</span><br><br><span class="hljs-comment">//创建并暴露一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br>&#125;<br>]<br>&#125;<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;Banner/&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;div class=&quot;col-xs-2 col-xs-offset-2&quot;&gt;<br>        &lt;div class=&quot;list-group&quot;&gt;<br>&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br>          &lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;col-xs-6&quot;&gt;<br>        &lt;div class=&quot;panel&quot;&gt;<br>          &lt;div class=&quot;panel-body&quot;&gt;<br>&lt;!-- 指定组件的呈现位置 --&gt;<br>            &lt;router-view&gt;&lt;/router-view&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Banner from &#x27;./components/Banner&#x27;<br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;Banner&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入App</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入路由器</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-comment">//关闭Vue的生产提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">//应用插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br><span class="hljs-attr">router</span>:router<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="4-4-路由的query参数"><a href="#4-4-路由的query参数" class="headerlink" title="4.4 路由的query参数"></a>4.4 路由的query参数</h2><h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>path:&#x27;/home/message/detail&#x27;,<br>query:&#123;<br>   id:666,<br>            title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span><br>$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><p>从&#96;&#96;Message.vue<code>传递消息给</code>Detail.vue&#96;</p><p><code>src/pages/Message.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;<br>&lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;<br>&lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;<br><br>&lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;<br>&lt;router-link :to=&quot;&#123;<br>path:&#x27;/home/message/detail&#x27;,<br>query:&#123;<br>id:m.id,<br>title:m.title<br>&#125;<br>&#125;&quot;&gt;<br>&#123;&#123;m.title&#125;&#125;<br>&lt;/router-link&gt;<br><br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;hr&gt;<br>&lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Message&#x27;,<br>data() &#123;<br>return &#123;<br>messageList:[<br>&#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;<br>]<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/pages/Detail.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;<br>&lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;<br>&lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;<br><br>&lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;<br>&lt;router-link :to=&quot;&#123;<br>path:&#x27;/home/message/detail&#x27;,<br>query:&#123;<br>id:m.id,<br>title:m.title<br>&#125;<br>&#125;&quot;&gt;<br>&#123;&#123;m.title&#125;&#125;<br>&lt;/router-link&gt;<br><br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;hr&gt;<br>&lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Message&#x27;,<br>data() &#123;<br>return &#123;<br>messageList:[<br>&#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;<br>]<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="4-5-命名路由"><a href="#4-5-命名路由" class="headerlink" title="4.5 命名路由"></a>4.5 命名路由</h2><h4 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h4><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Demo</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;test&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Test</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br>                      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//给路由命名</span><br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;welcome&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Hello</span>,<br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--简化前，需要写完整的路径 --&gt;<br>&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后，直接通过名字跳转 --&gt;<br>&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化写法配合传递参数 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>name:&#x27;hello&#x27;,<br>query:&#123;<br>   id:666,<br>            title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><p>从<code>src/pages/Message.vue</code>跳转到<code>src/pages/Details.vue</code></p><p><code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 该文件专门用于创建整个应用的路由器</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/News&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Message&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Detail&#x27;</span><br><br><span class="hljs-comment">//创建并暴露一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br>]<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>src/pages/Message.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 仅写了template标签<br>&lt;template&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;<br>&lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;<br>&lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;<br><br>&lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;<br>&lt;router-link :to=&quot;&#123;<br>name:&#x27;xiangqing&#x27;,<br>query:&#123;<br>id:m.id,<br>title:m.title<br>&#125;<br>&#125;&quot;&gt;<br>&#123;&#123;m.title&#125;&#125;<br>&lt;/router-link&gt;<br><br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;hr&gt;<br>&lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="4-6-路由的params参数"><a href="#4-6-路由的params参数" class="headerlink" title="4.6 路由的params参数"></a>4.6 路由的params参数</h2><h4 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h4><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title&#x27;</span>, <span class="hljs-comment">//使用占位符声明接收params参数</span><br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>name:&#x27;xiangqing&#x27;,<br>params:&#123;<br>   id:666,<br>            title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span><br>$route.<span class="hljs-property">params</span>.<span class="hljs-property">title</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="4-7-路由的props配置"><a href="#4-7-路由的props配置" class="headerlink" title="4.7 路由的props配置"></a>4.7 路由的props配置</h2><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Message.vue组件</span><br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br><span class="hljs-comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><br><span class="hljs-comment">// props:&#123;a:900&#125;</span><br><br><span class="hljs-comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><br><span class="hljs-comment">// props:true</span><br><br><span class="hljs-comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><br><span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">id</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br><span class="hljs-attr">title</span>:route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-8-lt-router-link-gt-的replace属性"><a href="#4-8-lt-router-link-gt-的replace属性" class="headerlink" title="4.8 &lt;router-link&gt;的replace属性"></a>4.8 <code>&lt;router-link&gt;</code>的replace属性</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></p></li><li><p>如何开启<code>replace</code>模式：&#96;&#96;&#96;&lt;router-link replace …….&gt;News</router-link>&#96;&#96;</p><p>在<code>src/pages/Home.vue</code>中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link replace <br>   class=&quot;list-group-item&quot; <br>   active-class=&quot;active&quot; to=&quot;/home/<br>   message&quot;&gt;Message&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-9-编程式路由导航"><a href="#4-9-编程式路由导航" class="headerlink" title="4.9 编程式路由导航"></a>4.9 编程式路由导航</h2><h4 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h4><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//$router的两个API</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">id</span>:xxx,<br><span class="hljs-attr">title</span>:xxx<br>&#125;<br>&#125;)<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">id</span>:xxx,<br><span class="hljs-attr">title</span>:xxx<br>&#125;<br>&#125;)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">//前进</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">back</span>() <span class="hljs-comment">//后退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>() <span class="hljs-comment">//可前进也可后退</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>src/pages/Message.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;<br>&lt;!-- 跳转路由并携带params参数，to的字符串写法 --&gt;<br>&lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;<br><br>&lt;!-- 跳转路由并携带params参数，to的对象写法 --&gt;<br>&lt;router-link :to=&quot;&#123;<br>name:&#x27;xiangqing&#x27;,<br>query:&#123;<br>id:m.id,<br>title:m.title<br>&#125;<br>&#125;&quot;&gt;<br>&#123;&#123;m.title&#125;&#125;<br>&lt;/router-link&gt;<br>&lt;button @click=&quot;pushShow(m)&quot;&gt;push查看&lt;/button&gt;<br>&lt;button @click=&quot;replaceShow(m)&quot;&gt;replace查看&lt;/button&gt;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;hr&gt;<br>&lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Message&#x27;,<br>data() &#123;<br>return &#123;<br>messageList:[<br>&#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,<br>&#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,<br>&#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;<br>]<br>&#125;<br>&#125;,<br>methods: &#123;<br>pushShow(m)&#123;<br>this.$router.push(&#123;<br>name:&#x27;xiangqing&#x27;,<br>query:&#123;<br>id:m.id,<br>title:m.title<br>&#125;<br>&#125;)<br>&#125;,<br>replaceShow(m)&#123;<br>this.$router.replace(&#123;<br>name:&#x27;xiangqing&#x27;,<br>query:&#123;<br>id:m.id,<br>title:m.title<br>&#125;<br>&#125;)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>src/components/Banner.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;<br>&lt;div class=&quot;page-header&quot;&gt;<br>&lt;h2&gt;Vue Router Demo&lt;/h2&gt;<br>&lt;button @click=&quot;back&quot;&gt;后退&lt;/button&gt;<br>&lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;<br>&lt;button @click=&quot;test&quot;&gt;测试一下go&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Banner&#x27;,<br>methods: &#123;<br>back()&#123;<br>this.$router.back()<br>// console.log(this.$router)<br>&#125;,<br>forward()&#123;<br>this.$router.forward()<br>&#125;,<br>test()&#123;<br>this.$router.go(3)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="4-10-缓存路由组件"><a href="#4-10-缓存路由组件" class="headerlink" title="4.10 缓存路由组件"></a>4.10 缓存路由组件</h2><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;keep-alive include=&quot;News&quot;&gt; <br>    &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/keep-alive&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-11-两个新的生命周期钩子"><a href="#4-11-两个新的生命周期钩子" class="headerlink" title="4.11 两个新的生命周期钩子"></a>4.11 两个新的生命周期钩子</h2><ol><li><p>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</p></li><li><p>具体名字：</p><ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li><li><p>代码示例：src&#x2F;pages&#x2F;News.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>name:&#x27;News&#x27;,<br>data() &#123;<br>return &#123;<br>opacity:1<br>&#125;<br>&#125;,<br>/* beforeDestroy() &#123;<br>console.log(&#x27;News组件即将被销毁了&#x27;)<br>clearInterval(this.timer)<br>&#125;, */<br>/* mounted()&#123;<br>this.timer = setInterval(() =&gt; &#123;<br>console.log(&#x27;@&#x27;)<br>this.opacity -= 0.01<br>if(this.opacity &lt;= 0) this.opacity = 1<br>&#125;,16)<br>&#125;, */<br>activated() &#123;<br>console.log(&#x27;News组件被激活了&#x27;)<br>this.timer = setInterval(() =&gt; &#123;<br>console.log(&#x27;@&#x27;)<br>this.opacity -= 0.01<br>if(this.opacity &lt;= 0) this.opacity = 1<br>&#125;,16)<br>&#125;,<br>deactivated() &#123;<br>console.log(&#x27;News组件失活了&#x27;)<br>clearInterval(this.timer)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-12-路由守卫"><a href="#4-12-路由守卫" class="headerlink" title="4.12 路由守卫"></a>4.12 路由守卫</h2><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫：<code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 该文件专门用于创建整个应用的路由器</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/News&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Message&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Detail&#x27;</span><br><br><span class="hljs-comment">//创建并暴露一个路由器</span><br><span class="hljs-keyword">const</span> router =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;关于&#x27;</span>&#125;<br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;主页&#x27;</span>&#125;,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;新闻&#x27;</span>&#125;<br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiaoxi&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;消息&#x27;</span>&#125;,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;详情&#x27;</span>&#125;,<br><br><span class="hljs-comment">//props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</span><br><span class="hljs-comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span><br><br><span class="hljs-comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</span><br><span class="hljs-comment">// props:true</span><br><br><span class="hljs-comment">//props的第三种写法，值为函数</span><br><span class="hljs-title function_">props</span>(<span class="hljs-params">$route</span>)&#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">id</span>:$route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br><span class="hljs-attr">title</span>:$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span>,<br><span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br><span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;<br>&#125;<br><br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br>]<br>&#125;)<br><br><span class="hljs-comment">//全局前置路由守卫————初始化的时候被调用、每次路由切换之前被调用</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;前置路由守卫&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>)&#123; <span class="hljs-comment">//判断是否需要鉴权</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>)===<span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;<br><span class="hljs-title function_">next</span>()<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学校名不对，无权限查看！&#x27;</span>)<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">next</span>()<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span><br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;后置路由守卫&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span> || <span class="hljs-string">&#x27;硅谷系统&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>独享守卫：<code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建并暴露一个路由器</span><br><span class="hljs-keyword">const</span> router =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;关于&#x27;</span>&#125;<br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;主页&#x27;</span>&#125;,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;新闻&#x27;</span>&#125;,<br><span class="hljs-attr">beforeEnter</span>: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;独享路由守卫&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>)&#123; <span class="hljs-comment">//判断是否需要鉴权</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>)===<span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;<br><span class="hljs-title function_">next</span>()<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学校名不对，无权限查看！&#x27;</span>)<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">next</span>()<br>&#125;<br>&#125;<br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiaoxi&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;消息&#x27;</span>&#125;,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">isAuth</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;详情&#x27;</span>&#125;,<br><br><span class="hljs-title function_">props</span>(<span class="hljs-params">$route</span>)&#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">id</span>:$route.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>,<br><span class="hljs-attr">title</span>:$route.<span class="hljs-property">query</span>.<span class="hljs-property">title</span>,<br><span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br><span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;<br>&#125;<br><br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br>]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>组件内守卫：<code>src/pages/About.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是About的内容<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;About&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//通过路由规则，进入该组件时被调用</span></span></span><br><span class="language-javascript"><span class="language-xml">beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;About--beforeRouteEnter&#x27;</span>,to,<span class="hljs-keyword">from</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">isAuth</span>)&#123; <span class="hljs-comment">//判断是否需要鉴权</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;school&#x27;</span>)===<span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">next</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">next</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//通过路由规则，离开该组件时被调用</span></span></span><br><span class="language-javascript"><span class="language-xml">beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;About--beforeRouteLeave&#x27;</span>,to,<span class="hljs-keyword">from</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">next</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h2 id="4-13-路由器的两种工作模式"><a href="#4-13-路由器的两种工作模式" class="headerlink" title="4.13 路由器的两种工作模式"></a>4.13 路由器的两种工作模式</h2><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-3</title>
      <link href="/2022/04/02/vue-3/"/>
      <url>/2022/04/02/vue-3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue脚手架"><a href="#1-Vue脚手架" class="headerlink" title="1. Vue脚手架"></a>1. Vue脚手架</h1><h2 id="1-1-创建Vue脚手架"><a href="#1-1-创建Vue脚手架" class="headerlink" title="1.1 创建Vue脚手架"></a>1.1 创建Vue脚手架</h2><h3 id="1-1-1-说明"><a href="#1-1-1-说明" class="headerlink" title="1.1.1 说明"></a>1.1.1 说明</h3><p>Vue脚手架是Vue官方提供的标准化开发工具（开发平台）</p><p>文档：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><h3 id="1-2-2-具体步骤"><a href="#1-2-2-具体步骤" class="headerlink" title="1.2.2 具体步骤"></a>1.2.2 具体步骤</h3><p>第一步（仅第一次执行）：全局安装@vue&#x2F;cli</p><p>​    <code>npm install -g @vue/cli</code></p><p>第二步：切换到你想要创建项目的目录，然后使用命令创建项目</p><p>​    <code>vue create 项目名</code></p><p>第三步：在项目目录下，启动项目</p><p>​    <code>npm run serve</code></p><p>其他：如果想退出项目，只需要按<code>ctrl+C</code></p><blockquote><p>安装成功效果截图：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220324201410.png" alt="安装成功图"></p><p>创建项目：</p><p><code>vue create vue_test</code></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220324201819.png" alt="选择种类"></p></blockquote><h2 id="1-2-分析脚手架结构"><a href="#1-2-分析脚手架结构" class="headerlink" title="1.2 分析脚手架结构"></a>1.2 分析脚手架结构</h2><blockquote><p>脚手架的文件结构：</p><p>  ├── node_modules </p><p>  ├── public</p><p>  │  ├── favicon.ico: 页签图标</p><p>  │  └── index.html: 主页面</p><p>  ├── src</p><p>  │  ├── assets: 存放静态资源</p><p>  │  │  └── logo.png</p><p>  │  │── component: 存放组件</p><p>  │  │  └── HelloWorld.vue</p><p>  │  │── App.vue: 汇总所有组件</p><p>  │  │── main.js: 入口文件</p><p>  ├── .gitignore: git版本管制忽略的配置</p><p>  ├── babel.config.js: babel的配置文件</p><p>  ├── package.json: 应用包配置文件 </p><p>  ├── README.md: 应用描述文件</p><p>  ├── package-lock.json：包版本控制文件</p><p>修改默认配置：</p><ol><li><p>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</p></li><li><p>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p></li></ol></blockquote><p>当执行了npm run serve之后直接执行的就是main.js文件</p><p>vscode开启终端：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220324202259.png" alt="image-20220324202259906"></p><p>脚手架中如果有代码的更新会自动进行重新编译和页面的重新生成</p><p>关于不同版本的Vue：</p><ol><li>vue.js与vue.runtime.xxx.js的区别：<br> (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。<br> (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，<br>需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">该文件是整个项目的入口文件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入App组件，它是所有组件的父组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//关闭vue的生产提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">//创建Vue实例对象---vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-comment">//render函数完成了这个功能：将App组件放入容器中</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br><span class="hljs-comment">// render:q=&gt; q(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span><br><br><span class="hljs-comment">// template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span><br><span class="hljs-comment">// components:&#123;App&#125;,</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>APP.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;img src=&quot;./assets/logo.png&quot; alt=&quot;logo&quot;&gt;<br>&lt;School&gt;&lt;/School&gt;<br>&lt;Student&gt;&lt;/Student&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>//引入组件<br>import School from &#x27;./components/School&#x27;<br>import Student from &#x27;./components/Student&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;<br>School,<br>Student<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h1 id="2-ref属性"><a href="#2-ref属性" class="headerlink" title="2. ref属性"></a>2. ref属性</h1><ol><li><p>被用来给元素或子组件注册引用信息（id的替代者）</p></li><li><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p></li><li><p>使用方式：</p><ol><li><p>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></p></li><li><p>获取：<code>this.$refs.xxx</code></p></li></ol></li></ol><hr><p><strong>components&#x2F;School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;school&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;School&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京·昌平&#x27;<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.school&#123;<br>background-color: gray;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;<br>&lt;button ref=&quot;btn&quot; @click=&quot;showDOM&quot;&gt;点我输出上方的DOM元素&lt;/button&gt;<br>&lt;School ref=&quot;sch&quot;/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>//引入School组件<br>import School from &#x27;./components/School&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;School&#125;,<br>data() &#123;<br>return &#123;<br>msg:&#x27;欢迎学习Vue！&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>showDOM()&#123;<br>console.log(this.$refs.title) //真实DOM元素<br>console.log(this.$refs.btn) //真实DOM元素<br>console.log(this.$refs.sch) //School组件的实例对象（vc）<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="3-props配置项"><a href="#3-props配置项" class="headerlink" title="3. props配置项"></a>3. props配置项</h1><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br><span class="hljs-attr">name</span>:&#123;<br><span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>, <span class="hljs-comment">//类型</span><br><span class="hljs-attr">required</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//必要性</span><br><span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;老王&#x27;</span> <span class="hljs-comment">//默认值</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><hr><p><strong>components&#x2F;Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;<br>&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生年龄：&#123;&#123;myAge+1&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;updateAge&quot;&gt;尝试修改收到的年龄&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Student&#x27;,<br>data() &#123;<br>console.log(this)<br>return &#123;<br>msg:&#x27;我是一个尚硅谷的学生&#x27;,<br>myAge:this.age<br>&#125;<br>&#125;,<br>methods: &#123;<br>updateAge()&#123;<br>this.myAge++<br>&#125;<br>&#125;,<br>//简单声明接收<br>// props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;] <br><br>//接收的同时对数据进行类型限制<br>/* props:&#123;<br>name:String,<br>age:Number,<br>sex:String<br>&#125; */<br><br>//接收的同时对数据：进行类型限制+默认值的指定+必要性的限制<br>props:&#123;<br>name:&#123;<br>type:String, //name的类型是字符串<br>required:true, //name是必要的<br>&#125;,<br>age:&#123;<br>type:Number,<br>default:99 //默认值<br>&#125;,<br>sex:&#123;<br>type:String,<br>required:true<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;Student name=&quot;李四&quot; sex=&quot;女&quot; :age=&quot;18&quot;/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Student from &#x27;./components/Student&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;Student&#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h1 id="4-mixin-混入"><a href="#4-mixin-混入" class="headerlink" title="4. mixin(混入)"></a>4. mixin(混入)</h1><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">&#123;<br>    data()<span class="hljs-meta">&#123;....&#125;</span>,<br>    methods:<span class="hljs-meta">&#123;....&#125;</span><br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步使用混入：</p><p>​    全局混入：<code>Vue.mixin(xxx)</code>（在main.js下）<br>​    局部混入：<code>mixins:[&#39;xxx&#39;]    </code>（在组件内部配置）</p></li><li><p>如果mixin.js和自身的data定义了相同的数据，以自己的为主。</p><p>如果mixin.js和自身定义了相同的生命周期钩子，则共同保留。</p></li></ol><hr><p>定义混合 <strong>mixin.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> hunhe = &#123;<br><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br>&#125;,<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好啊！&#x27;</span>)<br>&#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> hunhe2 = &#123;<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">x</span>:<span class="hljs-number">100</span>,<br><span class="hljs-attr">y</span>:<span class="hljs-number">200</span><br>&#125;<br>&#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>components&#x2F;School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h2 @click=&quot;showName&quot;&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 局部混合<br>//引入一个hunhe<br>import &#123;hunhe,hunhe2&#125; from &#x27;../mixin&#x27;<br><br>export default &#123;<br>name:&#x27;School&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>x:666<br>&#125;<br>&#125;,<br>mixins:[hunhe,hunhe2],<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>components&#x2F;Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h2 @click=&quot;showName&quot;&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;hunhe,hunhe2&#125; from &#x27;../mixin&#x27;<br><br>export default &#123;<br>name:&#x27;Student&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;张三&#x27;,<br>sex:&#x27;男&#x27;<br>&#125;<br>&#125;,<br>mixins:[hunhe,hunhe2]<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;School/&gt;<br>&lt;hr&gt;<br>&lt;Student/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import School from &#x27;./components/School&#x27;<br>import Student from &#x27;./components/Student&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;School,Student&#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h1 id="5-插件"><a href="#5-插件" class="headerlink" title="5. 插件"></a>5. 插件</h1><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">对象.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) &#123;<br>    <span class="hljs-comment">// 1. 添加全局过滤器</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(....)<br><br>    <span class="hljs-comment">// 2. 添加全局指令</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(....)<br><br>    <span class="hljs-comment">// 3. 配置全局混入(合)</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(....)<br><br>    <span class="hljs-comment">// 4. 添加实例方法</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;...&#125;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$myProperty</span> = xxxx<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><hr><p>plugins.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-title function_">install</span>(<span class="hljs-params">Vue,x,y,z</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,y,z)<br><span class="hljs-comment">//全局过滤器</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;mySlice&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br><span class="hljs-keyword">return</span> value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)<br>&#125;)<br><br><span class="hljs-comment">//定义全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;fbind&#x27;</span>,&#123;<br><span class="hljs-comment">//指令与元素成功绑定时（一上来）</span><br><span class="hljs-title function_">bind</span>(<span class="hljs-params">element,binding</span>)&#123;<br>element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span><br>&#125;,<br><span class="hljs-comment">//指令所在元素被插入页面时</span><br><span class="hljs-title function_">inserted</span>(<span class="hljs-params">element,binding</span>)&#123;<br>element.<span class="hljs-title function_">focus</span>()<br>&#125;,<br><span class="hljs-comment">//指令所在的模板被重新解析时</span><br><span class="hljs-title function_">update</span>(<span class="hljs-params">element,binding</span>)&#123;<br>element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//定义混入</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">x</span>:<span class="hljs-number">100</span>,<br><span class="hljs-attr">y</span>:<span class="hljs-number">200</span><br>&#125;<br>&#125;,<br>&#125;)<br><br><span class="hljs-comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hello</span> = <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你好啊&#x27;</span>)&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>components&#x2F;School.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name | mySlice&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;test&quot;&gt;点我测试一个hello方法&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;School&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;尚硅谷atguigu&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;<br>&#125;,<br>methods: &#123;<br>test()&#123;<br>this.hello()<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;School/&gt;<br>&lt;hr&gt;<br>&lt;Student/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import School from &#x27;./components/School&#x27;<br>import Student from &#x27;./components/Student&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;School,Student&#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h1 id="6-scoped样式"><a href="#6-scoped样式" class="headerlink" title="6. scoped样式"></a>6. scoped样式</h1><ol><li><p>作用：让样式在局部生效，防止冲突。</p></li><li><p>写法：<code>&lt;style scoped&gt;</code></p></li></ol><h1 id="7-浏览器本地存储"><a href="#7-浏览器本地存储" class="headerlink" title="7. 浏览器本地存储"></a>7. 浏览器本地存储</h1><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="7-1-localStorage"><a href="#7-1-localStorage" class="headerlink" title="7.1 localStorage"></a>7.1 localStorage</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>localStorage<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>localStorage<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> p = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;hello!!!&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>,<span class="hljs-number">666</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(p))</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">readData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>))</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(localStorage.getItem(&#x27;msg3&#x27;))</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteAllData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">clear</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7-2-sessionStorage"><a href="#7-2-sessionStorage" class="headerlink" title="7.2 sessionStorage"></a>7.2 sessionStorage</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>sessionStorage<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>sessionStorage<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteAllData()&quot;</span>&gt;</span>点我清空一个数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> p = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-string">&#x27;hello!!!&#x27;</span>)</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>,<span class="hljs-number">666</span>)</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(p))</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">readData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg&#x27;</span>))</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> result = sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;person&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(result))</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(sessionStorage.getItem(&#x27;msg3&#x27;))</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;msg2&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteAllData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">sessionStorage.<span class="hljs-title function_">clear</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8-组件自定义事件"><a href="#8-组件自定义事件" class="headerlink" title="8. 组件自定义事件"></a>8. 组件自定义事件</h1><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p><blockquote><p>v-on在Demo组件标签上，所以在Demo组件的实例对象vc上绑定了atguigu事件，如果以后有人触发了这个事件，test事件就会被调用</p></blockquote></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Demo</span> ref=<span class="hljs-string">&quot;demo&quot;</span>/&gt;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">xxx</span>.$on(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">test</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><hr><p>第一种方式详解：</p><p>通过父组件给子组件传递函数类型的props实现：子给父传递数据</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/School.png" alt="School.vue"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/App.png" alt="App.vue"></p><hr><p><img src="C:\Users\78557\AppData\Roaming\Typora\typora-user-images\image-20220328175017032.png" alt="App.vue"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/Stuednt2.png" alt="Student.vue"></p><blockquote><p>思路就是：在App.vue里面配置methods方法，然后把该方法传递给子组件。在子组件里面调用这个函数，然后获取参数。</p></blockquote><hr><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/App3.png" alt="App.vue"></p><blockquote><p>思考题：一个this指向问题<img src="https://gitee.com/li-il/pic_bed/raw/master/img/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98.png" alt="this指向问题"></p><p>如果把getStudentName是普通函数的形式并且写在App.vue里面，则本应该是Student的组件实例对象会被vue更换成App的实例对象。</p><p>如何更改？</p><p>答案：改成箭头函数</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E4%B8%80.png" alt="解决办法一"></p><p>总结：</p><p>有两种方法获取App的实例对象。</p></blockquote><hr><p>全部代码：</p><p>Student.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;student&quot;&gt;<br>&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;当前求和为：&#123;&#123;number&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;add&quot;&gt;点我number++&lt;/button&gt;<br>&lt;button @click=&quot;sendStudentlName&quot;&gt;把学生名给App&lt;/button&gt;<br>&lt;button @click=&quot;unbind&quot;&gt;解绑atguigu事件&lt;/button&gt;<br>&lt;button @click=&quot;death&quot;&gt;销毁当前Student组件的实例(vc)&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Student&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;张三&#x27;,<br>sex:&#x27;男&#x27;,<br>number:0<br>&#125;<br>&#125;,<br>methods: &#123;<br>add()&#123;<br>console.log(&#x27;add回调被调用了&#x27;)<br>this.number++<br>&#125;,<br>sendStudentlName()&#123;<br>//触发Student组件实例身上的atguigu事件<br>this.$emit(&#x27;atguigu&#x27;,this.name,666,888,900)<br>// this.$emit(&#x27;demo&#x27;)<br>// this.$emit(&#x27;click&#x27;)<br>&#125;,<br>unbind()&#123;<br>this.$off(&#x27;atguigu&#x27;) //解绑一个自定义事件<br>// this.$off([&#x27;atguigu&#x27;,&#x27;demo&#x27;]) //解绑多个自定义事件<br>// this.$off() //解绑所有的自定义事件<br>&#125;,<br>death()&#123;<br>this.$destroy() //销毁了当前Student组件的实例，销毁后所有Student实例的自定义事件全都不奏效。<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.student&#123;<br>background-color: pink;<br>padding: 5px;<br>margin-top: 30px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>School.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;school&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;sendSchoolName&quot;&gt;把学校名给App&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;School&#x27;,<br>props:[&#x27;getSchoolName&#x27;],<br>data() &#123;<br>return &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;<br>&#125;,<br>methods: &#123;<br>sendSchoolName()&#123;<br>this.getSchoolName(this.name)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.school&#123;<br>background-color: skyblue;<br>padding: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h1&gt;&#123;&#123;msg&#125;&#125;，学生姓名是:&#123;&#123;studentName&#125;&#125;&lt;/h1&gt;<br><br>&lt;!-- 通过父组件给子组件传递函数类型的props实现：子给父传递数据 --&gt;<br>&lt;School :getSchoolName=&quot;getSchoolName&quot;/&gt;<br><br>&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法，使用@或v-on） --&gt;<br>&lt;!-- &lt;Student @atguigu=&quot;getStudentName&quot; @demo=&quot;m1&quot;/&gt; --&gt;<br><br>&lt;!-- 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法，使用ref） --&gt;<br>&lt;!-- 有时原生的dom事件但是会被认为是自定义的dom事件，就需要native来指定 --&gt;<br>&lt;Student ref=&quot;student&quot; @click.native=&quot;show&quot;/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Student from &#x27;./components/Student&#x27;<br>import School from &#x27;./components/School&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;School,Student&#125;,<br>data() &#123;<br>return &#123;<br>msg:&#x27;你好啊！&#x27;,<br>studentName:&#x27;&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>getSchoolName(name)&#123;<br>console.log(&#x27;App收到了学校名：&#x27;,name)<br>&#125;,<br>getStudentName(name,...params)&#123;<br>console.log(&#x27;App收到了学生名：&#x27;,name,params)<br>this.studentName = name<br>&#125;,<br>m1()&#123;<br>console.log(&#x27;demo事件被触发了！&#x27;)<br>&#125;,<br>show()&#123;<br>alert(123)<br>&#125;<br>&#125;,<br>mounted() &#123;<br>this.$refs.student.$on(&#x27;atguigu&#x27;,this.getStudentName) //绑定自定义事件<br>// this.$refs.student.$once(&#x27;atguigu&#x27;,this.getStudentName) //绑定自定义事件（一次性）<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.app&#123;<br>background-color: gray;<br>padding: 5px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h1 id="9-全局事件总线"><a href="#9-全局事件总线" class="headerlink" title="9. 全局事件总线"></a>9. 全局事件总线</h1><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>......<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线，$bus就是当前应用的vm</span><br>&#125;,<br>    ......<br>&#125;) <br></code></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li><li><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF.png" alt="全局事件总线"></p></li></ol><hr><p>引入：</p><p>因为：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></p><p>所以如果在main.js上给Vue实例对象添加  <code>Vue.prototype.x = &#123;a:1,b:2&#125;</code></p><p>则在School.vue上面获取x： <code>console.log(&#39;School&#39;,this.x)</code>  是成功的。</p><hr><p>第一步：在main.js上面安装全局事件总线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">//引入Vue<br>import Vue from &#x27;vue&#x27;<br>//引入App<br>import App from &#x27;./App.vue&#x27;<br>//关闭Vue的生产提示<br>Vue.config.productionTip = false<br><br>//创建vm<br>new Vue(&#123;<br>el:&#x27;#app&#x27;,<br>render: h =&gt; h(App),<br>beforeCreate() &#123;<br>Vue.prototype.$bus = this //安装全局事件总线<br>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;school&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;School&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;<br>&#125;,<br>mounted() &#123;<br>// console.log(&#x27;School&#x27;,this)<br>this.$bus.$on(&#x27;hello&#x27;,(data)=&gt;&#123;<br>console.log(&#x27;我是School组件，收到了数据&#x27;,data)<br>&#125;)<br>&#125;,<br>beforeDestroy() &#123;<br>this.$bus.$off(&#x27;hello&#x27;)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.school&#123;<br>background-color: skyblue;<br>padding: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;student&quot;&gt;<br>&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Student&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;张三&#x27;,<br>sex:&#x27;男&#x27;,<br>&#125;<br>&#125;,<br>mounted() &#123;<br>// console.log(&#x27;Student&#x27;,this.x)<br>&#125;,<br>methods: &#123;<br>sendStudentName()&#123;<br>this.$bus.$emit(&#x27;hello&#x27;,this.name)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.student&#123;<br>background-color: pink;<br>padding: 5px;<br>margin-top: 30px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;<br>&lt;School/&gt;<br>&lt;Student/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Student from &#x27;./components/Student&#x27;<br>import School from &#x27;./components/School&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;School,Student&#125;,<br>data() &#123;<br>return &#123;<br>msg:&#x27;你好啊！&#x27;,<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.app&#123;<br>background-color: gray;<br>padding: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入App</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//关闭Vue的生产提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">//安装全局事件总线</span><br>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>总结：想把Student的name给School，需要在Student里面$emit一个方法 <code>this.$bus.$emit(&#39;hello&#39;,this.name)</code>，然后把回调放置在School里面</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">this.$bus.$on(<span class="hljs-string">&#x27;hello&#x27;</span>,(<span class="hljs-built_in">data</span>)=&gt;&#123;<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&#x27;我是School组件，收到了数据&#x27;</span>,<span class="hljs-built_in">data</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><h1 id="10-消息订阅与发布（pubsub）"><a href="#10-消息订阅与发布（pubsub）" class="headerlink" title="10. 消息订阅与发布（pubsub）"></a>10. 消息订阅与发布（pubsub）</h1><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">pid</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>) <span class="hljs-comment">//订阅消息</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><hr><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;student&quot;&gt;<br>&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import pubsub from &#x27;pubsub-js&#x27;<br>export default &#123;<br>name:&#x27;Student&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;张三&#x27;,<br>sex:&#x27;男&#x27;,<br>&#125;<br>&#125;,<br>methods: &#123;<br>sendStudentName()&#123;<br>// Student发布了hello消息，传递了参数666<br>pubsub.publish(&#x27;hello&#x27;,666)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.student&#123;<br>background-color: pink;<br>padding: 5px;<br>margin-top: 30px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;school&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 导入<br>import pubsub from &#x27;pubsub-js&#x27;<br>export default &#123;<br>name:&#x27;School&#x27;,<br>data() &#123;<br>return &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京&#x27;,<br>&#125;<br>&#125;,<br>mounted() &#123;<br>this.pubId = pubsub.subscribe(&#x27;hello&#x27;,(msgName,data)=&gt;&#123;<br>console.log(this)<br>// console.log(&#x27;有人发布了hello消息，hello消息的回调执行了&#x27;,msgName,data)<br>&#125;)<br>&#125;,<br>beforeDestroy() &#123;<br>pubsub.unsubscribe(this.pubId)<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.school&#123;<br>background-color: skyblue;<br>padding: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong>（可忽视）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;app&quot;&gt;<br>&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;<br>&lt;School/&gt;<br>&lt;Student/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Student from &#x27;./components/Student&#x27;<br>import School from &#x27;./components/School&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;School,Student&#125;,<br>data() &#123;<br>return &#123;<br>msg:&#x27;你好啊！&#x27;,<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.app&#123;<br>background-color: gray;<br>padding: 5px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h1 id="11-nextTick"><a href="#11-nextTick" class="headerlink" title="11. nextTick"></a>11. nextTick</h1><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h1 id="12-Vue封装的过度与动画"><a href="#12-Vue封装的过度与动画" class="headerlink" title="12. Vue封装的过度与动画"></a>12. Vue封装的过度与动画</h1><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;transition name=&quot;hello&quot;&gt;<br>&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><hr><p><strong>components&#x2F;Test.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;<br>&lt;transition name=&quot;hello&quot; appear&gt;<br>&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;/transition&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Test&#x27;,<br>data() &#123;<br>return &#123;<br>isShow:true<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>h1&#123;<br>background-color: orange;<br>&#125;<br><br>.hello-enter-active&#123;<br>animation: atguigu 0.5s linear;<br>&#125;<br><br>.hello-leave-active&#123;<br>animation: atguigu 0.5s linear reverse;<br>&#125;<br><br>@keyframes atguigu &#123;<br>from&#123;<br>transform: translateX(-100%);<br>&#125;<br>to&#123;<br>transform: translateX(0px);<br>&#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>components&#x2F;Test2.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;<br>&lt;transition-group name=&quot;hello&quot; appear&gt;<br>&lt;h1 v-show=&quot;!isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;尚硅谷！&lt;/h1&gt;<br>&lt;/transition-group&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>name:&#x27;Test&#x27;,<br>data() &#123;<br>return &#123;<br>isShow:true<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>h1&#123;<br>background-color: orange;<br>&#125;<br>/* 进入的起点、离开的终点 */<br>.hello-enter,.hello-leave-to&#123;<br>transform: translateX(-100%);<br>&#125;<br>.hello-enter-active,.hello-leave-active&#123;<br>transition: 0.5s linear;<br>&#125;<br>/* 进入的终点、离开的起点 */<br>.hello-enter-to,.hello-leave&#123;<br>transform: translateX(0);<br>&#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>components&#x2F;Test3.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;<br>&lt;transition-group <br>appear<br>name=&quot;animate__animated animate__bounce&quot; <br>enter-active-class=&quot;animate__swing&quot;<br>leave-active-class=&quot;animate__backOutUp&quot;<br>&gt;<br>&lt;h1 v-show=&quot;!isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;尚硅谷！&lt;/h1&gt;<br>&lt;/transition-group&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#x27;animate.css&#x27;<br>export default &#123;<br>name:&#x27;Test&#x27;,<br>data() &#123;<br>return &#123;<br>isShow:true<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>h1&#123;<br>background-color: orange;<br>&#125;<br><br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;Test/&gt;<br>&lt;Test2/&gt;<br>&lt;Test3/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Test from &#x27;./components/Test&#x27;<br>import Test2 from &#x27;./components/Test2&#x27;<br>import Test3 from &#x27;./components/Test3&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;Test,Test2,Test3&#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-2</title>
      <link href="/2022/04/02/vue-2/"/>
      <url>/2022/04/02/vue-2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-vue组件化编程"><a href="#1-vue组件化编程" class="headerlink" title="1. vue组件化编程"></a>1. vue组件化编程</h1><h2 id="1-1-组件的基本使用"><a href="#1-1-组件的基本使用" class="headerlink" title="1.1 组件的基本使用"></a>1.1 组件的基本使用</h2><ul><li><p>非单文件组件：</p><p>一个文件中包含有n个组件。</p></li><li><p>单文件组件：</p><p>一个文件中只包含有一个组件。</p></li></ul><p>Vue中使用组件的三大步骤：</p><ol><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ol><p>一、如何定义一个组件？<br>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；<br>区别如下：</p><ol><li>el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li>data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</li></ol><p>备注：使用template可以配置组件结构。</p><p>二、如何注册组件？<br>                1.局部注册：靠new Vue的时候传入components选项<br>                2.全局注册：靠Vue.component(‘组件名’,组件)</p><p>三、编写组件标签：<code>&lt;school&gt;&lt;/school&gt;</code></p><hr><p>非单文件组件的基本使用：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">Vue.config.productionTip = false</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//第一步：创建school组件</span></span><br><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">// el:&#x27;#root&#x27;, </span></span><br><span class="language-xml"><span class="language-handlebars">//组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span><br><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">schoolName:&#x27;尚硅谷&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">address:&#x27;北京昌平&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">showName()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">alert(this.schoolName)</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//第一步：创建student组件</span></span><br><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">studentName:&#x27;张三&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">age:18</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//创建vm</span></span><br><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">data:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">msg:&#x27;你好啊！&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">//第二步：注册组件（局部注册）</span></span><br><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">school,</span></span><br><span class="language-xml"><span class="language-handlebars">student</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>非单文件组件的全局使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//第一步：创建hello组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> hello = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tom&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//第二步：全局注册组件</span></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,hello)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root2&#x27;</span>,</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-组件的几个注意点"><a href="#1-2-组件的几个注意点" class="headerlink" title="1.2 组件的几个注意点"></a>1.2 组件的几个注意点</h2><p>几个注意点：</p><ol><li>关于组件名:<br>     一个单词组成：<br>                 第一种写法(首字母小写)：school<br>                 第二种写法(首字母大写)：School<br>     多个单词组成：<br>                 第一种写法(kebab-case命名)：my-school (键需要用引号包裹)<br>                 第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)<br>     备注：<br>             (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。<br>             (2).可以使用name配置项指定组件在开发者工具中呈现的名字。</li><li>关于组件标签:<br>        第一种写法：<school></school><br>     第二种写法：<school/><br>     备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。</li><li>一个简写方式：<br>     <code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>几个注意点<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//定义组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> s = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 直接决定组件的名字</span></span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;欢迎学习Vue!&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 已经指定组件名的情况下，注册的名字会失效</span></span><br><span class="language-javascript"><span class="hljs-attr">school</span>:s</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-3-组件的嵌套"><a href="#1-3-组件的嵌套" class="headerlink" title="1.3 组件的嵌套"></a>1.3 组件的嵌套</h2><p>将student组件作为school的子组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>组件的嵌套<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//定义student组件</span></span><br><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">name:&#x27;student&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">name:&#x27;张三&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">age:18</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//定义school组件</span></span><br><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">name:&#x27;school&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">name:&#x27;尚硅谷&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">address:&#x27;北京&#x27;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,</span></span><br><span class="language-xml"><span class="language-handlebars">//注册组件（局部）</span></span><br><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">student</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//定义app组件</span></span><br><span class="language-xml"><span class="language-handlebars">const app = Vue.extend(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">template:`</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">`,</span></span><br><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">school,</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">//创建vm</span></span><br><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span>&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">//注册组件（局部）</span></span><br><span class="language-xml"><span class="language-handlebars">components:&#123;app&#125;</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-4-VueComponent"><a href="#1-4-VueComponent" class="headerlink" title="1.4 VueComponent"></a>1.4 VueComponent</h2><ol><li>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</li><li>我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</li><li>特别注意：每次调用Vue.extend，返回的都是一个<u>全新</u>的VueComponent！</li><li>关于this指向：<br> (1).组件配置中：<br>             data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。<br> (2).new Vue(options)配置中：<br>             data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</li><li>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。<br> Vue的实例对象，以后简称vm。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueComponent<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//定义school组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> school = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;school&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;showName&#x27;</span>,<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> test = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;span&gt;atguigu&lt;/span&gt;`</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//定义hello组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> hello = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;test&gt;&lt;/test&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;你好啊！&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;test&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(&#x27;@&#x27;,school)</span></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(&#x27;#&#x27;,hello)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//创建vm</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;school,hello&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-5-一个重要的内置关系"><a href="#1-5-一个重要的内置关系" class="headerlink" title="1.5 一个重要的内置关系"></a>1.5 一个重要的内置关系</h2><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220324200329.png/" alt="一个重要的内置关系"></p><ol><li><p>一个重要的内置关系：VueComponent.prototype._<em>proto</em>_ &#x3D;&#x3D;&#x3D; Vue.prototype</p></li><li><p>为什么要有这个关系：让组件实例对象（vc)可以访问到 Vue原型上的属性、方法。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>一个重要的内置关系<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1.一个重要的内置关系：VueComponent.prototype.__proto__ === Vue.prototype</span><br><span class="hljs-comment">2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="language-javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">x</span> = <span class="hljs-number">99</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//定义school组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> school = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;school&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">template</span>:<span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,</span><br><span class="language-javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">showX</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//创建一个vm</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;你好&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">components</span>:&#123;school&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//定义一个构造函数</span></span><br><span class="language-javascript"><span class="hljs-comment">/* function Demo()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">this.a = 1</span></span><br><span class="hljs-comment"><span class="language-javascript">this.b = 2</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">//创建一个Demo的实例对象</span></span><br><span class="hljs-comment"><span class="language-javascript">const d = new Demo()</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(Demo.prototype) //显示原型属性</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(d.__proto__) //隐式原型属性</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(Demo.prototype === d.__proto__)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">//程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span></span><br><span class="hljs-comment"><span class="language-javascript">Demo.prototype.x = 99</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&#x27;@&#x27;,d) */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-单文件组件"><a href="#2-单文件组件" class="headerlink" title="2. 单文件组件"></a>2. 单文件组件</h1><p>如果编写vue程序没有高亮，则是没有安装插件：</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220324200659.png/" alt="vue插件"></p><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;demo&quot;&gt;<br>&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;<br>&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br> export default &#123;<br>name:&#x27;School&#x27;,<br>data()&#123;<br>return &#123;<br>name:&#x27;尚硅谷&#x27;,<br>address:&#x27;北京昌平&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>showName()&#123;<br>alert(this.name)<br>&#125;<br>&#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.demo&#123;<br>background-color: orange;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br> export default &#123;<br>name:&#x27;Student&#x27;,<br>data()&#123;<br>return &#123;<br>name:&#x27;张三&#x27;,<br>age:18<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;School&gt;&lt;/School&gt;<br>&lt;Student&gt;&lt;/Student&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>//引入组件<br>import School from &#x27;./School.vue&#x27;<br>import Student from &#x27;./Student.vue&#x27;<br><br>export default &#123;<br>name:&#x27;App&#x27;,<br>components:&#123;<br>School,<br>Student<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot; /&gt;<br>&lt;title&gt;练习一下单文件组件的语法&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 准备一个容器 --&gt;<br>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;<br>&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt; --&gt;<br>&lt;!-- &lt;script type=&quot;text/javascript&quot; src=&quot;./main.js&quot;&gt;&lt;/script&gt; --&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">template</span>:<span class="hljs-string">`&lt;App&gt;&lt;/App&gt;`</span>,<br><span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">App</span>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>APP.vue管理所有vue组件。</p><p>main.js里面注册APP.vue。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-4</title>
      <link href="/2022/03/02/Linux-4/"/>
      <url>/2022/03/02/Linux-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><p><strong>介绍</strong></p><p>shell是命令行解释器，为用户提供了一个向Linux内核发送请求来运行程序的界面系统和程序</p><p><strong>脚本格式要求</strong></p><p>以<code>#!/bin/bash</code>开头</p><p>脚本需要有可执行权限</p><p><strong>编写第一个shell脚本</strong></p><figure class="highlight d"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs d">创建一个shell脚本，输出hello world<br>vim hello.sh<br><span class="hljs-meta">#!/bin/bash</span><br>echo <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p><strong>脚本常用的执行方式</strong></p><ol><li><p>输入脚本的绝对路径或相对路径</p><p>首先要赋予hello.sh脚本的+x权限，再执行脚本</p></li><li><p>sh+脚本</p><p>可以不用赋予脚本+x权限，直接执行即可</p><p>例如：sh hello.sh（也可使用绝对路径）</p></li></ol><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /root/shcode<br><span class="hljs-built_in">cd</span> /root/shcode/<br><span class="hljs-built_in">ls</span><br>vim hello.sh<br>【文件中】<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello,world~&quot;</span><br>【退出文件】<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204926.png" alt="image-20220227160802938"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204930.png" alt="image-20220226151427317"></p></blockquote><h2 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h2><p><strong>介绍</strong></p><p>shell变量分为系统变量和用户自定义变量</p><p>系统变量：$HOME，$PWD等</p><p>显示当前shell中所有变量：<code>set</code></p><p><strong>shell变量的定义</strong></p><p>定义变量 ： <code>变量=值</code></p><p>撤销变量 ： <code>unset 变量</code></p><p>声明静态变量 ：<code>readonly 变量</code>（注意：不能unset）</p><p><strong>应用实例</strong></p><blockquote><p>创建文件</p><p><code>vim var.sh</code></p><p>执行脚本</p><p><code>./var.sh</code></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204938.png" alt="image-20220226151637198"></p></blockquote><p><strong>shell变量的定义规则</strong></p><p>变量名称可以由字母、数字和下划线组成，但是不能以数字开头</p><p>等号两侧不能有空格</p><p>变量名称一般习惯为大写</p><p><strong>将命令的返回值赋给变量</strong></p><p>A&#x3D;`date` 反引号，运行里面的命令，把结果返回给变量Ａ</p><p>A&#x3D;$(date) 等价上面的写法 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">C=`<span class="hljs-built_in">date</span>`<br>D=$(<span class="hljs-built_in">date</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;C=<span class="hljs-variable">$C</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;D=<span class="hljs-variable">$D</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p><strong>基本语法</strong></p><p>将shell变量输出为环境变量（全局变量）</p><p>让修改后的配置信息立刻生效</p><p>查询环境变量的值</p><p><strong>应用案例</strong></p><p>在&#x2F;etc&#x2F;profile文件中定义TOMCAT_HOME环境变量</p><p>查看环境变量TOMCAT_HOME的值</p><p>在另一个shell程序中使用TOMCAT_HOME</p><blockquote><p>注意：在输出TOMCAT_HOME之前，需要让其生效</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/opt/</span><br>vim <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204946.png" alt="image-20220226212829099"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$TOMCAT_HOME</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$TOMCAT_HOME</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204950.png" alt="image-20220226212908467"></p></blockquote><p><strong>shell的多行注释</strong>：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">:&lt;&lt;!<br>……<br>!<br></code></pre></td></tr></table></figure><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><p><strong>介绍</strong></p><p>当我们执行shell脚本时，如果希望获取到命令行的参数信息，就要使用位置参数变量</p><p>例如：<code>./myshell.sh 100 200</code>， 就是一个执行shell的命令行，可以在myshell脚本中获取到参数信息</p><p><strong>基本语法</strong></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204954.png" alt="image-20220227162629961"></p><p><strong>位置参数变量</strong></p><p>编写一个shell脚本position.sh，在脚本中获取到命令行的各个参数信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim position.sh<br>【文件中】<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;0=<span class="hljs-variable">$0</span> 1=<span class="hljs-variable">$1</span> 2=<span class="hljs-variable">$2</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;所有的参数=$*&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;参数的个数=<span class="hljs-variable">$#</span>&quot;</span><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x position.sh<br>./position.sh 100 200<br></code></pre></td></tr></table></figure><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><strong>介绍</strong></p><p>预定义变量就是shell设计者定义好的变量，可以直接在shell脚本中调用</p><p><strong>基本语法</strong></p><p><code>$$</code>    当前进程的进程号（PID）</p><p><code>$!</code>    后台运行的最后一个进程的进程号（PID）</p><p><code>$?</code>    最后一次执行的命令的返回状态，如果这个变量的值为0，则上一个命令正确执行；如果非0，则执行不正确。</p><p><strong>应用实例</strong></p><p>在shell脚本中简单实用预定义变量</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> perVar.<span class="hljs-keyword">sh</span><br>【文件中】<br>#!/bin/bash<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;当前执行的进程id=$$&quot;</span><br># 以后台的方式运行一个脚本，并获取他的进程号<br>/root/shcode/position.<span class="hljs-keyword">sh</span> &amp;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;最后一个后台方式运行的进程id=$!&quot;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;执行的结果是$?&quot;</span><br>【退出文件】<br>chmod <span class="hljs-keyword">u</span>+<span class="hljs-keyword">x</span> perVar.<span class="hljs-keyword">sh</span><br>./ preVar.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h2 id="shell运算符"><a href="#shell运算符" class="headerlink" title="shell运算符"></a>shell运算符</h2><p><strong>基本语法</strong></p><ol><li><p><code>$((运算式))</code>   或   <code>$[运算式]</code>   或者  <code>expr m + n</code> </p></li><li><p>expr运算符之间<u>要有空格</u>，如果希望将expr的值赋给某个变量，使用&#96;&#96;</p><p>如果没有空格，会被当成一个整体</p></li><li><p><code>expr m - n</code> </p></li><li><p><u>\*</u>  &#x2F;  % 乘、除、取余</p></li></ol><p><strong>应用实例</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">计算（2<span class="hljs-string">+3</span>）×4的值<br>请求出命令行的两个参数的和<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim oper.sh<br>【文件中】<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 案例一</span><br>RES1=$(((<span class="hljs-number">2</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">4</span>))<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;res1=<span class="hljs-variable">$RES1</span>&quot;</span><br><br>RES2=$[(2+3)*4]<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;res2=<span class="hljs-variable">$RES2</span>&quot;</span><br><br>TEMP=`<span class="hljs-built_in">expr</span> 2 + 3`<br>RES3=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$TEMP</span> \* 4`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;res3=<span class="hljs-variable">$RES3</span>&quot;</span><br><br><span class="hljs-comment"># 案例二</span><br>SUM=[<span class="hljs-variable">$1</span>+<span class="hljs-variable">$2</span>]<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sum=<span class="hljs-variable">$SUM</span>&quot;</span><br><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x oper.sh<br>./oper.sh<br></code></pre></td></tr></table></figure><h2 id="循环和判断"><a href="#循环和判断" class="headerlink" title="循环和判断"></a>循环和判断</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><strong>基本语法</strong></p><p><code>[ condition ]</code> </p><p>注意condition前后都有空格</p><p>非空返回true，可使用$?验证（0为true，大于1为false）</p><p><strong>常见判断</strong></p><ol><li><p>字符串比较 <code>=</code> </p></li><li><p>两个整数的比较</p><table><thead><tr><th>-lt</th><th>小于</th></tr></thead><tbody><tr><td>-le</td><td>小于等于</td></tr><tr><td>-eq</td><td>等于</td></tr><tr><td>-gt</td><td>大于</td></tr><tr><td>-ge</td><td>大于等于</td></tr><tr><td>-ne</td><td>不等于</td></tr></tbody></table></li><li><p>按照文件的权限进行判断</p><table><thead><tr><th>-r</th><th>有读的权限</th></tr></thead><tbody><tr><td>-w</td><td>有写的权限</td></tr><tr><td>-x</td><td>有执行的权限</td></tr></tbody></table></li><li><p>按照文件类型进行判断</p><table><thead><tr><th>-f</th><th>文件存在并且是一个常规的文件</th></tr></thead><tbody><tr><td>-e</td><td>文件存在</td></tr><tr><td>-d</td><td>文件存在并且是一个目录</td></tr></tbody></table></li></ol><p><strong>应用实例</strong></p><blockquote><p><code>vim ifdemo.sh</code></p><p>【文件中】</p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315205000.png" alt="image-20220226214023550"></p><p>【退出文件】</p><p><code>chmod u+x ifdemo.sh</code></p><p><code>./ifdemo.sh</code></p></blockquote><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p><strong>应用案例</strong></p><p>编写一个shell程序，如果输入的参数大于等于60则输出“及格了”，否则输出“不及格”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ifCase.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$1</span> -ge 60 ]<br><span class="hljs-keyword">then</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;及格了&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$1</span> -lt 60 ]<br><span class="hljs-keyword">then</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不及格&quot;</span><br><span class="hljs-keyword">fi</span><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x ifCase.sh<br>./ifCase.sh 70<br></code></pre></td></tr></table></figure><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p><strong>应用案例</strong></p><p>当命令行参数是1就输出“周一”，如果是2就输出“周二”，其他情况输出“other”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim testCase.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;周一&quot;</span><br>;;<br><span class="hljs-string">&quot;2&quot;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;周二&quot;</span><br>;;<br>*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;其他&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x testCase.sh<br>./testCase.sh 2<br></code></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p><strong>案例一</strong>：</p><p>打印命令行输入的参数</p><p>可以看出$*和$@的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim testFor1.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$*&quot;</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;num is <span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=================&quot;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;num is <span class="hljs-variable">$j</span>&quot;</span><br><span class="hljs-keyword">done</span><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x testFor1.sh<br>./testFor1.sh 100 200 300<br></code></pre></td></tr></table></figure><p><strong>案例二</strong>：</p><p>从1加到100的输出显示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim testFor2.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-attribute">SUM</span>=0<br><span class="hljs-keyword">for</span>(( <span class="hljs-attribute">i</span>=1;i&lt;=100;i++))<br><span class="hljs-keyword">do</span><br><span class="hljs-attribute">SUM</span>=$[<span class="hljs-variable">$SUM</span>+<span class="hljs-variable">$i</span>]<br>done<br>echo <span class="hljs-string">&quot;总和SUM=<span class="hljs-variable">$SUM</span>&quot;</span><br><br>echo <span class="hljs-string">&quot;=================&quot;</span><br><span class="hljs-attribute">SUM</span>=0<br><span class="hljs-keyword">for</span>(( <span class="hljs-attribute">i</span>=1;i&lt;=$1;i++))<br><span class="hljs-keyword">do</span><br><span class="hljs-attribute">SUM</span>=$[<span class="hljs-variable">$SUM</span>+<span class="hljs-variable">$i</span>]<br>done<br>echo <span class="hljs-string">&quot;自定义总和SUM=<span class="hljs-variable">$SUM</span>&quot;</span><br>【退出文件】<br>chmod u+x testFor2.sh<br>./testFor2.sh<br></code></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>案例一：</p><p>从命令行输入一个数n，统计从1+…+n的值是多少</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim testWhile.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-attribute">SUM</span>=0<br><span class="hljs-attribute">i</span>=0<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le <span class="hljs-variable">$1</span> ]<br><span class="hljs-keyword">do</span><br><span class="hljs-attribute">SUM</span>=$[<span class="hljs-variable">$SUM</span>+<span class="hljs-variable">$i</span>]<br><span class="hljs-attribute">i</span>=$[<span class="hljs-variable">$i</span>+1]<br>done<br>echo <span class="hljs-string">&quot;执行结果=<span class="hljs-variable">$SUM</span>&quot;</span><br>【退出文件】<br>chmod u+x testWhile.sh<br>./testWhile.sh 10<br></code></pre></td></tr></table></figure><h4 id="read从控制台输入"><a href="#read从控制台输入" class="headerlink" title="read从控制台输入"></a>read从控制台输入</h4><p>read [选项] 参数</p><p>-p  指定读取值时的提示符</p><p>-t  指定读取值时等待的时间，如果没有在指定的时间输入，就不再等待了</p><p><strong>应用实例</strong></p><p>案例：</p><p>读取控制台输入的num值，在10秒内输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim testRead.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-built_in">read</span> -t 10 -p <span class="hljs-string">&quot;请输入一个数NUM1=&quot;</span> NUM1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的NUM1=<span class="hljs-variable">$NUM1</span>&quot;</span><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x testRead.sh<br>./testRead.sh<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>shell有系统函数，也可以自定义函数</p><h4 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h4><ul><li><p>basename</p><p>功能：返回完整路径最后&#x2F;部分，常用于获取文件名</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">basename /home/<span class="hljs-keyword">aaa</span>/<span class="hljs-keyword">test</span><span class="hljs-number">.</span>txt<br>返回<span class="hljs-keyword">test</span><span class="hljs-number">.</span>txt<br>basename /home/<span class="hljs-keyword">aaa</span>/<span class="hljs-keyword">test</span><span class="hljs-number">.</span>txt .txt<br>返回<span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure></li><li><p>dirname</p><p>功能：返回完整路径最后&#x2F;前面的部分，常用于返回路径部分</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">dirname <span class="hljs-regexp">/home/</span>aaa/test.txt<br>返回<span class="hljs-regexp">/home/</span>aaa<br></code></pre></td></tr></table></figure></li></ul><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>案例：计算两个参数的和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim testFun.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getSum</span></span>() &#123;<br>SUM=$[<span class="hljs-variable">$n1</span>+<span class="hljs-variable">$n2</span>]<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;和=<span class="hljs-variable">$SUM</span>&quot;</span><br>&#125;<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数n1=&quot;</span> n1<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数n2=&quot;</span> n2<br>getSum <span class="hljs-variable">$n1</span> <span class="hljs-variable">$n2</span><br>【退出文件】<br><span class="hljs-built_in">chmod</span> u+x testFun.sh<br>./testFun.sh 1 3<br></code></pre></td></tr></table></figure><h2 id="Shell编程综合案例-数据库备份"><a href="#Shell编程综合案例-数据库备份" class="headerlink" title="Shell编程综合案例 数据库备份"></a>Shell编程综合案例 数据库备份</h2><p><strong>需求分析</strong></p><ol><li>每天凌晨2:30备份数据库hspedu到&#x2F;data&#x2F;backup&#x2F;db</li><li>备份开始和备份结束能够给出相应的提示信息</li><li>备份后的文件要求以备份时间为文件名，并打包成.tar.gz的形式，比如:2021-03-12_230201.tar.gz</li><li>在备份的同时，检查是否有10天前备份的数据库文件，如果有就将其删除。</li></ol><p><strong>代码</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pwd （显示工作目录）<br>vim mysql_db_backup.sh<br>【文件中】<br><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-comment"># 备份目录</span><br><span class="hljs-attribute">BACKUP</span>=/data/backup/db<br><span class="hljs-comment"># 当前时间</span><br><span class="hljs-attribute">DATETIME</span>=$(date +%Y-%m-%d_%H%M%S)<br><span class="hljs-comment"># 数据库的地址</span><br><span class="hljs-attribute">HOST</span>=localhost<br><span class="hljs-comment"># 数据库用户名</span><br><span class="hljs-attribute">DB_USER</span>=root<br><span class="hljs-comment"># 数据库密码</span><br><span class="hljs-attribute">DB_PW</span>=root<br><span class="hljs-comment"># 备份的数据库名</span><br><span class="hljs-attribute">DATABASE</span>=hspedu<br><br><span class="hljs-comment"># 创建备份目录，如果不存在，就创建</span><br>[ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>&quot;</span> ] &amp;&amp; mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>&quot;</span><br><span class="hljs-comment"># 备份数据库</span><br>mysqldump -u<span class="hljs-variable">$&#123;DB_USER&#125;</span> -p<span class="hljs-variable">$&#123;DB_PW&#125;</span> <span class="hljs-attribute">--host</span>=<span class="hljs-variable">$&#123;HOST&#125;</span> -q -R --databases <span class="hljs-variable">$&#123;DATABASE&#125;</span> | gzip &gt; <span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>/<span class="hljs-variable">$DATETIME</span>.sql.gz<br><br><span class="hljs-comment"># 将文件处理成tar.gz</span><br>cd <span class="hljs-variable">$&#123;BACKUP&#125;</span><br>tar -zcvf <span class="hljs-variable">$DATETIME</span>.tar.gz <span class="hljs-variable">$&#123;DATETIME&#125;</span><br><span class="hljs-comment"># 删除对应的备份目录</span><br>rm -rf <span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span><br><br><span class="hljs-comment"># 删除10天前的备份文件</span><br><span class="hljs-built_in">find</span> <span class="hljs-variable">$&#123;BACKUP&#125;</span> -atime +10 -name <span class="hljs-string">&quot;*.tar.gz&quot;</span> -exec rm -rf &#123;&#125; \;<br>echo <span class="hljs-string">&quot;备份数据库<span class="hljs-variable">$&#123;DATABASE&#125;</span> 成功~&quot;</span><br>【退出文件】<br>chmod u+x mysql_db_backup.sh<br>./mysql_db_backup.sh <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-3</title>
      <link href="/2022/03/02/Linux-3/"/>
      <url>/2022/03/02/Linux-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux组的介绍"><a href="#Linux组的介绍" class="headerlink" title="Linux组的介绍"></a>Linux组的介绍</h1><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念。<br>1.所有者<br>2.所在组<br>3.其它组<br>4.改变用户所在的组</p><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><p>基本指令：<code>groupadd 组名</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">应用实例：<br>创建一个组monster，然后创建一个用户fox，并放入monster组中。<br>groupadd  monster<br>useradd -g monster fox<br><span class="hljs-built_in">id</span> fox<br></code></pre></td></tr></table></figure><h3 id="文件目录所有者"><a href="#文件目录所有者" class="headerlink" title="文件目录所有者"></a>文件目录所有者</h3><p>一般为文件的创建者，谁创建了该文件，谁就是文件的所有者。</p><p>查看文件的所有者、所在组：<code>ls -ahl</code></p><p>修改文件所有者：<code>chown 用户名 文件名</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">应用实例：使用root，创建一个文件apple.txt，然后将其所有者修改成tom<br><span class="hljs-built_in">chown</span> tom apple.txt<br></code></pre></td></tr></table></figure><h3 id="文件目录所在组"><a href="#文件目录所在组" class="headerlink" title="文件目录所在组"></a>文件目录所在组</h3><p>当用户创建了文件之后，文件所在的组就是该用户所在的组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">应用实例：使用fox创建一个文件，看该文件属于哪个组<br><span class="hljs-built_in">pwd</span>（查看当前是否属于fox用户）<br><span class="hljs-built_in">touch</span> xxx（文件名）（创建一个文件）<br><span class="hljs-built_in">ls</span> -ahl（查看文件的所在组）<br></code></pre></td></tr></table></figure><h3 id="修改文件所在组"><a href="#修改文件所在组" class="headerlink" title="修改文件所在组"></a>修改文件所在组</h3><p><code>chgrp 组名 文件名</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">应用实例：root用户创建文件orange.txt，看该文件属于哪个组，然后将文件所在组修改到fruit组。<br>groupadd fruit<br><span class="hljs-built_in">touch</span> orange.txt<br><span class="hljs-built_in">chgrp</span> fruit orange.txt<br></code></pre></td></tr></table></figure><h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>出文件所有者和所在组的用户外，系统的其他用户都是文件的其他组。</p><h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限也可以改变某个用户所在的组。</p><ol><li><p>usermod -g 新组名 用户名</p></li><li><p>usermod -d 目录名 用户名 （改变该用户登录的初始目录）</p><p>说明：用户需要有进入到新目录的权限。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">应用实例：<br>将zwj用户从原来所在组修改到wudang组。<br><span class="hljs-built_in">id</span> zwj <br><span class="hljs-built_in">cat</span> /etc/group | grep wudang<br>usermod -g wudang zwj<br></code></pre></td></tr></table></figure><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h3 id="权限基本介绍"><a href="#权限基本介绍" class="headerlink" title="权限基本介绍"></a>权限基本介绍</h3><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184841.png" alt="image-20220225201648459"></p><p>文件及目录权限应用实例：</p><p><code>ls -l</code> 中显示的内容如下：</p><p><code>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc</code></p><p>第一个字符代表文件类型：<code>- l d c b</code></p><p>其余三个字符每3个一组（rwx）：读（r）写（w）执行（x）</p><ul><li><p>第一组rwx：文件拥有者的权限是读、写和执行</p></li><li><p>第二组rw-：与文件拥有者同一组的用户的权限是读、写，但不能执行</p></li><li><p>第三组r–：不与文件拥有者同组的其他用户的权限是读，不能写和执行</p></li></ul><p>可用数字表示为：<code>r=4 w=2 x=1</code>，因此rwx&#x3D;4+2+1&#x3D;7</p><p>其他说明：</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184844.png" alt="image-20220227132345761"></p><h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><ul><li><p>rwx作用到文件</p><ol><li><p>【r】代表可读：可以读取、查看。</p></li><li><p>【w】代表可写：可以修改，不能删除。</p><p>（删除的前提是对该文件所在的目录有写权限）</p></li><li><p>【x】代表可执行：可以被执行。</p></li></ol></li><li><p>rwx作用到目录</p><ol><li>【r】代表可读：可以被读取，ls查看目录内容。</li><li>【w】代表可写：可以修改，对目录内创建、删除、重命名目录。</li><li>【x】代表可执行：可以进入该目录。</li></ol></li></ul><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p><code>chmod</code>可以修改文件或目录的权限。</p><ul><li><p>通过+、-、&#x3D;变更权限</p><p>u：所有者     g：所在组    o：其他人    a：所有人（ugo的总和）</p><p>例：<code>chmod u=rwx,g=rx,o=x 目录/目录名</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">应用案例：<br><span class="hljs-number">1</span>. 给<span class="hljs-keyword">abc</span>文件的所有者读写执行的权限，给所在组读执行权限，给其他组读执行权限。<br>chmod <span class="hljs-keyword">u</span>=rwx,g=rx,<span class="hljs-keyword">o</span>=rx <span class="hljs-keyword">abc</span><br><span class="hljs-number">2</span>. 给<span class="hljs-keyword">abc</span>文件的所有者除去执行的权限，增加读写的权限<br>chmod <span class="hljs-keyword">u</span>-<span class="hljs-keyword">x</span>,g+<span class="hljs-keyword">w</span> <span class="hljs-keyword">abc</span><br><span class="hljs-number">3</span>. 给<span class="hljs-keyword">abc</span>文件的所有用户添加读的权限<br>chmod <span class="hljs-keyword">a</span>+r <span class="hljs-keyword">abc</span><br></code></pre></td></tr></table></figure></li><li><p>通过数字变更权限</p><p>r&#x3D;4    w&#x3D;2    x&#x3D;1    rwx&#x3D;4+2+1&#x3D;7</p><p>例：<code>chmod u=rwx,g=rx,o=x 目录/目录名</code> &#x3D;&#x3D; <code>chmod 751 文件目录名</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">应用案例：<br><span class="hljs-number">1</span>. 将<span class="hljs-regexp">/home/</span>abc.txt文件的权限修改成rwxr-xr-x<br>chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/home/</span>abc.txt<br></code></pre></td></tr></table></figure></li></ul><h3 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h3><p><code>chown 新所有者 文件或目录</code>  改变所有者</p><p><code>chown 新所有者:新组 文件或目录</code>  改变所有者和所在组</p><p><code>-R</code> 如果是目录，则使其下所有的子文件或目录递归生效</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">应用案例：<br><span class="hljs-number">1</span>. 将 <span class="hljs-regexp">/home/</span>abc.txt 文件的所有者修改成 tom<br>chown tom <span class="hljs-regexp">/home/</span>abc.txt<br><span class="hljs-number">2</span>. 将 <span class="hljs-regexp">/home/</span>test 目录下所有的文件和目录的所有者都修改成tom<br>chown -R tom <span class="hljs-regexp">/home/</span>test<br></code></pre></td></tr></table></figure><h3 id="修改文件、目录所在组"><a href="#修改文件、目录所在组" class="headerlink" title="修改文件、目录所在组"></a>修改文件、目录所在组</h3><p><code>chgrp 新组 文件或目录</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">应用案例：<br><span class="hljs-number">1</span>. 将 <span class="hljs-regexp">/home/</span>abc.txt 文件的所在组改成 shaolin<br>gruopadd shaolin<br>chgrp shaolin <span class="hljs-regexp">/home/</span>abc.txt<br><span class="hljs-number">2</span>. 将 <span class="hljs-regexp">/home/</span>test 目录下的所有文件和目录 的所在组都改成shaolin<br>chgrp -R shaolin <span class="hljs-regexp">/home/</span>test<br></code></pre></td></tr></table></figure><h1 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h1><p>任务调度：是指系统在某个时间执行的特定的命令或程序</p><p>任务调度分类：系统工作如病毒扫描等某些周而复始的工作，或个别用户工作如数据库的备份等。</p><p><code>crontab</code>   进行定时任务的设置</p><ul><li><p>-e        编辑crontab定时任务</p></li><li><p>-l         查询crontab任务</p></li><li><p>-r         删除当前用户所有的crontab任务</p></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>设置任务调度文件：<code>/etc/crontab</code></p><p>设置个人任务调度，执行 <code>crontab -e</code> 命令</p><p>输入任务到调度文件</p><p><code>*/1 * * * * ls -l /etc/ &gt;/tmp/to.txt</code></p><p>意思是每小时的每分钟执行<code>ls -l /etc/ &gt;/tmp/to.txt</code>命令</p><h3 id="占位符及特殊符号的说明"><a href="#占位符及特殊符号的说明" class="headerlink" title="占位符及特殊符号的说明"></a>占位符及特殊符号的说明</h3><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184851.png" alt="image-20220225203025679"></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184853.png" alt="image-20220225203039641"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><code>cronrtab -r</code>：终止任务调度</p><p><code>cronrtab -l</code>：列出当前有哪些任务调度</p><p><code>service crond restart</code>：重启任务调度</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184855.png" alt="image-20220225203103951"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">应用案例：<br><span class="hljs-number">1</span>. 每隔<span class="hljs-number">1</span>分钟，就将当前的日期信息追加到<span class="hljs-regexp">/tmp/my</span>date文件中<br>*<span class="hljs-regexp">/1 * * * * date &gt;&gt; /</span>tmp/mydate<br><span class="hljs-number">2</span>. 每隔<span class="hljs-number">1</span>分钟，将当前日期和日历都追加到<span class="hljs-regexp">/home/my</span>cal文件中<br>vim <span class="hljs-regexp">/home/my</span>.sh <br>date &gt;&gt; <span class="hljs-regexp">/home/my</span>cal 和 cal &gt;&gt; <span class="hljs-regexp">/home/my</span>cal（写入内容）<br>chmod u+x <span class="hljs-regexp">/home/my</span>.sh （给my.sh增加执行权限）<br>crontab -e <br>*<span class="hljs-regexp">/1 * * * * /</span>home/my.sh<br><span class="hljs-number">3</span>. 每天凌晨两点将mysql数据库testdb备份到文件中<br>crontab -e<br><span class="hljs-number">0</span> <span class="hljs-number">2</span> * * * mysqldump -uroot -proot testdb &gt;&gt; <span class="hljs-regexp">/home/</span>db.bak<br><br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><p>可以通过写一个脚本，直接执行脚本</p><p><code>vim my.sh</code></p><p>打开文件之后写入：</p><p><code>date &gt;&gt; /home/mycal</code></p><p><code>cal &gt;&gt; /home/mycal</code></p><p>更改权限：</p><p><code>chmod u+x my.sh</code></p><p>执行脚本：<code>./my.sh</code></p></blockquote><h3 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h3><ol><li><p>at是<u>一次性</u>定时计划任务。</p></li><li><p>at的守护进程atd会以后台模式运行，检查作业队列运行。</p></li><li><p>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</p></li><li><p>在使用at命令的时候，一定要保证atd进程的启动</p></li><li><p>查看atd进程是否启动：<code>ps -ef | grep atd</code></p></li><li><p>at 命令格式：</p><p><code>at [选项] [时间]</code></p><p><code>ctrl+D</code> 结束at命令的输入</p></li></ol><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184858.png" alt="image-20220225203643172"></p><h1 id="磁盘分区机制"><a href="#磁盘分区机制" class="headerlink" title="磁盘分区机制"></a>磁盘分区机制</h1><p>原理：</p><ol><li><p>Linux只有一个根目录，一个独立且唯一的文件结构，每个分区都是用来组成整个文件系统的一部分。</p></li><li><p>Linux采用了一种叫“载入”的处理方法，它将一个分区和一个目录联系起来。</p></li></ol><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184900.png" alt="image-20220225204003514"></p><h3 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h3><p>查看所有设备挂载情况：<code>lsblk</code> 或者 <code>lsblk -f</code></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184902.png" alt="image-20220225204057400"></p><h3 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h3><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184919.png" alt="image-20220225204131928"></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184923.png" alt="image-20220225204214815"></p><h3 id="增加磁盘案例"><a href="#增加磁盘案例" class="headerlink" title="增加磁盘案例"></a>增加磁盘案例</h3><p>（P59）此处没有进行实操。</p><ol><li>虚拟机添加硬盘</li><li>分区</li><li>格式化</li><li>挂载</li><li>设置可以自动挂载</li></ol><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184926.png" alt="image-20220225204947122"></p><h3 id="查询系统整体磁盘使用情况"><a href="#查询系统整体磁盘使用情况" class="headerlink" title="查询系统整体磁盘使用情况"></a>查询系统整体磁盘使用情况</h3><p><strong>整体磁盘查询</strong></p><p><code>df -h</code></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184929.png" alt="image-20220225205228173"></p><hr><p><strong>特定磁盘查询</strong></p><p><code>du -h 目录</code>  查询指定目录的磁盘占用情况，默认为当前目录</p><p>-s                         指定目录占用大小汇总</p><p>-h                         带计量单位</p><p>-a                         含文件</p><p>-c                         列出明细的同时，增加汇总值</p><p>–max-depth&#x3D;1    子目录深度</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>. 查询 /<span class="hljs-keyword">opt</span> 目录的磁盘占用情况，深度为<span class="hljs-number">1</span>：<br>du -h --<span class="hljs-built_in">max</span>-depth=<span class="hljs-number">1</span> /<span class="hljs-keyword">opt</span><br><br><span class="hljs-number">2</span>. 包含文件夹：<br>du -<span class="hljs-keyword">ha</span> --<span class="hljs-built_in">max</span>-depth=<span class="hljs-number">1</span> /<span class="hljs-keyword">opt</span><br><br><span class="hljs-number">3</span>. 列出明细，增加汇总值：<br>du -hac --<span class="hljs-built_in">max</span>-depth=<span class="hljs-number">1</span> /<span class="hljs-keyword">opt</span><br></code></pre></td></tr></table></figure><hr><p><strong>磁盘情况指令</strong></p><ol><li><p>统计 &#x2F;opt 文件夹下文件的个数</p><p><code>ls</code></p><p><code>ls -l /opt</code></p><p><code>ls -l /opt | grep &quot;^-&quot;</code></p><p><code>ls -l /opt | grep &quot;^-&quot; | wc -l</code></p></li><li><p>统计 &#x2F;opt 文件夹下目录的个数</p><p><code>ls -l /opt | grep &quot;^d&quot; | wc -l</code></p></li><li><p>统计 &#x2F;opt 文件夹下文件的个数，包括子文件夹里的</p><p><code>ls -lR /opt | grep &quot;^-&quot; | wc -l</code></p></li><li><p>统计 &#x2F;opt 文件夹下目录的个数，包括子文件夹里的</p><p><code>ls -lR /opt | grep &quot;^d&quot; | wc -l</code></p></li><li><p>以树状显示目录结构</p><p><code>tree 目录</code></p></li></ol><h1 id="进程基本介绍"><a href="#进程基本介绍" class="headerlink" title="进程基本介绍"></a>进程基本介绍</h1><ol><li><p>在Linux中，每一个执行的程序都称为一个<u>进程</u>，每一个进程都分配一个ID号（pid，进程号）</p></li><li><p>每个进程都是以两种方式存在的，<u>前台与后台</u>。</p><p>前台：用户目前屏幕上可以操作的</p><p>后台：实际在操作，但是屏幕上无法看到，通常以后台方式进行</p></li><li><p>一般系统的服务都是以后台进程的方式存在，都会常驻在系统中，直到关机才结束</p></li></ol><h3 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h3><p>ps指令是用来查看目前系统中，有哪些正在执行，以及他们执行的状况，可以不加任何参数</p><p>ps显示的信息选项：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>PID</td><td>进程识别号</td></tr><tr><td>TTY</td><td>终端机号</td></tr><tr><td>TIME</td><td>此进程所消耗的CPU时间</td></tr><tr><td>CMD</td><td>正在执行的命令或进程名</td></tr></tbody></table><p><code>ps -a</code> 显示当前终端的所有进程信息</p><p><code>ps -u</code> 以用户的格式显示进程信息</p><p><code>ps -x</code> 显示后台进程运行的参数</p><h3 id="ps详解"><a href="#ps详解" class="headerlink" title="ps详解"></a>ps详解</h3><h4 id="进程详解信息"><a href="#进程详解信息" class="headerlink" title="进程详解信息"></a>进程详解信息</h4><p>可以使用 <code>ps -aux | more</code>查看进程详细信息</p><p>也可以使用grep进行过滤 <code>ps -aux | grep xxx</code></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184941.png" alt="image-20220226123736480"></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184944.png" alt="image-20220226123617462"></p><h4 id="全格式详解所有进程"><a href="#全格式详解所有进程" class="headerlink" title="全格式详解所有进程"></a>全格式详解所有进程</h4><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184948.png" alt="image-20220226123844202"></p><p>以全格式显示当前的所有进程：<code>ps -ef | grep xxx</code></p><h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p>某个进程执行到一半需要停止时，或是已经消耗了很大的系统资源时，可以考虑关掉该进程</p><p><code>kill [选项] 进程号</code> ：通过进程号杀死进程</p><p><code>killall 进程名称</code> ：通过进程名称杀死进程，也支持通配符<br><code>-9</code> 表示强迫进程立即停止</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184950.png" alt="image-20220226124209244"></p><p>案例一：需要踢掉某个非法登录用户</p><img src="https://gitee.com/li-il/pics/raw/master/20220228184953.png" alt="image-20220226124523588" style="zoom:200%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 踢掉某个非法登录用户<br><span class="hljs-built_in">kill</span> 进程号，比如<span class="hljs-built_in">kill</span> 11421<br>说明：因为priv是先导进程，所以杀掉父进程，子进程也会被杀掉<br>2. 终止远程登陆服务sshd，在适当的时候再次重启sshd服务<br><span class="hljs-built_in">kill</span> sshd对应的进程号<br>/bin/systemctl start sshd.service<br>3. 终止多个gedit<br>killall gedit<br>4. 强制杀掉一个终端<br><span class="hljs-built_in">kill</span> -9 bash对应的进程号<br></code></pre></td></tr></table></figure><h3 id="pstree指令"><a href="#pstree指令" class="headerlink" title="pstree指令"></a>pstree指令</h3><p>pstree [选项]：更加直观的查看进程信息</p><p>-p          显示进程的PID</p><p>-u          显示进程的所属用户</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">应用实例：<br><span class="hljs-bullet">1.</span> 以树状的形式显示进程的pid<br>pstree -p<br><span class="hljs-bullet">2.</span> 以树状的形式显示进程的用户<br>pstree -u<br><span class="hljs-bullet">3.</span> 额外小知识 在root用户下，查看所有的用户和密码<br>cat /etc/passwd<br></code></pre></td></tr></table></figure><h1 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h1><ul><li>介绍</li></ul><p>服务：本质就是进程，但是运行在后台，通常会监听某个端口，等待其他程序的请求，比如mysqld，sshd，防火墙等，又称为守护进程。</p><ul><li>service 管理指令</li></ul><ol><li><p>service 服务名【start、stop、restart、reload、status】</p></li><li><p>在centOS7.0后服务大多数使用<code>systemctl</code></p></li><li><p>service指令管理的服务在<code>/etc/init.d</code>查看</p><p><code>ls -l /etc/init.d</code></p></li><li><p>需要使用service指令，查看，关闭，启动network</p><p>（需要在虚拟系统演示，因为网络连接会关闭）</p></li><li><p>原理解释：在系统中，mysql客户端会去找Linux的端口号（3306），然后开启对应的后台进程</p></li></ol><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184959.png" alt="image-20220226125639370"></p><h3 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名"></a>查看服务名</h3><ul><li>使用<code>setup</code> 就可以看到所有的系统服务</li><li><code>ls -l /etc/init.d</code> 查看service指令管理的服务</li></ul><h3 id="服务的运行级别"><a href="#服务的运行级别" class="headerlink" title="服务的运行级别"></a>服务的运行级别</h3><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185001.png" alt="image-20220226125949280"></p><h3 id="服务管理-1"><a href="#服务管理-1" class="headerlink" title="服务管理"></a>服务管理</h3><ul><li><p>介绍</p><p>chkconfig指令可以给服务的各个运行级别设置自启动或自关闭</p><p>chkconfig指令管理的服务在&#x2F;etc&#x2F;init.d上查看</p></li><li><p>基本语法</p><p> <code>chkconfig --list</code> </p><p><code>chkconfig --list | grep xxx</code></p><p><code>chkconfig --level 5 服务名 on/off</code></p></li><li><p>应用实例</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">对network服务进行各种操作，把network在<span class="hljs-number">3</span>运行级别关闭自启动<br>chkconfig <span class="hljs-comment">--level 3 network off</span><br></code></pre></td></tr></table></figure></li><li><p>chkconfig重新设置服务自启动或者关闭，需要重启reboot生效</p></li></ul><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><ul><li><p>systemctl管理指令</p><p><code>systemctl 【start、stop、restart、status】 服务名</code></p><p>systemctl指令管理的服务可以在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system查看</p></li><li><p>systemctl设置服务的自启动状态</p><p><code>systemctl list-unit-files [| grep 服务名]</code> 查看服务开机启动状态</p><p><code>systemctl enable 服务名</code> 设置服务开机启动</p><p><code>systemctl disable 服务名</code> 关闭服务开机启动</p><p><code>systemctl is-enabled 服务名</code> 查询某个服务是否是自启动的</p></li><li><p>应用案例</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">查看当前防火墙的状况，关闭和重启防火墙<br><span class="hljs-string">systemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">stop</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">firewalld</span><br>上课演示，查看服务<br><span class="hljs-string">ls</span> -<span class="hljs-string">l</span> /<span class="hljs-string">usr</span>/<span class="hljs-string">lib</span>/<span class="hljs-string">systemd</span>/<span class="hljs-string">system</span> | <span class="hljs-string">grep</span> <span class="hljs-string">fire</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-unit-files</span> | <span class="hljs-string">grep</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">is-enabled</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">is-enabled</span> <span class="hljs-string">sshd</span>.<span class="hljs-string">service</span><br></code></pre></td></tr></table></figure></li><li><p>细节讨论</p><p>关闭或重启防火墙后，立即生效。（telent 测试某个端口即可）。</p><p>这种方式是临时生效，重启系统后，回归以前对服务的设置。</p><p>如果希望某服务启动或关闭永久生效，就使用<code>systemctl [enabled/disabled] 服务名</code>。</p></li></ul><h3 id="打开或关闭指定端口"><a href="#打开或关闭指定端口" class="headerlink" title="打开或关闭指定端口"></a>打开或关闭指定端口</h3><ul><li>firewall指令</li></ul><p>​    <code>firewall-cmd --permanent --add-port=端口号/协议</code>     打开端口</p><p>​    <code>    firewall-cmd --permanent --remove-port=端口号/协议</code>    关闭端口</p><p>​    <code>    firewall-cmd --reload</code>    重新载入，才能生效</p><p>​    <code>   firewall-cmd --permanent --query-port=端口号/协议   </code>查询端口是否开放</p><ul><li><p>应用案例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 启用防火墙，测试<span class="hljs-number">111</span>端口是否能telent<br><span class="hljs-attribute">netstat</span> -anp | more 查看对应的协议<br><span class="hljs-attribute">telnet</span> <span class="hljs-number">192.168.200.130</span> <span class="hljs-number">111</span><br><span class="hljs-attribute">2</span>. 开放<span class="hljs-number">111</span>端口<br><span class="hljs-attribute">firewall</span>-cmd --permanent --add-port=<span class="hljs-number">111</span>/tcp<br><span class="hljs-attribute">firewall</span>-cmd --reload<br><span class="hljs-attribute">firewall</span>-cmd --permanent --query-port=<span class="hljs-number">111</span>/tcp<br><span class="hljs-attribute">3</span>. 关闭<span class="hljs-number">111</span>端口<br><span class="hljs-attribute">firewall</span>-cmd --permanent --remove-port=<span class="hljs-number">111</span>/tcp<br></code></pre></td></tr></table></figure></li></ul><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><p>top与ps命令很相似，都是用来显示正在执行的进程，但是top在执行一段时间后，可以更新正在运行的进程。</p><p><code>top【选项】</code></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒更新，默认是3秒</td></tr><tr><td>-i</td><td>使top不显示任何限制或僵死进程</td></tr><tr><td>-p</td><td>指定监控进程ID来仅仅监视某个进程的状态</td></tr></tbody></table><blockquote><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185007.png" alt="image-20220226143535876"></p><p>三个值加起来除以三，如果在0.7以上，就需要注意了，说明系统负载比较大</p><p>在终端输入top，然后观察进程（P78）</p></blockquote><h3 id="动态监控"><a href="#动态监控" class="headerlink" title="动态监控"></a>动态监控</h3><p><strong>交互操作说明</strong></p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><p><strong>应用案例</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-number">1.</span> 监视特定用户，例如tom<br><span class="hljs-built_in">top</span>：输入此命令，然后回车，查看执行的进程<br>u：然后输入u，回车，在输入用户名，即可<br><span class="hljs-number">2.</span> 终止指定的进程，例如结束tom登录<br><span class="hljs-built_in">top</span><br>k<br>输入要结束的进程ID号<br><span class="hljs-number">9</span> （输入信号量，强制关闭）<br><span class="hljs-number">3.</span> 指定系统状态更新的时间（每隔<span class="hljs-number">10</span>秒自动更新），默认是<span class="hljs-number">3</span>秒<br><span class="hljs-built_in">top</span> -d <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="查看系统网络情况netstat"><a href="#查看系统网络情况netstat" class="headerlink" title="查看系统网络情况netstat"></a>查看系统网络情况netstat</h3><p><code>netstat [选项]</code></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-an</td><td>按一定顺序排序输出</td></tr><tr><td>-p</td><td>显示哪个进程正在调用</td></tr></tbody></table><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">应用案例<br>查看服务名为sshd的服务的信息<br>netstat -anp <span class="hljs-string">| grep sshd</span><br></code></pre></td></tr></table></figure><h3 id="检测主机连接命令ping"><a href="#检测主机连接命令ping" class="headerlink" title="检测主机连接命令ping"></a>检测主机连接命令ping</h3><p>是一种网络检测工具，主要是用于检测远程主机是否正常，或者是两部主机间的网线或网卡故障。</p><p><code>ping 对方ip地址</code></p><blockquote><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185011.png" alt="image-20220226144452971"></p><p>ESTABLISHED：已经成功建立连接的</p><p>LISTEN：正在等待建立连接的</p><p>如果是tom用户logout，那么不会立刻断开，而是会有一个timewait的过程</p></blockquote><h1 id="RPM管理"><a href="#RPM管理" class="headerlink" title="RPM管理"></a>RPM管理</h1><p>查看已安装的rpm列表 <code>rpm -qa | grep xxx</code></p><p>举例：查看当前系统是否安装了firefox</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185014.png" alt="image-20220227154138600"></p><h3 id="rpm包的其他查询指令"><a href="#rpm包的其他查询指令" class="headerlink" title="rpm包的其他查询指令"></a>rpm包的其他查询指令</h3><p><code>rpm -qa</code>    查询所安装的所有rpm软件包</p><p><code>rpm -qa | more    </code></p><p><code>rpm -qa | grep xxx    </code></p><p><code>rpm -q 软件包名</code>    查询软件包是否安装</p><p><code>rpm -qi 软件包名</code>    查询软件包信息</p><p><code>rpm -ql 软件包名</code>    查询软件包中的文件</p><p><code>rpm -qf 文件全路径名    </code>    查询文件所属的软件包</p><p><code>rpm -qf /etc/passwd</code>    </p><p><code>rpm -qf /root/install.log</code>    </p><p>（例如：软件包名&#x3D;firefox）</p><h3 id="卸载rpm包"><a href="#卸载rpm包" class="headerlink" title="卸载rpm包"></a>卸载rpm包</h3><p><code>rpm -e RPM包名 //erase</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">应用案例<br>删除firefox 软件包<br>rpm -e firefox<br></code></pre></td></tr></table></figure><p><strong>细节讨论</strong></p><p>如果其他软件包依赖于要卸载的软件包，则卸载时会出现错误信息。</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185018.png" alt="image-20220227155157344"></p><p>如果要删除foo，可以使用<code>$rpm -e --nodeps foo</code>强制删除，但是一般不推荐，因为依赖于该软件包的程序可能无法运行</p><h3 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h3><p><code>rpm -ivh RPM包全路径名称</code></p><blockquote><p>i&#x3D;install    安装</p><p>v&#x3D;verbose    提示</p><p>h&#x3D;hash    进度条</p></blockquote><blockquote><p><strong>应用实例</strong><br>卸载和安装firefox</p><p>打开桌面上的驱动，然后进入Packages文件夹</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185021.png" alt="image-20220226145128664"></p><p>可以搜索，然后将要安装的软件（如firefox）粘贴到某个文件夹下（如&#x2F;opt）</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228185024.png" alt="image-20220226145149161"></p></blockquote><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p><strong>介绍</strong></p><p>yum是一个shell前端软件包管理器，基于rpm包管理，能够从指定的服务器自动下载rpm包并安装，可以自动处理依赖性关系，并且一次性安装所有以来的软件包</p><p><strong>yum的基本指令</strong></p><p><code>yum list | grep xx软件列表</code>    查询yum服务器是否有需要安装的软件</p><p><code>yum install xxx    </code>    安装指定的yum包</p><p><strong>应用实例</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">使用yum的方式来安装firefox<br>rpm -r firefox<br>yum list <span class="hljs-string">| grep firefox</span><br>yum install firefox<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-2</title>
      <link href="/2022/03/02/Linux-2/"/>
      <url>/2022/03/02/Linux-2/</url>
      
        <content type="html"><![CDATA[<h1 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h1><h2 id="帮助信息类"><a href="#帮助信息类" class="headerlink" title="帮助信息类"></a>帮助信息类</h2><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204505.png" alt="image-20220224184447524"></p><p>例如：</p><p><code>man ls</code>：查看目录信息（按住空格键展示更多信息）</p><p><code>ls -al /root</code>：指定root目录，查看下面的所有内容</p><h1 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h1><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>显示当前工作目录的绝对路径</p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>ls [选项] [目录或文件]</code></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示当前目录所有的文件和目录，包括隐藏的</td></tr><tr><td>-l</td><td>以列表的方式显示信息</td></tr></tbody></table><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p><code>cd [参数]</code>    切换到指定目录</p><p>参数可以是相对路径或绝对路径</p><p><code>cd ~</code> 或 <code>cd</code> 回到自己的家目录</p><p><code>cd ..</code> 回到当前目录的上一级目录</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><code>mkdir [选项] 要创建的目录</code>  用于创建目录</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多级目录</td></tr></tbody></table><p><strong>应用案例</strong></p><ol><li>创建一个目录 &#x2F;home&#x2F;dog</li><li>创建多级目录 &#x2F;home&#x2F;animal&#x2F;tiger</li></ol><p><strong>提示</strong>：</p><p>案例2，如果没有animal目录，使用<code>mkdir /home/animal/tiger</code>会报错<code>没有那个文件或目录</code>，应该使用 <strong><code>mkdir -p /home/animal/tiger</code></strong></p><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p><code>rmdir [选项] 要删除的目录</code>  用于删除空目录</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多级目录</td></tr></tbody></table><p><strong>应用案例</strong></p><p>删除一个目录 &#x2F;home&#x2F;dog</p><p><strong>提示</strong>：</p><p>如果要删除<code>/home/animal</code>，但是其下还有tiger文件夹，会删除失败<code>目录非空</code>，需要 <strong><code>rm -rf /home/animal</code></strong></p><p><code>rf</code>代表递归</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p><code>touch 文件名称</code>  用于创建空文件</p><p>应用案例：</p><p>在&#x2F;home目录下，创建一个空文件hello.txt</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p><strong>基本语法</strong></p><p><code>cp [选项] source dest</code>  用于创建空文件</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table><p><strong>应用案例</strong>：</p><p>1，将 &#x2F;home&#x2F;hello.txt 拷贝到&#x2F;home&#x2F;bbb 目录下</p><p><code>cp hello.txt /home/bbb</code></p><p>在home目录下，只需输入<code>cp hello.txt bbb/</code></p><p>2，递归复制整个文件夹，举例, 比如将 &#x2F;home&#x2F;bbb 整个目录， 拷贝到 &#x2F;opt</p><p><code>cp -r /home/bbb /opt</code></p><p><strong>细节</strong></p><p>强制覆盖不提示的方法：<code>\cp</code></p><p>例如：<code>\cp -r /home/bbb /opt</code></p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p><strong>基本语法</strong></p><p><code>rm [选项] 要删除的文件或目录</code>  用于移除文件或目录</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除整个文件夹</td></tr><tr><td>-f</td><td>强制删除不提示</td></tr></tbody></table><p><strong>应用案例</strong>：</p><p>1，将 &#x2F;home&#x2F;hello.txt 删除</p><p><code>rm /home/hello.txt</code></p><p>2，递归删除整个文件夹&#x2F;home&#x2F;bbb，并且不提示</p><p><code>rm -r /home/hello.txt</code>（每删一个文件都会提示一次）</p><p><code>rm -rf /home/hello.txt</code>（删除文件不提示）</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p><strong>基本语法</strong></p><p><code>mv oldNameFile newNameFile</code>  重命名</p><p><code>mv /temp/movefile /targetFolder</code>   移动文件</p><p><strong>应用案例</strong>：</p><p>1，将 &#x2F;home&#x2F;cat.txt 文件 重新命名为 pig.txt</p><p><code>mv cat.txt pig.txt</code></p><p>2，将 &#x2F;home&#x2F;pig.txt 文件 移动到 &#x2F;root 目录下</p><p><code>mv pig.txt /root/</code></p><p>移动并且重命名：<code>mv pig.txt /root/cow.txt</code></p><p>3，移动整个目录 , 比如将 &#x2F;opt&#x2F;bbb 移动到 &#x2F;home 下 mv &#x2F;opt&#x2F;bbb &#x2F;home&#x2F;</p><p><code>mv bbb/ /home/</code></p><p>移动bbb文件并且重命名为uuu：<code>mv bbb/ /home/uuu</code></p><blockquote><p>如果文件在同一个目录，就是重命名。</p><p>如果不在，就是移动文件。</p></blockquote><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p><strong>基本语法</strong></p><p><code>cat [选项] 要查看的文件</code>  查看文件内容</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示行号</td></tr></tbody></table><p><strong>应用案例</strong></p><p>查看 &#x2F;etc&#x2F;profile 文件内容，并显示行号</p><p><strong>使用细节</strong><br>cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令 <code>| more</code><br><code>cat -n /etc/profile | more</code></p><blockquote><p>管道命令：类似于把前面的结果交给后面处理</p></blockquote><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p><code>more 要查看的文件</code></p><p>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若干快捷键用于交互。</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184753.png" alt="image-20220227195131619"></p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p><code>less 要查看的文件</code></p><p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。</p><p>less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184757.png" alt="image-20220227195230358"></p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p><strong>基本语法</strong></p><p><code>echo [选项] [输出内容]</code>  输出内容到控制台</p><p><strong>应用实例</strong></p><p>在控制台输出hello world</p><p><code>echo &quot;hello,world!&quot;</code></p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容</p><p><strong>基本语法</strong></p><p><code>head 文件</code>  查看文件头 10 行内容</p><p><code>head -n 5 文件</code>  查看文件头 5 行内容，5 可以是任意行数</p><p><strong>应用实例</strong></p><p>查看&#x2F;etc&#x2F;profile 的前面 5 行代码</p><p><code>head -n 5 /etc/profile</code></p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容。</p><p><strong>基本语法</strong></p><p><code>tail 文件</code>  查看文件尾 10 行内容</p><p><code>tail -n 5 文件</code>  查看文件尾 5 行内容，5 可以是任意行数</p><p><code>tail -f 文件</code>  实时追踪该文档的所有更新</p><p><strong>应用实例</strong></p><p>实时监控 mydate.txt , 看看到文件有变化时，是否看到实时的追加 hello,world</p><p><code>tail -f /home/mydate.txt</code></p><blockquote><p>案例会导致当前终端陷入监控状态，需要再打开另一个终端查看效果。</p><p>查看效果举例：打开另一个终端，通过重定向<code>echo &quot;hello&quot; &gt; /home/mydate.txt</code>将”hello”输入到mydate.txt</p><p>暂停监控：<code>ctrl+C</code></p></blockquote><h2 id="输出重定向-gt-和-追加-gt-gt"><a href="#输出重定向-gt-和-追加-gt-gt" class="headerlink" title="输出重定向&gt; 和 追加&gt;&gt;"></a>输出重定向&gt; 和 追加&gt;&gt;</h2><p><strong>基本语法</strong></p><p><code>ls -l &gt;文件</code>  列表的内容写入文件 a.txt 中（覆盖写）</p><p><code>ls -al &gt;&gt;文件</code>  列表的内容追加到文件的末尾</p><p><code>cat 文件 1 &gt; 文件 2</code>  将文件 1 的内容覆盖到文件 2</p><p><code>echo &quot;内容&quot;&gt;&gt; 文件</code>  追加</p><p><strong>应用实例</strong></p><p>1， 将 &#x2F;home 目录下的文件列表 写入到 &#x2F;home&#x2F;info.txt 中, 覆盖写入</p><p><code>ls -l /home &gt; /home/info.txt</code>（如果没有info.txt，则会创建）</p><p>2，将当前日历信息 追加到 &#x2F;home&#x2F;mycal 文件中</p><p><code>cal &gt;&gt; /home/mycal</code></p><p>3，在info.txt里面写入”ok”</p><p><code>echo &quot;ok&quot; &gt; /home/info.txt</code></p><p>4，文件内容覆盖</p><p><code>cat /etc/profile &gt; /home/myprofile</code></p><h2 id="In"><a href="#In" class="headerlink" title="In"></a>In</h2><p>软链接也称为符号链接，类似于 windows 里的快捷方式，主要存放了链接其他文件的路径</p><p><strong>基本语法</strong></p><p><code>ln -s [原文件或目录] [软链接名]</code>  给原文件创建一个软链接</p><p><strong>应用实例</strong></p><p>1， 在&#x2F;home 目录下创建一个软连接 myroot，连接到 &#x2F;root 目录</p><p><code>ln -s /root /home/myroot</code></p><p>可以使用<code>ls -l</code>查看当前的目录</p><p>2，删除软连接 myroot</p><p><code>rm /home/myroot</code></p><blockquote><p>注意：</p><p>删除的时候不能写<code>rm /home/myroot/</code>，不要加最后的斜杠，否则会报错<code>……是一个目录</code></p><p>当我们使用 pwd 指令查看目录时，仍然看到的是软链接所在目录。</p></blockquote><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p><strong>基本语法</strong></p><p><code>history</code>  查看已经执行过历史命令</p><p><strong>应用实例</strong></p><p>1， 显示所有的历史命令</p><p><code>history</code></p><p>2，显示最近使用过的 10 个指令</p><p><code>history 10</code></p><p>3， 执行历史编号为 5 的指令</p><p><code>!5</code></p><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><h3 id="显示时间"><a href="#显示时间" class="headerlink" title="显示时间"></a>显示时间</h3><p><strong>基本语法</strong></p><p><code>date</code>    显示当前时间</p><p><code>date +%Y</code>    显示当前年份</p><p><code>date +%m</code>    显示当前月份</p><p><code>date +%d</code>    显示当前是哪一天</p><p><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code>    显示年月日时分秒</p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><strong>基本语法</strong></p><p><code>date -s 字符串时间</code>    显示当前时间</p><p><strong>应用实例</strong></p><p>设置系统当前时间 ， 比如设置成 2020-11-03 20:02:10<br><code>date -s “2020-11-03 20:02:10”</code></p><h2 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h2><p><strong>基本语法</strong></p><p><code>cal</code>    不加选项，显示本月日历</p><p><strong>应用实例</strong></p><p>案例 1: 显示当前日历     <code>cal</code><br>案例 2: 显示 2020 年日历    <code>cal 2020</code></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><p><strong>基本语法</strong></p><p><code>find [搜索范围] [选项]</code>    </p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184807.png" alt="image-20220227201254477"></p><p><strong>应用实例</strong></p><p>1， 按文件名：根据名称查找&#x2F;home 目录下的 hello.txt 文件</p><p><code>find /home -name hello.txt</code></p><p>2，按拥有者：查找&#x2F;opt 目录下，用户名称为 nobody 的文件</p><p><code>find /opt -user nobody</code></p><p>3，查找整个 linux 系统下大于 200M 的文件（+n 大于 -n 小于 n 等于, 单位有 k,M,G）</p><p><code>find / -size +200M</code></p><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>locate 指令可以快速定位文件路径。</p><p>locate 指令利用<u>事先建立的系统</u>中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。</p><p>Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate。</p><p><strong>基本语法</strong></p><p><code>locate</code>   </p><p><strong>应用实例</strong></p><p>1，请使用 locate 指令快速定位 hello.txt 文件所在目录</p><p>2， which 指令，可以查看某个指令在哪个目录下，比如 ls 指令在哪个目录</p><p><code>which ls</code></p><p><strong>说明</strong></p><p>由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库。</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>grep 过滤查找 ， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><p><strong>基本语法</strong></p><p><code>grep [选项] 查找内容 源文件</code></p><p> <img src="https://gitee.com/li-il/pics/raw/master/20220228184812.png" alt="image-20220227201621226"> </p><p><strong>应用实例</strong></p><p>1，请在 hello.txt 文件中，查找 “yes” 所在行，并且显示行号</p><p>两种写法：</p><p><code>car /home/hello.txt | grep -n &quot;yes&quot;</code></p><p><code>grep -n &quot;yes&quot; /home/hello.txt</code></p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><h3 id="gzip-x2F-gunzip"><a href="#gzip-x2F-gunzip" class="headerlink" title="gzip&#x2F;gunzip"></a>gzip&#x2F;gunzip</h3><p><strong>基本语法</strong></p><p><code>gzip 文件</code>   压缩文件，只能将文件压缩为*.gz 文件</p><p><code>gunzip 文件.gz </code>   解压缩</p><p><strong>应用实例</strong></p><p>1，gzip 压缩， 将 &#x2F;home 下的 hello.txt 文件进行压缩</p><p><code>gzip /home/hello.txt</code><br>2， gunzip 压缩， 将 &#x2F;home 下的 hello.txt.gz 文件进行解压缩<br><code>gunzip /home/hello.txt.gz</code></p><h3 id="zip-x2F-unzip"><a href="#zip-x2F-unzip" class="headerlink" title="zip&#x2F;unzip"></a>zip&#x2F;unzip</h3><p><strong>基本语法</strong></p><p><code>zip [选项] XXX.zip</code>   </p><p><code>unzip [选项] XXX.zip </code>   </p><blockquote><p>zip常用选项</p><p><code>-r</code>    递归压缩，即压缩目录</p><p>unzip  常用选项</p><p>-d&lt;目录&gt;   指定解压后文件的存放目录</p></blockquote><p><strong>应用实例</strong></p><p>1，将 &#x2F;home 下的 所有文件&#x2F;文件夹进行压缩成 myhome.zip<br><code>zip -r myhome.zip /home/</code><br>2，将 myhome.zip 解压到 &#x2F;opt&#x2F;tmp 目录下<br><code>mkdir /opt/tmp</code><br><code>unzip -d /opt/tmp /home/myhome.zip</code></p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件。</p><p><strong>基本语法</strong></p><p><code>tar [选项] XXX.tar.gz 打包的内容  </code>  打包目录，压缩后的文件格式.tar.gz</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184816.png" alt="image-20220227202301503"></p><p><strong>应用实例</strong></p><p>1，压缩多个文件，将 &#x2F;home&#x2F;pig.txt 和 &#x2F;home&#x2F;cat.txt 压缩成 pc.tar.gz<br><code>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt</code><br>2，将&#x2F;home 的文件夹 压缩成 myhome.tar.gz<br><code>tar -zcvf myhome.tar.gz /home/</code><br>3，将 pc.tar.gz 解压到当前目录<br><code>tar -zxvf pc.tar.gz</code><br>4，将 myhome.tar.gz 解压到 &#x2F;opt&#x2F;tmp2目录下<br><code>mkdir /opt/tmp2</code></p><p><code>tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-1</title>
      <link href="/2022/03/01/Linux-1/"/>
      <url>/2022/03/01/Linux-1/</url>
      
        <content type="html"><![CDATA[<h1 id="简介和环境配置"><a href="#简介和环境配置" class="headerlink" title="简介和环境配置"></a>简介和环境配置</h1><h2 id="下载VMWare"><a href="#下载VMWare" class="headerlink" title="下载VMWare"></a>下载VMWare</h2><p>详情参见老师的文档。</p><blockquote><p>补充：</p><p>Linux一共有三个分区，东西都放在根分区</p><p>交换分区：可以临时作为内存的补充，但是速度没有真实内存快。</p><p>boot：1G</p><p>swap：2G</p><p>\</p></blockquote><h2 id="下载CentOS"><a href="#下载CentOS" class="headerlink" title="下载CentOS"></a>下载CentOS</h2><p>详情请见老师的文档。</p><p>CentOS细节介绍</p><blockquote><p><strong>软件选择：</strong><img src="https://gitee.com/li-il/pics/raw/master/20220228184527.png" alt="image-20220223174716248">软件选择之后会检查安装源，需要等待一会儿。</p><p><strong>配置分区：</strong></p><p>选择【我要配置分区】，点击【完成】，后弹出界面。<img src="https://gitee.com/li-il/pics/raw/master/20220228184529.png" alt="image-20220223175032299"></p><p>接下来配置<img src="https://gitee.com/li-il/pics/raw/master/20220228184531.png" alt="image-20220223175441323">然后点击【接受更改】。</p><p><strong>KDUMP：</strong></p><p>是一种内核崩溃转储机制，再系统崩溃的时候用于捕获系统信息。</p><p>如果是实际的生产环境中，可以开启KDUMP。</p><p><strong>设置网络：</strong></p><p>打开即可。</p><p><strong>提醒</strong>：</p><p>实际生活中密码一定要复杂一点。可以使用随机密码生成的。</p><p>输入tar vm之后输入tab，可以自动补全</p></blockquote><h2 id="网络连接的三种方式"><a href="#网络连接的三种方式" class="headerlink" title="网络连接的三种方式"></a>网络连接的三种方式</h2><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184533.png" alt="image-20220223174232519"></p><h2 id="虚拟机的克隆"><a href="#虚拟机的克隆" class="headerlink" title="虚拟机的克隆"></a>虚拟机的克隆</h2><p>如果已经安装了一台虚拟机，就没必要重新安装，直接克隆即可。</p><ol><li><p>直接拷贝一份已经安装好的虚拟机文件。</p><p>在文件夹里面复制粘贴。然后再VM里面选择【打开】。<img src="https://gitee.com/li-il/pics/raw/master/20220228184539.png" alt="image-20220223182419425"></p></li><li><p>使用vm的安装操作</p><p>注意：<strong>克隆时需要先关闭linux系统</strong><img src="https://gitee.com/li-il/pics/raw/master/20220228184541.png" alt="image-20220223182150269"></p></li></ol><h2 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h2><p>如果在使用虚拟机的时候，想回到原来的某一个正常的状态（担心某些误操作造成系统异常），需要快照管理。</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184633.png" alt="image-20220223182746020"></p><p>返回某快照：在【快照管理】界面，选择需要回到的快照，点击【转到】。</p><h2 id="虚拟机的迁移和删除"><a href="#虚拟机的迁移和删除" class="headerlink" title="虚拟机的迁移和删除"></a>虚拟机的迁移和删除</h2><p>虚拟机的迁移：其实就是文件夹整体的剪切。</p><p>虚拟机的删除：VMWare右键选择【移除】，然后在文件夹中删除整个文件夹。</p><h2 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h2><p><strong>场景：</strong>如果想在windows主机和linux虚拟机上都操作同一个文件夹，需要安装VMTools。</p><p><strong>提示：</strong>需要用rooot用户来操作。</p><p><strong>技巧：</strong>VMware Tools安装是灰色的，需要在虚拟机开机之后，没有完全开机之前点击。</p><ol><li>进入CentOS桌面，然后弹出桌面上的驱动。</li><li>点击Vmware菜单【虚拟机】，点击【安装VMTools】，然后桌面上会出现一个光盘名为【VMTools】。</li><li>打开光盘会出现一个文件夹，将文件夹【VMwareTools-10.3.22-15902021.tar.gz】拷贝到【其他位置】【计算机】的&#x2F;opt文件夹下。</li><li>打开终端，进入opt文件夹，使用解压命令<code>tar</code>得到一个安装文件<img src="C:\Users\LXR\AppData\Roaming\Typora\typora-user-images\image-20220223200001696.png" alt="image-20220223200001696"></li><li><code>cd vmware-tools-distrib/</code>进入vm解压后的文件夹下，执行<code>./vmware-install.pl</code>，然后一路回车即可。</li><li>注意：安装的时候需要有gcc，可以通过<code>gcc -v</code>查看自己的gcc版本。</li></ol><p><strong>设置共享文件夹：</strong></p><ol><li><p>设置一个共享文件夹，比如<code>F:\WorkSpace\linux\myshare</code>在文件夹下建立一个<code>a.txt</code></p></li><li><p>打开设置，<img src="https://gitee.com/li-il/pics/raw/master/20220228184639.png" alt="image-20220223200736307"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315203942.png" alt="image-20220223200911235"></p><p>在【主机路径】【浏览】下选择刚刚的共享文件夹，然后【下一步】，默认【启用此共享】即可。</p></li><li><p>在<code>计算机/mnt/hgfs</code>下，可以查看共享文件夹。</p></li></ol><p>但是在实际开发中，文件的上传下载是通过远程方式完成的。（经典白学预警 ）</p><h2 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h2><h3 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h3><ol><li><p>在linux中，一切皆文件，并把硬件映射成文件形式，且目录无法修改。</p></li><li><p>linux的文件系统是采用<u>级层式的树状目录结构</u>，在此结构中的最上层是根目录<code>/</code>，然后在此目录下再创建其他的目录。</p></li></ol><h3 id="具体的目录结构"><a href="#具体的目录结构" class="headerlink" title="具体的目录结构"></a>具体的目录结构</h3><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184644.png" alt="image-20220223214801594"><img src="https://gitee.com/li-il/pics/raw/master/20220228184647.png" alt="image-20220223214951427"></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204359.png"></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184648.png" alt="image-20220223214827389"></p><h3 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h3><p>情景：在公司中开发时，就有以下特点</p><ol><li>linux 服务器是开发小组共享</li><li>正式上线的项目是运行在公网</li><li>因此程序员需要远程登录到 Linux 进行项目管理或者开发</li><li>画出简单的网络拓扑示意图(帮助理解)</li></ol><h4 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h4><ol><li><p>下载XShell</p></li><li><p>测试</p></li></ol><p>在Linux系统下打开终端，查看ip</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184651.png" alt="image-20220223215708994"></p><p>然后在Windows系统下打开终端，尝试连接</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184652.png" alt="image-20220223215741625"></p><p>打开XShell，【新建】，名称可以随便写但是主机必须正确。<img src="https://gitee.com/li-il/pics/raw/master/20220228184701.png" alt="image-20220223215824277"></p><p>就可以连接到Linux系统了<img src="https://gitee.com/li-il/pics/raw/master/20220228184655.png" alt="image-20220223215953859"></p><h4 id="远程传输"><a href="#远程传输" class="headerlink" title="远程传输"></a>远程传输</h4><p>打开Xftp，点击【新建】，<u>注意端口号也是22</u></p><p><img src="https://gitee.com/li-il/pic_bed/raw/master/img/20220315204429.png" alt="image-20220223220130019"></p><blockquote><p>乱码解决：左上角文件 - 当前会话属性 - 左上角 常规，点击旁边的“选项”，将“编码”改为UTF-8</p></blockquote><p> <img src="https://gitee.com/li-il/pics/raw/master/20220228184710.png" alt="image-20220223220410675"></p><blockquote><p>windows和linux之间的文件传输是双向的。</p><p>点击【传输】即可。</p></blockquote><h1 id="VI和VIM"><a href="#VI和VIM" class="headerlink" title="VI和VIM"></a>VI和VIM</h1><ol><li>Linux 系统会内置 vi 文本编辑器</li><li>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。<br>代码补完、编译及错误跳转等方便编程的功能<h2 id="VI和VIM的三种常用模式"><a href="#VI和VIM的三种常用模式" class="headerlink" title="VI和VIM的三种常用模式"></a>VI和VIM的三种常用模式</h2></li></ol><p><strong>正常模式</strong><br>VM打开直接进入默认模式，可以使用『上下左右』按键来移动光标，『删除字符』或『删除整行』来处理档案内容， 『复制、粘贴』来处理文件数据。</p><p><strong>插入模式</strong></p><p>按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可</p><p><strong>命令行模式</strong></p><p>先输入esc，在输入<code>:</code>，可以完成一系列命令操作。</p><h2 id="VI和VIM的基本使用"><a href="#VI和VIM的基本使用" class="headerlink" title="VI和VIM的基本使用"></a>VI和VIM的基本使用</h2><p>使用VIM开发Helloworld.java程序</p><p>在控制台输入<code>vim Hello.java</code>，表示开启一个vim编辑器。</p><p>然后写入java程序后，按住<code>esc</code>，输入<code>:wq</code>表示写入并退出， <code>:q!</code>强制退出不保存。</p><h2 id="各种模式之间的相互切换"><a href="#各种模式之间的相互切换" class="headerlink" title="各种模式之间的相互切换"></a>各种模式之间的相互切换</h2><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184714.png" alt="image-20220223223707481"></p><h3 id="快捷键使用练习"><a href="#快捷键使用练习" class="headerlink" title="快捷键使用练习"></a>快捷键使用练习</h3><ol><li><p>拷贝当前行<code>yy</code> , 拷贝当前行向下的 5 行<code>5yy</code>，并粘贴（输入 p）。</p></li><li><p>删除当前行<code>dd</code>, 删除当前行向下的 5 行 <code>5dd</code></p></li><li><p>在文件中查找某个单词 [命令行下<code> /关键字</code>， 回车 查找 ,输入<code>n</code> 就是查找下一个 ]</p></li></ol><ol start="4"><li>设置文件的行号，取消文件的行号<br> 命令行下 <code>:set nu</code> 和<code>:set nonu</code></li></ol><ol start="5"><li><p>编辑 &#x2F;etc&#x2F;profile 文件，在一般模式下, 使用快捷键到该文档的最末行<code>G</code>和最首行<code>gg</code></p></li><li><p>在一个文件中输入 “hello” ,在一般模式下, 然后又撤销这个动作<code>u</code></p></li><li><p>编辑&#x2F;etc&#x2F;profile 文件，在一般模式下,并将光标移动到 , 输入<code> 20</code>,再输入<code> shift+g</code></p></li><li><blockquote><p>yy：在正常模式下输入，表示拷贝，但是如果是输入模式下，就是输入yy</p><p>输入yy p，表示拷贝</p></blockquote></li></ol><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184717.png" alt="image-20220224120333362"></p><h2 id="登陆注销"><a href="#登陆注销" class="headerlink" title="登陆注销"></a>登陆注销</h2><p><strong>介绍：</strong></p><p>登录时尽量少用root账号登录，因为他是系统管理员，最大的权限，避免操作失误，可以利用普通用户登录，登录后再用  <code>su - 用户名</code>  命令切换成系统管理员身份</p><p>在提示符下输入  <code>logout </code>  可注销用户</p><p><strong>注意</strong>：</p><p>logout注销指令在运行级别3下有效，在图形级别下无效。</p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p><p>由一个root用户可以创建多个用户（例如tom）。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><strong>基本语法</strong></p><p><code>useradd 用户名</code></p><p><strong>应用案例</strong></p><p>添加一个用户milan</p><blockquote><ol><li><p>当创建米兰用户成功的时候，自动创建该用户的家目录<code>/home/milan</code>，并且在登陆的时候会默认进入该用户的家目录下。</p></li><li><p>也可以通过 <code>useradd -d 指定目录 新的用户名</code>来给新创建的用户指定家目录</p></li></ol><blockquote><p>例如  <code>useradd -d /home/kkk king</code>意为：创建一个用户king，用户的家目录为kkk。</p></blockquote></blockquote><h2 id="指定或修改密码"><a href="#指定或修改密码" class="headerlink" title="指定或修改密码"></a>指定或修改密码</h2><p><strong>基本语法</strong></p><p><code>passwd 用户名</code></p><p><strong>应用案例</strong></p><p>给米兰指定密码</p><blockquote><p>补充：</p><p><code>pwd</code>：显示当前所在目录</p><p><code>id 用户名</code>：查看该用户的信息。</p></blockquote><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p><strong>基本语法</strong></p><p><code>userdel 用户名</code></p><p>&#96;&#96;userdel -r 用户名&#96;</p><p><strong>应用案例</strong></p><p>删除用户milan，但是保留家目录 <code>userdel milan</code></p><p>删除用户milan以及用户主目录 <code>userdel -r milan</code></p><blockquote><p>需要切换root用户，自己不能删除自己</p><p>一般情况下，建议保留用户主目录</p></blockquote><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>在Linux中，如果当前用户的权限不够，可以通过<code>su - 用户名</code>指令，切换到高权限用户，比如root</p><p><strong>基本语法</strong></p><p><code>su - 用户名</code></p><p><strong>应用案例</strong></p><p>创建一个用户jack，指定密码，然后切换到jack</p><blockquote><ol><li>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</li><li>当需要切换到原来的用户时候，需要使用<code>exit</code>或者<code>logout</code>指令</li><li>查看当前<u>登录</u>用户<code>whoami</code>或<code>who am i</code></li></ol></blockquote><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>系统可以对有共性（权限）的多个用户进行统一的管理</p><p><strong>应用案例</strong></p><p>添加组：<code>groupadd wudang</code></p><p>删除组：<code>groupdel wudang</code></p><p>创建用户的时候加上组：<code>useradd -g wudang zwj</code></p><p>修改组：<code>usermod -g mojiao zwj</code></p><blockquote><p>如果创建用户的时候没有指定组，就会默认创建一个和用户名相同的组并且把用户放进去</p></blockquote><blockquote><p>补充：</p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184722.png" alt="image-20220224123103176"></p></blockquote><h1 id="Linux实操篇-实用指令"><a href="#Linux实操篇-实用指令" class="headerlink" title="Linux实操篇 实用指令"></a>Linux实操篇 实用指令</h1><h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184725.png" alt="image-20220224123648038"></p><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184727.png" alt="image-20220224124500877"></p><p>查看当前运行级别：<code>systemctl get-default</code></p><p>设置当前运行级别为3：<code>systemctl set-default multi-user.target</code></p><p>如果改变之后再重启，就会进入运行级别为3的界面。</p><h3 id="Linux找回root用户的密码"><a href="#Linux找回root用户的密码" class="headerlink" title="Linux找回root用户的密码"></a>Linux找回root用户的密码</h3><p><strong>方法：</strong></p><ol><li>首先，启动系统，进入开机界面，在界面中按“e”进入编辑界面。如图<img src="https://gitee.com/li-il/pics/raw/master/20220228184736.png" alt="image-20220224125015927"></li><li>进入编辑界面，使用键盘上的上下键把光标往下移动，找到以““Linux16”开头内容所在的行数”，在行的最后面输入：init&#x3D;&#x2F;bin&#x2F;sh。如图<img src="https://gitee.com/li-il/pics/raw/master/20220228184737.png" alt="image-20220224125032894"></li><li>接着，输入完成后，直接按快捷键：<code>Ctrl+x</code> 进入单用户模式。</li><li>接着，在光标闪烁的位置中输入：<code>mount -o remount,rw /</code>（注意：各个单词间有空格），完成后按键盘的回车键（Enter）。</li><li>在新的一行最后面输入：passwd， 完成后按键盘的回车键（Enter）。输入密码，然后再次确认密码即可(韩顺平提示: 密码长度最好8位以上,但不是必须的), 密码修改成功后，会显示passwd…..的样式，说明密码修改成功<img src="https://gitee.com/li-il/pics/raw/master/20220228184742.png" alt="image-20220224131459675"></li><li>接着，在鼠标闪烁的位置中（最后一行中）输入：touch &#x2F;.autorelabel（注意：touch与 &#x2F;后面有一个空格），完成后按键盘的回车键（Enter）</li><li>继续在光标闪烁的位置中，输入：exec &#x2F;sbin&#x2F;init（注意：exec与 &#x2F;后面有一个空格），完成后按键盘的回车键（Enter）,等待系统自动修改密码(韩顺平提示：这个过程时间可能有点长，耐心等待)，完成后，系统会自动重启, 新的密码生效了<img src="https://gitee.com/li-il/pics/raw/master/20220228184744.png" alt="image-20220224131533785"></li></ol><h1 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h1><h2 id="帮助信息类"><a href="#帮助信息类" class="headerlink" title="帮助信息类"></a>帮助信息类</h2><p><img src="https://gitee.com/li-il/pics/raw/master/20220228184747.png" alt="image-20220224184447524"></p><p>例如：</p><p><code>man ls</code>：查看目录信息（按住空格键展示更多信息）</p><p><code>ls -al /root</code>：指定root目录，查看下面的所有内容</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
